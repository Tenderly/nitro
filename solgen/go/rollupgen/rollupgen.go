// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rollupgen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/tenderly/nitro/go-ethereum"
	"github.com/tenderly/nitro/go-ethereum/accounts/abi"
	"github.com/tenderly/nitro/go-ethereum/accounts/abi/bind"
	"github.com/tenderly/nitro/go-ethereum/common"
	"github.com/tenderly/nitro/go-ethereum/core/types"
	"github.com/tenderly/nitro/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Assertion is an auto generated low-level Go binding around an user-defined struct.
type Assertion struct {
	BeforeState ExecutionState
	AfterState  ExecutionState
	NumBlocks   uint64
}

// BridgeCreatorBridgeContracts is an auto generated low-level Go binding around an user-defined struct.
type BridgeCreatorBridgeContracts struct {
	Bridge           common.Address
	SequencerInbox   common.Address
	Inbox            common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
}

// Config is an auto generated low-level Go binding around an user-defined struct.
type Config struct {
	ConfirmPeriodBlocks            uint64
	ExtraChallengeTimeBlocks       uint64
	StakeToken                     common.Address
	BaseStake                      *big.Int
	WasmModuleRoot                 [32]byte
	Owner                          common.Address
	LoserStakeEscrow               common.Address
	ChainId                        *big.Int
	ChainConfig                    string
	GenesisBlockNum                uint64
	SequencerInboxMaxTimeVariation ISequencerInboxMaxTimeVariation
}

// ContractDependencies is an auto generated low-level Go binding around an user-defined struct.
type ContractDependencies struct {
	Bridge                 common.Address
	SequencerInbox         common.Address
	Inbox                  common.Address
	Outbox                 common.Address
	RollupEventInbox       common.Address
	ChallengeManager       common.Address
	RollupAdminLogic       common.Address
	RollupUserLogic        common.Address
	ValidatorUtils         common.Address
	ValidatorWalletCreator common.Address
}

// ExecutionState is an auto generated low-level Go binding around an user-defined struct.
type ExecutionState struct {
	GlobalState   GlobalState
	MachineStatus uint8
}

// GlobalState is an auto generated low-level Go binding around an user-defined struct.
type GlobalState struct {
	Bytes32Vals [2][32]byte
	U64Vals     [2]uint64
}

// IRollupCoreStaker is an auto generated low-level Go binding around an user-defined struct.
type IRollupCoreStaker struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}

// ISequencerInboxMaxTimeVariation is an auto generated low-level Go binding around an user-defined struct.
type ISequencerInboxMaxTimeVariation struct {
	DelayBlocks   uint64
	FutureBlocks  uint64
	DelaySeconds  uint64
	FutureSeconds uint64
}

// Node is an auto generated low-level Go binding around an user-defined struct.
type Node struct {
	StateHash                   [32]byte
	ChallengeHash               [32]byte
	ConfirmData                 [32]byte
	PrevNum                     uint64
	DeadlineBlock               uint64
	NoChildConfirmedBeforeBlock uint64
	StakerCount                 uint64
	ChildStakerCount            uint64
	FirstChildBlock             uint64
	LatestChildNumber           uint64
	CreatedAtBlock              uint64
	NodeHash                    [32]byte
}

// RollupCreatorRollupDeploymentParams is an auto generated low-level Go binding around an user-defined struct.
type RollupCreatorRollupDeploymentParams struct {
	Config                    Config
	BatchPoster               common.Address
	Validators                []common.Address
	MaxDataSize               *big.Int
	NativeToken               common.Address
	DeployFactoriesToL2       bool
	MaxFeePerGasForRetryables *big.Int
}

// ValidatorUtilsNodeConflict is an auto generated low-level Go binding around an user-defined struct.
type ValidatorUtilsNodeConflict struct {
	Ty    uint8
	Node1 uint64
	Node2 uint64
}

// AbsRollupEventInboxMetaData contains all meta data concerning the AbsRollupEventInbox contract.
var AbsRollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollupNotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// AbsRollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use AbsRollupEventInboxMetaData.ABI instead.
var AbsRollupEventInboxABI = AbsRollupEventInboxMetaData.ABI

// AbsRollupEventInbox is an auto generated Go binding around an Ethereum contract.
type AbsRollupEventInbox struct {
	AbsRollupEventInboxCaller     // Read-only binding to the contract
	AbsRollupEventInboxTransactor // Write-only binding to the contract
	AbsRollupEventInboxFilterer   // Log filterer for contract events
}

// AbsRollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type AbsRollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AbsRollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AbsRollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AbsRollupEventInboxSession struct {
	Contract     *AbsRollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// AbsRollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AbsRollupEventInboxCallerSession struct {
	Contract *AbsRollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// AbsRollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AbsRollupEventInboxTransactorSession struct {
	Contract     *AbsRollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// AbsRollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type AbsRollupEventInboxRaw struct {
	Contract *AbsRollupEventInbox // Generic contract binding to access the raw methods on
}

// AbsRollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AbsRollupEventInboxCallerRaw struct {
	Contract *AbsRollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// AbsRollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AbsRollupEventInboxTransactorRaw struct {
	Contract *AbsRollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAbsRollupEventInbox creates a new instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInbox(address common.Address, backend bind.ContractBackend) (*AbsRollupEventInbox, error) {
	contract, err := bindAbsRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInbox{AbsRollupEventInboxCaller: AbsRollupEventInboxCaller{contract: contract}, AbsRollupEventInboxTransactor: AbsRollupEventInboxTransactor{contract: contract}, AbsRollupEventInboxFilterer: AbsRollupEventInboxFilterer{contract: contract}}, nil
}

// NewAbsRollupEventInboxCaller creates a new read-only instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*AbsRollupEventInboxCaller, error) {
	contract, err := bindAbsRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxCaller{contract: contract}, nil
}

// NewAbsRollupEventInboxTransactor creates a new write-only instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*AbsRollupEventInboxTransactor, error) {
	contract, err := bindAbsRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxTransactor{contract: contract}, nil
}

// NewAbsRollupEventInboxFilterer creates a new log filterer instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*AbsRollupEventInboxFilterer, error) {
	contract, err := bindAbsRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxFilterer{contract: contract}, nil
}

// bindAbsRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindAbsRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AbsRollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AbsRollupEventInbox *AbsRollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AbsRollupEventInbox.Contract.AbsRollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AbsRollupEventInbox *AbsRollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.AbsRollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AbsRollupEventInbox *AbsRollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.AbsRollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AbsRollupEventInbox *AbsRollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AbsRollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) Bridge() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Bridge(&_AbsRollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Bridge(&_AbsRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) Rollup() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Rollup(&_AbsRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Rollup(&_AbsRollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _AbsRollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.Initialize(&_AbsRollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.Initialize(&_AbsRollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _AbsRollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.RollupInitialized(&_AbsRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.RollupInitialized(&_AbsRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.UpdateRollupAddress(&_AbsRollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.UpdateRollupAddress(&_AbsRollupEventInbox.TransactOpts)
}

// AbsRollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDeliveredIterator struct {
	Event *AbsRollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*AbsRollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxInboxMessageDeliveredIterator{contract: _AbsRollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *AbsRollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupEventInboxInboxMessageDelivered)
				if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*AbsRollupEventInboxInboxMessageDelivered, error) {
	event := new(AbsRollupEventInboxInboxMessageDelivered)
	if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *AbsRollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _AbsRollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *AbsRollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*AbsRollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicMetaData contains all meta data concerning the AbsRollupUserLogic contract.
var AbsRollupUserLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VALIDATOR_AFK_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winningStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"losingStaker\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedBlocks\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNodeCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakedOnLatestConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// AbsRollupUserLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use AbsRollupUserLogicMetaData.ABI instead.
var AbsRollupUserLogicABI = AbsRollupUserLogicMetaData.ABI

// AbsRollupUserLogic is an auto generated Go binding around an Ethereum contract.
type AbsRollupUserLogic struct {
	AbsRollupUserLogicCaller     // Read-only binding to the contract
	AbsRollupUserLogicTransactor // Write-only binding to the contract
	AbsRollupUserLogicFilterer   // Log filterer for contract events
}

// AbsRollupUserLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type AbsRollupUserLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupUserLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AbsRollupUserLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupUserLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AbsRollupUserLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupUserLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AbsRollupUserLogicSession struct {
	Contract     *AbsRollupUserLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// AbsRollupUserLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AbsRollupUserLogicCallerSession struct {
	Contract *AbsRollupUserLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// AbsRollupUserLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AbsRollupUserLogicTransactorSession struct {
	Contract     *AbsRollupUserLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// AbsRollupUserLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type AbsRollupUserLogicRaw struct {
	Contract *AbsRollupUserLogic // Generic contract binding to access the raw methods on
}

// AbsRollupUserLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AbsRollupUserLogicCallerRaw struct {
	Contract *AbsRollupUserLogicCaller // Generic read-only contract binding to access the raw methods on
}

// AbsRollupUserLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AbsRollupUserLogicTransactorRaw struct {
	Contract *AbsRollupUserLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAbsRollupUserLogic creates a new instance of AbsRollupUserLogic, bound to a specific deployed contract.
func NewAbsRollupUserLogic(address common.Address, backend bind.ContractBackend) (*AbsRollupUserLogic, error) {
	contract, err := bindAbsRollupUserLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogic{AbsRollupUserLogicCaller: AbsRollupUserLogicCaller{contract: contract}, AbsRollupUserLogicTransactor: AbsRollupUserLogicTransactor{contract: contract}, AbsRollupUserLogicFilterer: AbsRollupUserLogicFilterer{contract: contract}}, nil
}

// NewAbsRollupUserLogicCaller creates a new read-only instance of AbsRollupUserLogic, bound to a specific deployed contract.
func NewAbsRollupUserLogicCaller(address common.Address, caller bind.ContractCaller) (*AbsRollupUserLogicCaller, error) {
	contract, err := bindAbsRollupUserLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicCaller{contract: contract}, nil
}

// NewAbsRollupUserLogicTransactor creates a new write-only instance of AbsRollupUserLogic, bound to a specific deployed contract.
func NewAbsRollupUserLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*AbsRollupUserLogicTransactor, error) {
	contract, err := bindAbsRollupUserLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicTransactor{contract: contract}, nil
}

// NewAbsRollupUserLogicFilterer creates a new log filterer instance of AbsRollupUserLogic, bound to a specific deployed contract.
func NewAbsRollupUserLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*AbsRollupUserLogicFilterer, error) {
	contract, err := bindAbsRollupUserLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicFilterer{contract: contract}, nil
}

// bindAbsRollupUserLogic binds a generic wrapper to an already deployed contract.
func bindAbsRollupUserLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AbsRollupUserLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AbsRollupUserLogic *AbsRollupUserLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AbsRollupUserLogic.Contract.AbsRollupUserLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AbsRollupUserLogic *AbsRollupUserLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.AbsRollupUserLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AbsRollupUserLogic *AbsRollupUserLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.AbsRollupUserLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AbsRollupUserLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.contract.Transact(opts, method, params...)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) VALIDATORAFKBLOCKS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "VALIDATOR_AFK_BLOCKS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_AbsRollupUserLogic.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_AbsRollupUserLogic.CallOpts)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked     *big.Int
		Index            uint64
		LatestStakedNode uint64
		CurrentChallenge uint64
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.LatestStakedNode = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _AbsRollupUserLogic.Contract.StakerMap(&_AbsRollupUserLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _AbsRollupUserLogic.Contract.StakerMap(&_AbsRollupUserLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.AmountStaked(&_AbsRollupUserLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.AmountStaked(&_AbsRollupUserLogic.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) BaseStake() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.BaseStake(&_AbsRollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) BaseStake() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.BaseStake(&_AbsRollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Bridge() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Bridge(&_AbsRollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Bridge() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Bridge(&_AbsRollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ChainId() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.ChainId(&_AbsRollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ChainId() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.ChainId(&_AbsRollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ChallengeManager() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ChallengeManager(&_AbsRollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ChallengeManager(&_AbsRollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _AbsRollupUserLogic.Contract.ConfirmPeriodBlocks(&_AbsRollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _AbsRollupUserLogic.Contract.ConfirmPeriodBlocks(&_AbsRollupUserLogic.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CountStakedZombies(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CountStakedZombies(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CountZombiesStakedOnChildren(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CountZombiesStakedOnChildren(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _AbsRollupUserLogic.Contract.CurrentChallenge(&_AbsRollupUserLogic.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _AbsRollupUserLogic.Contract.CurrentChallenge(&_AbsRollupUserLogic.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CurrentRequiredStake() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CurrentRequiredStake(&_AbsRollupUserLogic.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CurrentRequiredStake(&_AbsRollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _AbsRollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_AbsRollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _AbsRollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_AbsRollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) FirstUnresolvedNode() (uint64, error) {
	return _AbsRollupUserLogic.Contract.FirstUnresolvedNode(&_AbsRollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _AbsRollupUserLogic.Contract.FirstUnresolvedNode(&_AbsRollupUserLogic.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) GetNode(nodeNum uint64) (Node, error) {
	return _AbsRollupUserLogic.Contract.GetNode(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _AbsRollupUserLogic.Contract.GetNode(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) GetNodeCreationBlockForLogLookup(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "getNodeCreationBlockForLogLookup", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.GetNodeCreationBlockForLogLookup(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.GetNodeCreationBlockForLogLookup(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _AbsRollupUserLogic.Contract.GetStaker(&_AbsRollupUserLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _AbsRollupUserLogic.Contract.GetStaker(&_AbsRollupUserLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _AbsRollupUserLogic.Contract.GetStakerAddress(&_AbsRollupUserLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _AbsRollupUserLogic.Contract.GetStakerAddress(&_AbsRollupUserLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Inbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Inbox(&_AbsRollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Inbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Inbox(&_AbsRollupUserLogic.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Initialize(stakeToken common.Address) error {
	return _AbsRollupUserLogic.Contract.Initialize(&_AbsRollupUserLogic.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Initialize(stakeToken common.Address) error {
	return _AbsRollupUserLogic.Contract.Initialize(&_AbsRollupUserLogic.CallOpts, stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) IsERC20Enabled() (bool, error) {
	return _AbsRollupUserLogic.Contract.IsERC20Enabled(&_AbsRollupUserLogic.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) IsERC20Enabled() (bool, error) {
	return _AbsRollupUserLogic.Contract.IsERC20Enabled(&_AbsRollupUserLogic.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsStaked(&_AbsRollupUserLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsStaked(&_AbsRollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) IsStakedOnLatestConfirmed(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "isStakedOnLatestConfirmed", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_AbsRollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_AbsRollupUserLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsValidator(&_AbsRollupUserLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsValidator(&_AbsRollupUserLogic.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) IsZombie(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsZombie(&_AbsRollupUserLogic.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsZombie(&_AbsRollupUserLogic.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) LastStakeBlock() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LastStakeBlock(&_AbsRollupUserLogic.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) LastStakeBlock() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LastStakeBlock(&_AbsRollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) LatestConfirmed() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestConfirmed(&_AbsRollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) LatestConfirmed() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestConfirmed(&_AbsRollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) LatestNodeCreated() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestNodeCreated(&_AbsRollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) LatestNodeCreated() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestNodeCreated(&_AbsRollupUserLogic.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestStakedNode(&_AbsRollupUserLogic.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestStakedNode(&_AbsRollupUserLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.LoserStakeEscrow(&_AbsRollupUserLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.LoserStakeEscrow(&_AbsRollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.MinimumAssertionPeriod(&_AbsRollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.MinimumAssertionPeriod(&_AbsRollupUserLogic.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.NodeHasStaker(&_AbsRollupUserLogic.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.NodeHasStaker(&_AbsRollupUserLogic.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Outbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Outbox(&_AbsRollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Outbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Outbox(&_AbsRollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Owner() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Owner(&_AbsRollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Owner() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Owner(&_AbsRollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Paused() (bool, error) {
	return _AbsRollupUserLogic.Contract.Paused(&_AbsRollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Paused() (bool, error) {
	return _AbsRollupUserLogic.Contract.Paused(&_AbsRollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ProxiableUUID() ([32]byte, error) {
	return _AbsRollupUserLogic.Contract.ProxiableUUID(&_AbsRollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _AbsRollupUserLogic.Contract.ProxiableUUID(&_AbsRollupUserLogic.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RequireUnresolved(nodeNum *big.Int) error {
	return _AbsRollupUserLogic.Contract.RequireUnresolved(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _AbsRollupUserLogic.Contract.RequireUnresolved(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RequireUnresolvedExists() error {
	return _AbsRollupUserLogic.Contract.RequireUnresolvedExists(&_AbsRollupUserLogic.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) RequireUnresolvedExists() error {
	return _AbsRollupUserLogic.Contract.RequireUnresolvedExists(&_AbsRollupUserLogic.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.RequiredStake(&_AbsRollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.RequiredStake(&_AbsRollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.RollupDeploymentBlock(&_AbsRollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.RollupDeploymentBlock(&_AbsRollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RollupEventInbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.RollupEventInbox(&_AbsRollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.RollupEventInbox(&_AbsRollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) SequencerInbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.SequencerInbox(&_AbsRollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.SequencerInbox(&_AbsRollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) StakeToken() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.StakeToken(&_AbsRollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) StakeToken() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.StakeToken(&_AbsRollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) StakerCount() (uint64, error) {
	return _AbsRollupUserLogic.Contract.StakerCount(&_AbsRollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) StakerCount() (uint64, error) {
	return _AbsRollupUserLogic.Contract.StakerCount(&_AbsRollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.TotalWithdrawableFunds(&_AbsRollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.TotalWithdrawableFunds(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ValidatorUtils() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ValidatorUtils(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ValidatorUtils() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ValidatorUtils(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ValidatorWalletCreator(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ValidatorWalletCreator(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _AbsRollupUserLogic.Contract.ValidatorWhitelistDisabled(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _AbsRollupUserLogic.Contract.ValidatorWhitelistDisabled(&_AbsRollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _AbsRollupUserLogic.Contract.WasmModuleRoot(&_AbsRollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _AbsRollupUserLogic.Contract.WasmModuleRoot(&_AbsRollupUserLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.WithdrawableFunds(&_AbsRollupUserLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.WithdrawableFunds(&_AbsRollupUserLogic.CallOpts, user)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ZombieAddress(&_AbsRollupUserLogic.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ZombieAddress(&_AbsRollupUserLogic.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ZombieCount() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.ZombieCount(&_AbsRollupUserLogic.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ZombieCount() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.ZombieCount(&_AbsRollupUserLogic.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _AbsRollupUserLogic.Contract.ZombieLatestStakedNode(&_AbsRollupUserLogic.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _AbsRollupUserLogic.Contract.ZombieLatestStakedNode(&_AbsRollupUserLogic.CallOpts, zombieNum)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) CompleteChallenge(opts *bind.TransactOpts, challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "completeChallenge", challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.CompleteChallenge(&_AbsRollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.CompleteChallenge(&_AbsRollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ConfirmNextNode(&_AbsRollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ConfirmNextNode(&_AbsRollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.CreateChallenge(&_AbsRollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.CreateChallenge(&_AbsRollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ReduceDeposit(&_AbsRollupUserLogic.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ReduceDeposit(&_AbsRollupUserLogic.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RejectNextNode(&_AbsRollupUserLogic.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RejectNextNode(&_AbsRollupUserLogic.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveOldZombies(&_AbsRollupUserLogic.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveOldZombies(&_AbsRollupUserLogic.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveWhitelistAfterFork(&_AbsRollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveWhitelistAfterFork(&_AbsRollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_AbsRollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_AbsRollupUserLogic.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveZombie(&_AbsRollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveZombie(&_AbsRollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ReturnOldDeposit(&_AbsRollupUserLogic.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ReturnOldDeposit(&_AbsRollupUserLogic.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.StakeOnExistingNode(&_AbsRollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.StakeOnExistingNode(&_AbsRollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) StakeOnNewNode(opts *bind.TransactOpts, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.StakeOnNewNode(&_AbsRollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.StakeOnNewNode(&_AbsRollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.WithdrawStakerFunds(&_AbsRollupUserLogic.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.WithdrawStakerFunds(&_AbsRollupUserLogic.TransactOpts)
}

// AbsRollupUserLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicAdminChangedIterator struct {
	Event *AbsRollupUserLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicAdminChanged represents a AdminChanged event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*AbsRollupUserLogicAdminChangedIterator, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicAdminChangedIterator{contract: _AbsRollupUserLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicAdminChanged)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseAdminChanged(log types.Log) (*AbsRollupUserLogicAdminChanged, error) {
	event := new(AbsRollupUserLogicAdminChanged)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicBeaconUpgradedIterator struct {
	Event *AbsRollupUserLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicBeaconUpgraded represents a BeaconUpgraded event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*AbsRollupUserLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicBeaconUpgradedIterator{contract: _AbsRollupUserLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicBeaconUpgraded)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseBeaconUpgraded(log types.Log) (*AbsRollupUserLogicBeaconUpgraded, error) {
	event := new(AbsRollupUserLogicBeaconUpgraded)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeConfirmedIterator struct {
	Event *AbsRollupUserLogicNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicNodeConfirmed represents a NodeConfirmed event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*AbsRollupUserLogicNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicNodeConfirmedIterator{contract: _AbsRollupUserLogic.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicNodeConfirmed)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseNodeConfirmed(log types.Log) (*AbsRollupUserLogicNodeConfirmed, error) {
	event := new(AbsRollupUserLogicNodeConfirmed)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeCreatedIterator struct {
	Event *AbsRollupUserLogicNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicNodeCreated represents a NodeCreated event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          Assertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*AbsRollupUserLogicNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicNodeCreatedIterator{contract: _AbsRollupUserLogic.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicNodeCreated)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseNodeCreated(log types.Log) (*AbsRollupUserLogicNodeCreated, error) {
	event := new(AbsRollupUserLogicNodeCreated)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeRejectedIterator struct {
	Event *AbsRollupUserLogicNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicNodeRejected represents a NodeRejected event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*AbsRollupUserLogicNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicNodeRejectedIterator{contract: _AbsRollupUserLogic.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicNodeRejected)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseNodeRejected(log types.Log) (*AbsRollupUserLogicNodeRejected, error) {
	event := new(AbsRollupUserLogicNodeRejected)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicPausedIterator struct {
	Event *AbsRollupUserLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicPaused represents a Paused event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*AbsRollupUserLogicPausedIterator, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicPausedIterator{contract: _AbsRollupUserLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicPaused) (event.Subscription, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicPaused)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParsePaused(log types.Log) (*AbsRollupUserLogicPaused, error) {
	event := new(AbsRollupUserLogicPaused)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicRollupChallengeStartedIterator struct {
	Event *AbsRollupUserLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*AbsRollupUserLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicRollupChallengeStartedIterator{contract: _AbsRollupUserLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicRollupChallengeStarted)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*AbsRollupUserLogicRollupChallengeStarted, error) {
	event := new(AbsRollupUserLogicRollupChallengeStarted)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicRollupInitializedIterator struct {
	Event *AbsRollupUserLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicRollupInitialized represents a RollupInitialized event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*AbsRollupUserLogicRollupInitializedIterator, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicRollupInitializedIterator{contract: _AbsRollupUserLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicRollupInitialized)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseRollupInitialized(log types.Log) (*AbsRollupUserLogicRollupInitialized, error) {
	event := new(AbsRollupUserLogicRollupInitialized)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUnpausedIterator struct {
	Event *AbsRollupUserLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicUnpaused represents a Unpaused event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*AbsRollupUserLogicUnpausedIterator, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicUnpausedIterator{contract: _AbsRollupUserLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicUnpaused)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseUnpaused(log types.Log) (*AbsRollupUserLogicUnpaused, error) {
	event := new(AbsRollupUserLogicUnpaused)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUpgradedIterator struct {
	Event *AbsRollupUserLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicUpgraded represents a Upgraded event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*AbsRollupUserLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicUpgradedIterator{contract: _AbsRollupUserLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicUpgraded)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseUpgraded(log types.Log) (*AbsRollupUserLogicUpgraded, error) {
	event := new(AbsRollupUserLogicUpgraded)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUpgradedSecondaryIterator struct {
	Event *AbsRollupUserLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicUpgradedSecondary represents a UpgradedSecondary event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*AbsRollupUserLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicUpgradedSecondaryIterator{contract: _AbsRollupUserLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicUpgradedSecondary)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseUpgradedSecondary(log types.Log) (*AbsRollupUserLogicUpgradedSecondary, error) {
	event := new(AbsRollupUserLogicUpgradedSecondary)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUserStakeUpdatedIterator struct {
	Event *AbsRollupUserLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicUserStakeUpdated represents a UserStakeUpdated event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*AbsRollupUserLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicUserStakeUpdatedIterator{contract: _AbsRollupUserLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicUserStakeUpdated)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseUserStakeUpdated(log types.Log) (*AbsRollupUserLogicUserStakeUpdated, error) {
	event := new(AbsRollupUserLogicUserStakeUpdated)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *AbsRollupUserLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator{contract: _AbsRollupUserLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicUserWithdrawableFundsUpdated)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*AbsRollupUserLogicUserWithdrawableFundsUpdated, error) {
	event := new(AbsRollupUserLogicUserWithdrawableFundsUpdated)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorMetaData contains all meta data concerning the BridgeCreator contract.
var BridgeCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeContracts\",\"name\":\"_ethBasedTemplates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeContracts\",\"name\":\"_erc20BasedTemplates\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ERC20TemplatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"delayBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"futureBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"delaySeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"futureSeconds\",\"type\":\"uint64\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"maxTimeVariation\",\"type\":\"tuple\"}],\"name\":\"createBridge\",\"outputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeContracts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20BasedTemplates\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBasedTemplates\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeContracts\",\"name\":\"_newTemplates\",\"type\":\"tuple\"}],\"name\":\"updateERC20Templates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeContracts\",\"name\":\"_newTemplates\",\"type\":\"tuple\"}],\"name\":\"updateTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// BridgeCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeCreatorMetaData.ABI instead.
var BridgeCreatorABI = BridgeCreatorMetaData.ABI

// BridgeCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeCreatorMetaData.Bin instead.
var BridgeCreatorBin = BridgeCreatorMetaData.Bin

// DeployBridgeCreator deploys a new Ethereum contract, binding an instance of BridgeCreator to it.
func DeployBridgeCreator(auth *bind.TransactOpts, backend bind.ContractBackend, _ethBasedTemplates BridgeCreatorBridgeContracts, _erc20BasedTemplates BridgeCreatorBridgeContracts) (common.Address, *types.Transaction, *BridgeCreator, error) {
	parsed, err := BridgeCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeCreatorBin), backend, _ethBasedTemplates, _erc20BasedTemplates)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// BridgeCreator is an auto generated Go binding around an Ethereum contract.
type BridgeCreator struct {
	BridgeCreatorCaller     // Read-only binding to the contract
	BridgeCreatorTransactor // Write-only binding to the contract
	BridgeCreatorFilterer   // Log filterer for contract events
}

// BridgeCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeCreatorSession struct {
	Contract     *BridgeCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCreatorCallerSession struct {
	Contract *BridgeCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// BridgeCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeCreatorTransactorSession struct {
	Contract     *BridgeCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BridgeCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeCreatorRaw struct {
	Contract *BridgeCreator // Generic contract binding to access the raw methods on
}

// BridgeCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCreatorCallerRaw struct {
	Contract *BridgeCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactorRaw struct {
	Contract *BridgeCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeCreator creates a new instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreator(address common.Address, backend bind.ContractBackend) (*BridgeCreator, error) {
	contract, err := bindBridgeCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// NewBridgeCreatorCaller creates a new read-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorCaller(address common.Address, caller bind.ContractCaller) (*BridgeCreatorCaller, error) {
	contract, err := bindBridgeCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorCaller{contract: contract}, nil
}

// NewBridgeCreatorTransactor creates a new write-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeCreatorTransactor, error) {
	contract, err := bindBridgeCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTransactor{contract: contract}, nil
}

// NewBridgeCreatorFilterer creates a new log filterer instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeCreatorFilterer, error) {
	contract, err := bindBridgeCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorFilterer{contract: contract}, nil
}

// bindBridgeCreator binds a generic wrapper to an already deployed contract.
func bindBridgeCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.BridgeCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transact(opts, method, params...)
}

// Erc20BasedTemplates is a free data retrieval call binding the contract method 0x76768ab9.
//
// Solidity: function erc20BasedTemplates() view returns(address bridge, address sequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCaller) Erc20BasedTemplates(opts *bind.CallOpts) (struct {
	Bridge           common.Address
	SequencerInbox   common.Address
	Inbox            common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
}, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "erc20BasedTemplates")

	outstruct := new(struct {
		Bridge           common.Address
		SequencerInbox   common.Address
		Inbox            common.Address
		RollupEventInbox common.Address
		Outbox           common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Bridge = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.SequencerInbox = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Inbox = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.RollupEventInbox = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.Outbox = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Erc20BasedTemplates is a free data retrieval call binding the contract method 0x76768ab9.
//
// Solidity: function erc20BasedTemplates() view returns(address bridge, address sequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorSession) Erc20BasedTemplates() (struct {
	Bridge           common.Address
	SequencerInbox   common.Address
	Inbox            common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
}, error) {
	return _BridgeCreator.Contract.Erc20BasedTemplates(&_BridgeCreator.CallOpts)
}

// Erc20BasedTemplates is a free data retrieval call binding the contract method 0x76768ab9.
//
// Solidity: function erc20BasedTemplates() view returns(address bridge, address sequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCallerSession) Erc20BasedTemplates() (struct {
	Bridge           common.Address
	SequencerInbox   common.Address
	Inbox            common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
}, error) {
	return _BridgeCreator.Contract.Erc20BasedTemplates(&_BridgeCreator.CallOpts)
}

// EthBasedTemplates is a free data retrieval call binding the contract method 0x11f02227.
//
// Solidity: function ethBasedTemplates() view returns(address bridge, address sequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCaller) EthBasedTemplates(opts *bind.CallOpts) (struct {
	Bridge           common.Address
	SequencerInbox   common.Address
	Inbox            common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
}, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "ethBasedTemplates")

	outstruct := new(struct {
		Bridge           common.Address
		SequencerInbox   common.Address
		Inbox            common.Address
		RollupEventInbox common.Address
		Outbox           common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Bridge = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.SequencerInbox = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Inbox = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.RollupEventInbox = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.Outbox = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// EthBasedTemplates is a free data retrieval call binding the contract method 0x11f02227.
//
// Solidity: function ethBasedTemplates() view returns(address bridge, address sequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorSession) EthBasedTemplates() (struct {
	Bridge           common.Address
	SequencerInbox   common.Address
	Inbox            common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
}, error) {
	return _BridgeCreator.Contract.EthBasedTemplates(&_BridgeCreator.CallOpts)
}

// EthBasedTemplates is a free data retrieval call binding the contract method 0x11f02227.
//
// Solidity: function ethBasedTemplates() view returns(address bridge, address sequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCallerSession) EthBasedTemplates() (struct {
	Bridge           common.Address
	SequencerInbox   common.Address
	Inbox            common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
}, error) {
	return _BridgeCreator.Contract.EthBasedTemplates(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x871be055.
//
// Solidity: function createBridge(address adminProxy, address rollup, address nativeToken, (uint64,uint64,uint64,uint64) maxTimeVariation) returns((address,address,address,address,address))
func (_BridgeCreator *BridgeCreatorTransactor) CreateBridge(opts *bind.TransactOpts, adminProxy common.Address, rollup common.Address, nativeToken common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "createBridge", adminProxy, rollup, nativeToken, maxTimeVariation)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x871be055.
//
// Solidity: function createBridge(address adminProxy, address rollup, address nativeToken, (uint64,uint64,uint64,uint64) maxTimeVariation) returns((address,address,address,address,address))
func (_BridgeCreator *BridgeCreatorSession) CreateBridge(adminProxy common.Address, rollup common.Address, nativeToken common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, nativeToken, maxTimeVariation)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x871be055.
//
// Solidity: function createBridge(address adminProxy, address rollup, address nativeToken, (uint64,uint64,uint64,uint64) maxTimeVariation) returns((address,address,address,address,address))
func (_BridgeCreator *BridgeCreatorTransactorSession) CreateBridge(adminProxy common.Address, rollup common.Address, nativeToken common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, nativeToken, maxTimeVariation)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// UpdateERC20Templates is a paid mutator transaction binding the contract method 0x1bb7c6cc.
//
// Solidity: function updateERC20Templates((address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactor) UpdateERC20Templates(opts *bind.TransactOpts, _newTemplates BridgeCreatorBridgeContracts) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "updateERC20Templates", _newTemplates)
}

// UpdateERC20Templates is a paid mutator transaction binding the contract method 0x1bb7c6cc.
//
// Solidity: function updateERC20Templates((address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorSession) UpdateERC20Templates(_newTemplates BridgeCreatorBridgeContracts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateERC20Templates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// UpdateERC20Templates is a paid mutator transaction binding the contract method 0x1bb7c6cc.
//
// Solidity: function updateERC20Templates((address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) UpdateERC20Templates(_newTemplates BridgeCreatorBridgeContracts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateERC20Templates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0xd94d6e0a.
//
// Solidity: function updateTemplates((address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactor) UpdateTemplates(opts *bind.TransactOpts, _newTemplates BridgeCreatorBridgeContracts) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "updateTemplates", _newTemplates)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0xd94d6e0a.
//
// Solidity: function updateTemplates((address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorSession) UpdateTemplates(_newTemplates BridgeCreatorBridgeContracts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0xd94d6e0a.
//
// Solidity: function updateTemplates((address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) UpdateTemplates(_newTemplates BridgeCreatorBridgeContracts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// BridgeCreatorERC20TemplatesUpdatedIterator is returned from FilterERC20TemplatesUpdated and is used to iterate over the raw logs and unpacked data for ERC20TemplatesUpdated events raised by the BridgeCreator contract.
type BridgeCreatorERC20TemplatesUpdatedIterator struct {
	Event *BridgeCreatorERC20TemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorERC20TemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorERC20TemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorERC20TemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorERC20TemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorERC20TemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorERC20TemplatesUpdated represents a ERC20TemplatesUpdated event raised by the BridgeCreator contract.
type BridgeCreatorERC20TemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterERC20TemplatesUpdated is a free log retrieval operation binding the contract event 0xa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e.
//
// Solidity: event ERC20TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) FilterERC20TemplatesUpdated(opts *bind.FilterOpts) (*BridgeCreatorERC20TemplatesUpdatedIterator, error) {

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "ERC20TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorERC20TemplatesUpdatedIterator{contract: _BridgeCreator.contract, event: "ERC20TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchERC20TemplatesUpdated is a free log subscription operation binding the contract event 0xa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e.
//
// Solidity: event ERC20TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) WatchERC20TemplatesUpdated(opts *bind.WatchOpts, sink chan<- *BridgeCreatorERC20TemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "ERC20TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorERC20TemplatesUpdated)
				if err := _BridgeCreator.contract.UnpackLog(event, "ERC20TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20TemplatesUpdated is a log parse operation binding the contract event 0xa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e.
//
// Solidity: event ERC20TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) ParseERC20TemplatesUpdated(log types.Log) (*BridgeCreatorERC20TemplatesUpdated, error) {
	event := new(BridgeCreatorERC20TemplatesUpdated)
	if err := _BridgeCreator.contract.UnpackLog(event, "ERC20TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferredIterator struct {
	Event *BridgeCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorOwnershipTransferredIterator{contract: _BridgeCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorOwnershipTransferred)
				if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeCreatorOwnershipTransferred, error) {
	event := new(BridgeCreatorOwnershipTransferred)
	if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdatedIterator struct {
	Event *BridgeCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*BridgeCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTemplatesUpdatedIterator{contract: _BridgeCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *BridgeCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorTemplatesUpdated)
				if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*BridgeCreatorTemplatesUpdated, error) {
	event := new(BridgeCreatorTemplatesUpdated)
	if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeployHelperMetaData contains all meta data concerning the DeployHelper contract.
var DeployHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ERC1820_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1820_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1820_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC2470_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC2470_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC2470_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NICK_CREATE2_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NICK_CREATE2_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NICK_CREATE2_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOLTU_CREATE2_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOLTU_CREATE2_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOLTU_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"getDeploymentTotalCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061163a806100206000396000f3fe6080604052600436106100bd5760003560e01c80639ed2c6f01161006f5780639ed2c6f0146101bd578063acd7d02a146101d8578063d3a3faab146101f8578063d7c641e714610220578063db633c3e14610235578063dd0c625a14610142578063ef77e71a1461025157600080fd5b80631b9a680c146100c2578063290302ce146100ed5780632e7966411461012d5780634367d6521461014257806355e34a6b1461016b57806375ae22b51461019357806389cf8ae6146101a8575b600080fd5b3480156100ce57600080fd5b506100d7610279565b6040516100e491906107ef565b60405180910390f35b3480156100f957600080fd5b5061011573a990077c3205cbdf861e17fa532eeb069ce9ff9681565b6040516001600160a01b0390911681526020016100e4565b34801561013957600080fd5b506100d7610295565b34801561014e57600080fd5b5061015d662386f26fc1000081565b6040519081526020016100e4565b34801561017757600080fd5b5061011573bb6e024b9cffacb947a71991e386681b1cd1477d81565b34801561019f57600080fd5b506100d76102b4565b3480156101b457600080fd5b506100d76102d0565b3480156101c957600080fd5b5061015d6657c084e5f3c00081565b3480156101e457600080fd5b5061015d6101f336600461085c565b6102ef565b34801561020457600080fd5b50610115734c8d290a1b368ac4728d83a9e8321fc3af2b39b181565b61023361022e366004610888565b6103dd565b005b34801561024157600080fd5b5061015d67011c37937e08000081565b34801561025d57600080fd5b50610115733fab184622dc19b6109349b94811493bf2a4536281565b6040518060e0016040528060a8815260200161155d60a8913981565b60405180610a600160405280610a3c8152602001610930610a3c913981565b6040518060c001604052806081815260200161136c6081913981565b604051806101a0016040528061017081526020016113ed610170913981565b60405163a66b327d60e01b81526000600482018190524860248301529081906001600160a01b0385169063a66b327d9060440160206040518083038186803b15801561033a57600080fd5b505afa15801561034e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037291906108c9565b9050610380836152086108f8565b61038a9082610917565b6103959060046108f8565b67011c37937e080000662386f26fc100006103b76657c084e5f3c00082610917565b6103c19190610917565b6103cb9190610917565b6103d59190610917565b949350505050565b6000806001600160a01b0316836001600160a01b03161415905061043884662386f26fc10000733fab184622dc19b6109349b94811493bf2a453626040518060e0016040528060a8815260200161155d60a89139858761053b565b61047c846657c084e5f3c00073bb6e024b9cffacb947a71991e386681b1cd1477d604051806101a0016040528061017081526020016113ed6101709139858761053b565b6104bd84662386f26fc10000734c8d290a1b368ac4728d83a9e8321fc3af2b39b16040518060c001604052806081815260200161136c60819139858761053b565b6105028467011c37937e08000073a990077c3205cbdf861e17fa532eeb069ce9ff9660405180610a600160405280610a3c8152602001610930610a3c9139858761053b565b806105355760405133904780156108fc02916000818181858888f19350505050158015610533573d6000803e3d6000fd5b505b50505050565b60405163a66b327d60e01b8152600060048201819052486024830152906001600160a01b0388169063a66b327d9060440160206040518083038186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc91906108c9565b905060006105cc836152086108f8565b6105d68389610917565b6105e09190610917565b905083156106ac57604051632a4f421360e11b81526001600160a01b03878116600483015260248201899052604482018490523360648301819052608483015261520860a483015260c4820185905260e48201839052610120610104830152600061012483015289169063549e84269061014401602060405180830381600087803b15801561066e57600080fd5b505af1158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a691906108c9565b50610766565b60405163679b6ded60e01b81526001600160a01b03878116600483015260248201899052604482018490523360648301819052608483015261520860a483015260c4820185905261010060e4830152600061010483015289169063679b6ded908390610124016020604051808303818588803b15801561072b57600080fd5b505af115801561073f573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061076491906108c9565b505b60405163b75436bb60e01b81526001600160a01b0389169063b75436bb906107929088906004016107ef565b602060405180830381600087803b1580156107ac57600080fd5b505af11580156107c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e491906108c9565b505050505050505050565b600060208083528351808285015260005b8181101561081c57858101830151858201604001528201610800565b8181111561082e576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461085957600080fd5b50565b6000806040838503121561086f57600080fd5b823561087a81610844565b946020939093013593505050565b60008060006060848603121561089d57600080fd5b83356108a881610844565b925060208401356108b881610844565b929592945050506040919091013590565b6000602082840312156108db57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610912576109126108e2565b500290565b6000821982111561092a5761092a6108e2565b50019056fe04f90a388085174876e800830c35008080b909e5608060405234801561001057600080fd5b506109c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063a41e7d5111610078578063a41e7d51146101d4578063aabbb8ca1461020a578063b705676514610236578063f712f3e814610280576100a5565b806329965a1d146100aa5780633d584063146100e25780635df8122f1461012457806365ba36c114610152575b600080fd5b6100e0600480360360608110156100c057600080fd5b50600160a060020a038135811691602081013591604090910135166102b6565b005b610108600480360360208110156100f857600080fd5b5035600160a060020a0316610570565b60408051600160a060020a039092168252519081900360200190f35b6100e06004803603604081101561013a57600080fd5b50600160a060020a03813581169160200135166105bc565b6101c26004803603602081101561016857600080fd5b81019060208101813564010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460018302840111640100000000831117156101b757600080fd5b5090925090506106b3565b60408051918252519081900360200190f35b6100e0600480360360408110156101ea57600080fd5b508035600160a060020a03169060200135600160e060020a0319166106ee565b6101086004803603604081101561022057600080fd5b50600160a060020a038135169060200135610778565b61026c6004803603604081101561024c57600080fd5b508035600160a060020a03169060200135600160e060020a0319166107ef565b604080519115158252519081900360200190f35b61026c6004803603604081101561029657600080fd5b508035600160a060020a03169060200135600160e060020a0319166108aa565b6000600160a060020a038416156102cd57836102cf565b335b9050336102db82610570565b600160a060020a031614610339576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b6103428361092a565b15610397576040805160e560020a62461bcd02815260206004820152601a60248201527f4d757374206e6f7420626520616e204552433136352068617368000000000000604482015290519081900360640190fd5b600160a060020a038216158015906103b85750600160a060020a0382163314155b156104ff5760405160200180807f455243313832305f4143434550545f4d4147494300000000000000000000000081525060140190506040516020818303038152906040528051906020012082600160a060020a031663249cb3fa85846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d60208110156104a857600080fd5b5051146104ff576040805160e560020a62461bcd02815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b600160a060020a03818116600081815260208181526040808320888452909152808220805473ffffffffffffffffffffffffffffffffffffffff19169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b600160a060020a03818116600090815260016020526040812054909116151561059a5750806105b7565b50600160a060020a03808216600090815260016020526040902054165b919050565b336105c683610570565b600160a060020a031614610624576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031681600160a060020a0316146106435780610646565b60005b600160a060020a03838116600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b600082826040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090505b92915050565b6106f882826107ef565b610703576000610705565b815b600160a060020a03928316600081815260208181526040808320600160e060020a031996909616808452958252808320805473ffffffffffffffffffffffffffffffffffffffff19169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b600080600160a060020a038416156107905783610792565b335b905061079d8361092a565b156107c357826107ad82826108aa565b6107b85760006107ba565b815b925050506106e8565b600160a060020a0390811660009081526020818152604080832086845290915290205416905092915050565b6000808061081d857f01ffc9a70000000000000000000000000000000000000000000000000000000061094c565b909250905081158061082d575080155b1561083d576000925050506106e8565b61084f85600160e060020a031961094c565b909250905081158061086057508015155b15610870576000925050506106e8565b61087a858561094c565b909250905060018214801561088f5750806001145b1561089f576001925050506106e8565b506000949350505050565b600160a060020a0382166000908152600260209081526040808320600160e060020a03198516845290915281205460ff1615156108f2576108eb83836107ef565b90506106e8565b50600160a060020a03808316600081815260208181526040808320600160e060020a0319871684529091529020549091161492915050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000008082526004820183905260009182919060208160248189617530fa90519096909550935050505056fea165627a7a72305820377f4a2d4301ede9949f163f319021a6e9c687c292a5e2b2c4734c126b524e6c00291ba01820182018201820182018201820182018201820182018201820182018201820a0182018201820182018201820182018201820182018201820182018201820182004f87e8085174876e800830186a08080ad601f80600e600039806000f350fe60003681823780368234f58015156014578182fd5b80825250506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a0222222222222222222222222222222222222222222222222222222222222222204f9016c8085174876e8008303c4d88080b90154608060405234801561001057600080fd5b50610134806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80634af63f0214602d575b600080fd5b60cf60048036036040811015604157600080fd5b810190602081018135640100000000811115605b57600080fd5b820183602082011115606c57600080fd5b80359060200191846001830284011164010000000083111715608d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550509135925060eb915050565b604080516001600160a01b039092168252519081900360200190f35b6000818351602085016000f5939250505056fea26469706673582212206b44f8a82cb6b156bfcc3dc6aadd6df4eefd204bc928a4397fd15dacf6d5320564736f6c634300060200331b8324700082247004f8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222a26469706673582212200da59a35ba218d0817310b2dafc09c59d575bc3a007b01314ffc5f04f88c34ec64736f6c63430008090033",
}

// DeployHelperABI is the input ABI used to generate the binding from.
// Deprecated: Use DeployHelperMetaData.ABI instead.
var DeployHelperABI = DeployHelperMetaData.ABI

// DeployHelperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DeployHelperMetaData.Bin instead.
var DeployHelperBin = DeployHelperMetaData.Bin

// DeployDeployHelper deploys a new Ethereum contract, binding an instance of DeployHelper to it.
func DeployDeployHelper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DeployHelper, error) {
	parsed, err := DeployHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DeployHelperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DeployHelper{DeployHelperCaller: DeployHelperCaller{contract: contract}, DeployHelperTransactor: DeployHelperTransactor{contract: contract}, DeployHelperFilterer: DeployHelperFilterer{contract: contract}}, nil
}

// DeployHelper is an auto generated Go binding around an Ethereum contract.
type DeployHelper struct {
	DeployHelperCaller     // Read-only binding to the contract
	DeployHelperTransactor // Write-only binding to the contract
	DeployHelperFilterer   // Log filterer for contract events
}

// DeployHelperCaller is an auto generated read-only Go binding around an Ethereum contract.
type DeployHelperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeployHelperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DeployHelperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeployHelperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DeployHelperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeployHelperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DeployHelperSession struct {
	Contract     *DeployHelper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DeployHelperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DeployHelperCallerSession struct {
	Contract *DeployHelperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// DeployHelperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DeployHelperTransactorSession struct {
	Contract     *DeployHelperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// DeployHelperRaw is an auto generated low-level Go binding around an Ethereum contract.
type DeployHelperRaw struct {
	Contract *DeployHelper // Generic contract binding to access the raw methods on
}

// DeployHelperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DeployHelperCallerRaw struct {
	Contract *DeployHelperCaller // Generic read-only contract binding to access the raw methods on
}

// DeployHelperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DeployHelperTransactorRaw struct {
	Contract *DeployHelperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeployHelper creates a new instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelper(address common.Address, backend bind.ContractBackend) (*DeployHelper, error) {
	contract, err := bindDeployHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DeployHelper{DeployHelperCaller: DeployHelperCaller{contract: contract}, DeployHelperTransactor: DeployHelperTransactor{contract: contract}, DeployHelperFilterer: DeployHelperFilterer{contract: contract}}, nil
}

// NewDeployHelperCaller creates a new read-only instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelperCaller(address common.Address, caller bind.ContractCaller) (*DeployHelperCaller, error) {
	contract, err := bindDeployHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DeployHelperCaller{contract: contract}, nil
}

// NewDeployHelperTransactor creates a new write-only instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*DeployHelperTransactor, error) {
	contract, err := bindDeployHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DeployHelperTransactor{contract: contract}, nil
}

// NewDeployHelperFilterer creates a new log filterer instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*DeployHelperFilterer, error) {
	contract, err := bindDeployHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DeployHelperFilterer{contract: contract}, nil
}

// bindDeployHelper binds a generic wrapper to an already deployed contract.
func bindDeployHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DeployHelperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeployHelper *DeployHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeployHelper.Contract.DeployHelperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeployHelper *DeployHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeployHelper.Contract.DeployHelperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeployHelper *DeployHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeployHelper.Contract.DeployHelperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeployHelper *DeployHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeployHelper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeployHelper *DeployHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeployHelper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeployHelper *DeployHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeployHelper.Contract.contract.Transact(opts, method, params...)
}

// ERC1820DEPLOYER is a free data retrieval call binding the contract method 0x290302ce.
//
// Solidity: function ERC1820_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) ERC1820DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC1820_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ERC1820DEPLOYER is a free data retrieval call binding the contract method 0x290302ce.
//
// Solidity: function ERC1820_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) ERC1820DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC1820DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC1820DEPLOYER is a free data retrieval call binding the contract method 0x290302ce.
//
// Solidity: function ERC1820_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) ERC1820DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC1820DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC1820PAYLOAD is a free data retrieval call binding the contract method 0x2e796641.
//
// Solidity: function ERC1820_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) ERC1820PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC1820_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ERC1820PAYLOAD is a free data retrieval call binding the contract method 0x2e796641.
//
// Solidity: function ERC1820_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) ERC1820PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC1820PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC1820PAYLOAD is a free data retrieval call binding the contract method 0x2e796641.
//
// Solidity: function ERC1820_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) ERC1820PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC1820PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC1820VALUE is a free data retrieval call binding the contract method 0xdb633c3e.
//
// Solidity: function ERC1820_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) ERC1820VALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC1820_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ERC1820VALUE is a free data retrieval call binding the contract method 0xdb633c3e.
//
// Solidity: function ERC1820_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) ERC1820VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC1820VALUE(&_DeployHelper.CallOpts)
}

// ERC1820VALUE is a free data retrieval call binding the contract method 0xdb633c3e.
//
// Solidity: function ERC1820_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) ERC1820VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC1820VALUE(&_DeployHelper.CallOpts)
}

// ERC2470DEPLOYER is a free data retrieval call binding the contract method 0x55e34a6b.
//
// Solidity: function ERC2470_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) ERC2470DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC2470_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ERC2470DEPLOYER is a free data retrieval call binding the contract method 0x55e34a6b.
//
// Solidity: function ERC2470_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) ERC2470DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC2470DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC2470DEPLOYER is a free data retrieval call binding the contract method 0x55e34a6b.
//
// Solidity: function ERC2470_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) ERC2470DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC2470DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC2470PAYLOAD is a free data retrieval call binding the contract method 0x89cf8ae6.
//
// Solidity: function ERC2470_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) ERC2470PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC2470_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ERC2470PAYLOAD is a free data retrieval call binding the contract method 0x89cf8ae6.
//
// Solidity: function ERC2470_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) ERC2470PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC2470PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC2470PAYLOAD is a free data retrieval call binding the contract method 0x89cf8ae6.
//
// Solidity: function ERC2470_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) ERC2470PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC2470PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC2470VALUE is a free data retrieval call binding the contract method 0x9ed2c6f0.
//
// Solidity: function ERC2470_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) ERC2470VALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC2470_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ERC2470VALUE is a free data retrieval call binding the contract method 0x9ed2c6f0.
//
// Solidity: function ERC2470_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) ERC2470VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC2470VALUE(&_DeployHelper.CallOpts)
}

// ERC2470VALUE is a free data retrieval call binding the contract method 0x9ed2c6f0.
//
// Solidity: function ERC2470_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) ERC2470VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC2470VALUE(&_DeployHelper.CallOpts)
}

// NICKCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xef77e71a.
//
// Solidity: function NICK_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) NICKCREATE2DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "NICK_CREATE2_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NICKCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xef77e71a.
//
// Solidity: function NICK_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) NICKCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.NICKCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// NICKCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xef77e71a.
//
// Solidity: function NICK_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) NICKCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.NICKCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// NICKCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x1b9a680c.
//
// Solidity: function NICK_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) NICKCREATE2PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "NICK_CREATE2_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// NICKCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x1b9a680c.
//
// Solidity: function NICK_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) NICKCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.NICKCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// NICKCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x1b9a680c.
//
// Solidity: function NICK_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) NICKCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.NICKCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// NICKCREATE2VALUE is a free data retrieval call binding the contract method 0x4367d652.
//
// Solidity: function NICK_CREATE2_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) NICKCREATE2VALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "NICK_CREATE2_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NICKCREATE2VALUE is a free data retrieval call binding the contract method 0x4367d652.
//
// Solidity: function NICK_CREATE2_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) NICKCREATE2VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.NICKCREATE2VALUE(&_DeployHelper.CallOpts)
}

// NICKCREATE2VALUE is a free data retrieval call binding the contract method 0x4367d652.
//
// Solidity: function NICK_CREATE2_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) NICKCREATE2VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.NICKCREATE2VALUE(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xd3a3faab.
//
// Solidity: function ZOLTU_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) ZOLTUCREATE2DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ZOLTU_CREATE2_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZOLTUCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xd3a3faab.
//
// Solidity: function ZOLTU_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) ZOLTUCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xd3a3faab.
//
// Solidity: function ZOLTU_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) ZOLTUCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x75ae22b5.
//
// Solidity: function ZOLTU_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) ZOLTUCREATE2PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ZOLTU_CREATE2_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ZOLTUCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x75ae22b5.
//
// Solidity: function ZOLTU_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) ZOLTUCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x75ae22b5.
//
// Solidity: function ZOLTU_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) ZOLTUCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// ZOLTUVALUE is a free data retrieval call binding the contract method 0xdd0c625a.
//
// Solidity: function ZOLTU_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) ZOLTUVALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ZOLTU_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZOLTUVALUE is a free data retrieval call binding the contract method 0xdd0c625a.
//
// Solidity: function ZOLTU_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) ZOLTUVALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ZOLTUVALUE(&_DeployHelper.CallOpts)
}

// ZOLTUVALUE is a free data retrieval call binding the contract method 0xdd0c625a.
//
// Solidity: function ZOLTU_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) ZOLTUVALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ZOLTUVALUE(&_DeployHelper.CallOpts)
}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_DeployHelper *DeployHelperCaller) GetDeploymentTotalCost(opts *bind.CallOpts, inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "getDeploymentTotalCost", inbox, maxFeePerGas)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_DeployHelper *DeployHelperSession) GetDeploymentTotalCost(inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	return _DeployHelper.Contract.GetDeploymentTotalCost(&_DeployHelper.CallOpts, inbox, maxFeePerGas)
}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) GetDeploymentTotalCost(inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	return _DeployHelper.Contract.GetDeploymentTotalCost(&_DeployHelper.CallOpts, inbox, maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_DeployHelper *DeployHelperTransactor) Perform(opts *bind.TransactOpts, _inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _DeployHelper.contract.Transact(opts, "perform", _inbox, _nativeToken, _maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_DeployHelper *DeployHelperSession) Perform(_inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _DeployHelper.Contract.Perform(&_DeployHelper.TransactOpts, _inbox, _nativeToken, _maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_DeployHelper *DeployHelperTransactorSession) Perform(_inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _DeployHelper.Contract.Perform(&_DeployHelper.TransactOpts, _inbox, _nativeToken, _maxFeePerGas)
}

// ERC20RollupEventInboxMetaData contains all meta data concerning the ERC20RollupEventInbox contract.
var ERC20RollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollupNotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b5060805161094361003060003960006102ff01526109436000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80636ae71f121461005c578063c4d66de814610066578063cb23bcb514610079578063cf8d56d6146100a8578063e78cea92146100bb575b600080fd5b6100646100ce565b005b610064610074366004610768565b6102f4565b60015461008c906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100646100b6366004610785565b610482565b60005461008c906001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011c57600080fd5b505afa158015610130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101549190610801565b6001600160a01b0316336001600160a01b0316146102195760015460408051638da5cb5b60e01b8152905133926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156101b057600080fd5b505afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190610801565b604051631194af8760e11b81526001600160a01b039283166004820152911660248201526044015b60405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663cb23bcb56040518163ffffffff1660e01b815260040160206040518083038186803b15801561026857600080fd5b505afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610801565b6001549091506001600160a01b03808316911614156102d25760405163d054909f60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103825760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610210565b6000546001600160a01b0316156103ac57604051633bcd329760e21b815260040160405180910390fd5b6001600160a01b0381166103d357604051631ad0f74360e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040805163cb23bcb560e01b8152905163cb23bcb591600480820192602092909190829003018186803b15801561042757600080fd5b505afa15801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f9190610801565b600180546001600160a01b0319166001600160a01b039290921691909117905550565b6001546001600160a01b031633146104ca5760405162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b6044820152606401610210565b8061050c5760405162461bcd60e51b8152602060048201526012602482015271454d5054595f434841494e5f434f4e46494760701b6044820152606401610210565b600148610517610615565b1561059b57606c6001600160a01b031663f5d6ded76040518163ffffffff1660e01b815260040160206040518083038186803b15801561055657600080fd5b505afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e919061081e565b6105989082610837565b90505b600085838387876040516020016105b695949392919061085d565b604051602081830303815290604052905060006105d2826106ad565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b8360405161060491906108be565b60405180910390a250505050505050565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b17905290516000918291829160649161065391906108f1565b600060405180830381855afa9150503d806000811461068e576040519150601f19603f3d011682016040523d82523d6000602084013e610693565b606091505b50915091508180156106a6575080516020145b9250505090565b60008054825160208401206040516375d81e2560e01b8152600b60048201526024810184905260448101919091526064810183905282916001600160a01b0316906375d81e2590608401602060405180830381600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610749919061081e565b9392505050565b6001600160a01b038116811461076557600080fd5b50565b60006020828403121561077a57600080fd5b813561074981610750565b60008060006040848603121561079a57600080fd5b83359250602084013567ffffffffffffffff808211156107b957600080fd5b818601915086601f8301126107cd57600080fd5b8135818111156107dc57600080fd5b8760208285010111156107ee57600080fd5b6020830194508093505050509250925092565b60006020828403121561081357600080fd5b815161074981610750565b60006020828403121561083057600080fd5b5051919050565b6000821982111561085857634e487b7160e01b600052601160045260246000fd5b500190565b85815260ff60f81b8560f81b1660208201528360218201528183604183013760009101604101908152949350505050565b60005b838110156108a9578181015183820152602001610891565b838111156108b8576000848401525b50505050565b60208152600082518060208401526108dd81604085016020870161088e565b601f01601f19169190910160400192915050565b6000825161090381846020870161088e565b919091019291505056fea26469706673582212200430df03793bf9bfe0c07ab82eb9c987856e6a49f016d8570b140ba6f2e3248564736f6c63430008090033",
}

// ERC20RollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20RollupEventInboxMetaData.ABI instead.
var ERC20RollupEventInboxABI = ERC20RollupEventInboxMetaData.ABI

// ERC20RollupEventInboxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20RollupEventInboxMetaData.Bin instead.
var ERC20RollupEventInboxBin = ERC20RollupEventInboxMetaData.Bin

// DeployERC20RollupEventInbox deploys a new Ethereum contract, binding an instance of ERC20RollupEventInbox to it.
func DeployERC20RollupEventInbox(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20RollupEventInbox, error) {
	parsed, err := ERC20RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20RollupEventInboxBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20RollupEventInbox{ERC20RollupEventInboxCaller: ERC20RollupEventInboxCaller{contract: contract}, ERC20RollupEventInboxTransactor: ERC20RollupEventInboxTransactor{contract: contract}, ERC20RollupEventInboxFilterer: ERC20RollupEventInboxFilterer{contract: contract}}, nil
}

// ERC20RollupEventInbox is an auto generated Go binding around an Ethereum contract.
type ERC20RollupEventInbox struct {
	ERC20RollupEventInboxCaller     // Read-only binding to the contract
	ERC20RollupEventInboxTransactor // Write-only binding to the contract
	ERC20RollupEventInboxFilterer   // Log filterer for contract events
}

// ERC20RollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20RollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20RollupEventInboxSession struct {
	Contract     *ERC20RollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ERC20RollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20RollupEventInboxCallerSession struct {
	Contract *ERC20RollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ERC20RollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20RollupEventInboxTransactorSession struct {
	Contract     *ERC20RollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ERC20RollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20RollupEventInboxRaw struct {
	Contract *ERC20RollupEventInbox // Generic contract binding to access the raw methods on
}

// ERC20RollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxCallerRaw struct {
	Contract *ERC20RollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20RollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxTransactorRaw struct {
	Contract *ERC20RollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20RollupEventInbox creates a new instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInbox(address common.Address, backend bind.ContractBackend) (*ERC20RollupEventInbox, error) {
	contract, err := bindERC20RollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInbox{ERC20RollupEventInboxCaller: ERC20RollupEventInboxCaller{contract: contract}, ERC20RollupEventInboxTransactor: ERC20RollupEventInboxTransactor{contract: contract}, ERC20RollupEventInboxFilterer: ERC20RollupEventInboxFilterer{contract: contract}}, nil
}

// NewERC20RollupEventInboxCaller creates a new read-only instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*ERC20RollupEventInboxCaller, error) {
	contract, err := bindERC20RollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxCaller{contract: contract}, nil
}

// NewERC20RollupEventInboxTransactor creates a new write-only instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20RollupEventInboxTransactor, error) {
	contract, err := bindERC20RollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxTransactor{contract: contract}, nil
}

// NewERC20RollupEventInboxFilterer creates a new log filterer instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20RollupEventInboxFilterer, error) {
	contract, err := bindERC20RollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxFilterer{contract: contract}, nil
}

// bindERC20RollupEventInbox binds a generic wrapper to an already deployed contract.
func bindERC20RollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RollupEventInbox.Contract.ERC20RollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.ERC20RollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.ERC20RollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) Bridge() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Bridge(&_ERC20RollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Bridge(&_ERC20RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) Rollup() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Rollup(&_ERC20RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Rollup(&_ERC20RollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.Initialize(&_ERC20RollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.Initialize(&_ERC20RollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.RollupInitialized(&_ERC20RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.RollupInitialized(&_ERC20RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.UpdateRollupAddress(&_ERC20RollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.UpdateRollupAddress(&_ERC20RollupEventInbox.TransactOpts)
}

// ERC20RollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDeliveredIterator struct {
	Event *ERC20RollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*ERC20RollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxInboxMessageDeliveredIterator{contract: _ERC20RollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *ERC20RollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupEventInboxInboxMessageDelivered)
				if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*ERC20RollupEventInboxInboxMessageDelivered, error) {
	event := new(ERC20RollupEventInboxInboxMessageDelivered)
	if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *ERC20RollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _ERC20RollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *ERC20RollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*ERC20RollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicMetaData contains all meta data concerning the ERC20RollupUserLogic contract.
var ERC20RollupUserLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VALIDATOR_AFK_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winningStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"losingStaker\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedBlocks\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNodeCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakedOnLatestConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"newStakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e0604052620000196200003a60201b62002c091760201c565b15156080523060a0524660c0523480156200003357600080fd5b5062000115565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b1790529051600091829182916064916200007a9190620000d7565b600060405180830381855afa9150503d8060008114620000b7576040519150601f19603f3d011682016040523d82523d6000602084013e620000bc565b606091505b5091509150818015620000d0575080516020145b9250505090565b6000825160005b81811015620000fa5760208186018101518583015201620000de565b818111156200010a576000828501525b509190910192915050565b60805160a05160c051615e1f6200015a60003960006126ef015260008181610f060152818161275e01526127e3015260008181612b510152614a660152615e1f6000f3fe608060405234801561001057600080fd5b50600436106103875760003560e01c8063771b2f97116101e0578063cd205fda11610110578063edfd03ed116100a8578063edfd03ed14610919578063ee35f3271461092c578063ef40a6701461093f578063f065de3f14610952578063f33e1fac14610965578063f3f0a03e14610978578063f63a434a1461098b578063facd743b1461099e578063fb0e722b146109c157600080fd5b8063cd205fda1461080f578063ce11e6ab14610822578063d01e660214610835578063d29a4e2714610848578063d735e21d1461085b578063dcd030aa14610863578063dff6978714610876578063e78cea921461087e578063e8bd49221461089157600080fd5b806392c8134c1161018357806392c8134c1461067d5780639a8a05921461069d578063a23c44b1146106a6578063aa38a6e7146107a8578063aa65af48146107bb578063b0ebedc7146107ce578063bc45e0ae146107e1578063c2c2e68e146107f4578063c4d66de8146107fc57600080fd5b8063771b2f97146105f9578063773d984e146106135780637ba9534a146106265780637e2d21551461062e5780638640ce5f146106415780638da5cb5b146106595780638ee1a1261461066157806391c657e81461066a57600080fd5b806354ce8961116102bb57806367425daf1161025e57806367425daf1461056d57806369fd251c146105755780636b94c33b146105885780636d08d0a21461059b5780636ddd3744146105ae5780636f57644e146105c157806371ef232c146105d45780637427be51146105dd57806376e7e23b146105f057600080fd5b806354ce8961146104f55780635c617e94146105085780635c975abb1461051b5780635eb405d51461052657806361373919146105395780636177fd181461054157806363721d6b1461055457806365f7f80d1461055c57600080fd5b80632b2af0ab1161032e5780632b2af0ab146104465780632e7acfa6146104595780632f30cabd146104845780633e96576e146104ad57806345e38b64146104c05780634ceccfe5146104c95780634d26732d146104d257806351ed6a30146104da57806352d1902d146104ed57600080fd5b8063014cc92c1461038c578063023a96fe146103bc5780630357aa49146103cf57806312ab3d3b146103e457806318baaab9146104015780631aeb55a0146104095780631b1689e91461041c5780631e83d30f14610433575b600080fd5b606f5461039f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b606e5461039f906001600160a01b031681565b6103e26103dd36600461513e565b6109d4565b005b607e546103f19060ff1681565b60405190151581526020016103b3565b6103e2610aa7565b6103e2610417366004615195565b610b21565b610425607d5481565b6040519081526020016103b3565b6103e26104413660046151c1565b610ce1565b6103e26104543660046151c1565b610df9565b60655461046c906001600160401b031681565b6040516001600160401b0390911681526020016103b3565b6104256104923660046151da565b6001600160a01b03166000908152607b602052604090205490565b61046c6104bb3660046151da565b610e9d565b61042560735481565b61042561b2fa81565b610425610ecb565b60725461039f906001600160a01b031681565b610425610ef9565b6103e2610503366004615210565b610fbe565b610425610516366004615247565b611221565b60335460ff166103f1565b6103e2610534366004615264565b611275565b610425611598565b6103f161054f3660046151da565b611758565b607a54610425565b6075546001600160401b031661046c565b6103e2611780565b61046c6105833660046151da565b61180a565b6103e26105963660046151da565b611838565b6104256105a9366004615247565b611b70565b61039f6105bc366004615247565b611bf3565b6103e26105cf366004615297565b611c2c565b610425607c5481565b6103e26105eb3660046151da565b61225e565b61042560675481565b60655461046c90600160401b90046001600160401b031681565b6103e2610621366004615337565b6123b6565b61046c6123d2565b6103e261063c366004615264565b6123e8565b607554600160c01b90046001600160401b031661046c565b61039f61254c565b61042560685481565b6103f16106783660046151da565b612556565b61069061068b366004615247565b6125ba565b6040516103b3919061536f565b61042560665481565b6107536106b43660046151da565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0316600090815260796020908152604091829020825160a081018452815481526001909101546001600160401b0380821693830193909352600160401b8104831693820193909352600160801b83049091166060820152600160c01b90910460ff161515608082015290565b6040516103b39190600060a0820190508251825260208301516001600160401b038082166020850152806040860151166040850152806060860151166060850152505060808301511515608083015292915050565b606d5461039f906001600160a01b031681565b6103f16107c936600461546b565b612672565b6104256107dc3660046154a4565b6126a9565b60705461039f906001600160a01b031681565b6103e26126c9565b6103e261080a3660046151da565b612753565b6072546001600160a01b031615156103f1565b606b5461039f906001600160a01b031681565b61039f6108433660046151c1565b612911565b6103e26108563660046154db565b612926565b61046c612943565b6103f16108713660046151da565b612959565b60785461046c565b606a5461039f906001600160a01b031681565b6108e161089f3660046151da565b607960205260009081526040902080546001909101546001600160401b0380821691600160401b8104821691600160801b82041690600160c01b900460ff1685565b604080519586526001600160401b0394851660208701529284169285019290925290911660608301521515608082015260a0016103b3565b6103e26109273660046151c1565b61299c565b606c5461039f906001600160a01b031681565b61042561094d3660046151da565b612a85565b60715461039f906001600160a01b031681565b61046c6109733660046151c1565b612aa0565b6103e261098636600461551a565b612ad7565b610425610999366004615247565b612b4d565b6103f16109ac3660046151da565b60746020526000908152604090205460ff1681565b60695461039f906001600160a01b031681565b60335460ff1615610a005760405162461bcd60e51b81526004016109f790615538565b60405180910390fd5b606e546001600160a01b03163314610a495760405162461bcd60e51b815260206004820152600c60248201526b2ba927a723afa9a2a72222a960a11b60448201526064016109f7565b610a538282612ca1565b6001600160401b03168314610a985760405162461bcd60e51b815260206004820152600b60248201526a1393d517d25397d0d2105360aa1b60448201526064016109f7565b610aa28282612d6f565b505050565b607e5460ff1615610aca5760405162461bcd60e51b81526004016109f790615562565b610ad2612e25565b610b125760405162461bcd60e51b815260206004820152601160248201527056414c494441544f525f4e4f545f41464b60781b60448201526064016109f7565b607e805460ff19166001179055565b3360009081526074602052604090205460ff1680610b415750607e5460ff165b610b5d5760405162461bcd60e51b81526004016109f79061558e565b60335460ff1615610b805760405162461bcd60e51b81526004016109f790615538565b610b8933612959565b610ba55760405162461bcd60e51b81526004016109f7906155b5565b610bad612943565b6001600160401b0316826001600160401b031610158015610be75750610bd16123d2565b6001600160401b0316826001600160401b031611155b610c2b5760405162461bcd60e51b81526020600482015260156024820152744e4f44455f4e554d5f4f55545f4f465f52414e474560581b60448201526064016109f7565b6000610c3683612f2f565b905081816005015414610c785760405162461bcd60e51b815260206004820152600a6024820152694e4f44455f52454f524760b01b60448201526064016109f7565b60038101546001600160401b0316610c8f33610e9d565b6001600160401b031614610cd75760405162461bcd60e51b815260206004820152600f60248201526e2727aa2fa9aa20a5a2a22fa82922ab60891b60448201526064016109f7565b610aa23384612f49565b3360009081526074602052604090205460ff1680610d015750607e5460ff165b610d1d5760405162461bcd60e51b81526004016109f79061558e565b60335460ff161580610db25750606a546040805163cb23bcb560e01b8152905130926001600160a01b03169163cb23bcb5916004808301926020929190829003018186803b158015610d6e57600080fd5b505afa158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da691906155d9565b6001600160a01b031614155b610dce5760405162461bcd60e51b81526004016109f7906155f6565b610dd733612f9a565b6000610de1610ecb565b905080821015610def578091505b610aa2338361300a565b610e01612943565b6001600160401b0316811015610e4b5760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d11150d2511151608a1b60448201526064016109f7565b610e536123d2565b6001600160401b0316811115610e9a5760405162461bcd60e51b815260206004820152600c60248201526b1113d154d39517d1561254d560a21b60448201526064016109f7565b50565b6001600160a01b0316600090815260796020526040902060010154600160401b90046001600160401b031690565b600080610ed6612943565b9050610ef34382610ee56123d2565b6001600160401b03166130bd565b91505090565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f995760405162461bcd60e51b815260206004820152603b60248201527f555550534e6f745570677261646561626c653a206d757374206e6f742062652060448201527f63616c6c6564207468726f7567682064656c656761746563616c6c000000000060648201526084016109f7565b507f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d90565b3360009081526074602052604090205460ff1680610fde5750607e5460ff165b610ffa5760405162461bcd60e51b81526004016109f79061558e565b60335460ff161561101d5760405162461bcd60e51b81526004016109f790615538565b61102633612959565b6110425760405162461bcd60e51b81526004016109f7906155b5565b600061104d33610e9d565b9050600061105a826125ba565b6101400151611072906001600160401b031643615637565b90506073548110156110b35760405162461bcd60e51b815260206004820152600a60248201526954494d455f44454c544160b01b60448201526064016109f7565b60026110c761014087016101208801615673565b60038111156110d8576110d861564e565b14806111065750826110fa6110f536889003880160a0890161578f565b613325565b6001600160401b031610155b61113e5760405162461bcd60e51b81526020600482015260096024820152681513d3d7d4d350531360ba1b60448201526064016109f7565b600061115261016087016101408801615247565b6001600160401b03161161119a5760405162461bcd60e51b815260206004820152600f60248201526e22a6a82a2cafa0a9a9a2a92a24a7a760891b60448201526064016109f7565b60016111ac60a0870160808801615673565b60038111156111bd576111bd61564e565b146111fc5760405162461bcd60e51b815260206004820152600f60248201526e4241445f505245565f53544154555360881b60448201526064016109f7565b506112098482848661333a565b5061121b336112166123d2565b612f49565b50505050565b60008061122d607a5490565b90506000805b8281101561126d57611248856107c983612911565b1561125b5781611257816157ab565b9250505b80611265816157ab565b915050611233565b509392505050565b3360009081526074602052604090205460ff16806112955750607e5460ff165b6112b15760405162461bcd60e51b81526004016109f79061558e565b60335460ff16156112d45760405162461bcd60e51b81526004016109f790615538565b6112dc611780565b60006112e6612943565b905060006112f382612f2f565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e08701529182048316610100860152810482166101208501529190910416610140820152600582015461016082015290915061139f90613925565b60755460038201546001600160401b039081169116146113c1576113c16157c6565b60038101546000906113db906001600160401b0316612f2f565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e08701529182048316610100860152810482166101208501529190910416610140820152600582015461016082015290915061148790613974565b611491600061299c565b600061149c84611221565b600384015490915060009082906114bb906001600160401b0316611b70565b6114c59190615637565b6003850154909150600160c01b90046001600160401b031682106115185760405162461bcd60e51b815260206004820152600a6024820152694e4f5f5354414b45525360b01b60448201526064016109f7565b6003840154611538908290600160c01b90046001600160401b03166157dc565b60048401546001600160401b0316146115845760405162461bcd60e51b815260206004820152600e60248201526d1393d517d0531317d4d51052d15160921b60448201526064016109f7565b61158f8588886139c4565b50505050505050565b3360009081526074602052604081205460ff16806115b85750607e5460ff165b6115d45760405162461bcd60e51b81526004016109f79061558e565b60335460ff1615806116695750606a546040805163cb23bcb560e01b8152905130926001600160a01b03169163cb23bcb5916004808301926020929190829003018186803b15801561162557600080fd5b505afa158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d91906155d9565b6001600160a01b031614155b6116855760405162461bcd60e51b81526004016109f7906155f6565b600061169033613b13565b60725460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb90604401602060405180830381600087803b1580156116dd57600080fd5b505af11580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171591906157f4565b6117535760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016109f7565b905090565b6001600160a01b0316600090815260796020526040902060010154600160c01b900460ff1690565b600061178a612943565b6001600160401b031690506117a76075546001600160401b031690565b6001600160401b0316811180156117ce57506117c16123d2565b6001600160401b03168111155b610e9a5760405162461bcd60e51b815260206004820152600d60248201526c1393d7d553949154d3d3159151609a1b60448201526064016109f7565b6001600160a01b0316600090815260796020526040902060010154600160801b90046001600160401b031690565b3360009081526074602052604090205460ff16806118585750607e5460ff165b6118745760405162461bcd60e51b81526004016109f79061558e565b60335460ff16156118975760405162461bcd60e51b81526004016109f790615538565b61189f611780565b60006118b36075546001600160401b031690565b905060006118bf612943565b905060006118cc82612f2f565b60038101549091506001600160401b0384811691161415611b2e576118f084612959565b61190c5760405162461bcd60e51b81526004016109f7906155b5565b61192661191885610e9d565b6001600160401b0316610df9565b6119308285612672565b156119705760405162461bcd60e51b815260206004820152601060248201526f14d51052d15117d3d397d5105491d15560821b60448201526064016109f7565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e087015291820483166101008601528104821661012085015291909104166101408201526005820154610160820152611a1990613925565b611acb611a2584612f2f565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e08701529182048316610100860152810482166101208501529190910416610140820152600590910154610160820152613974565b611ad5600061299c565b611ade82611221565b6003820154600160c01b90046001600160401b031614611b2e5760405162461bcd60e51b815260206004820152600b60248201526a4841535f5354414b45525360a81b60448201526064016109f7565b611b36613b94565b6040516001600160401b038316907feaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad464090600090a250505050565b600080611b7c607a5490565b90506000805b8281101561126d576000611b9582613bdb565b80549091506001600160401b03878116600160a01b9092041614801590611bcd57508054611bcd9087906001600160a01b0316612672565b15611be05782611bdc816157ab565b9350505b5080611beb816157ab565b915050611b82565b60006078826001600160401b031681548110611c1157611c11615816565b6000918252602090912001546001600160a01b031692915050565b3360009081526074602052604090205460ff1680611c4c5750607e5460ff165b611c685760405162461bcd60e51b81526004016109f79061558e565b60335460ff1615611c8b5760405162461bcd60e51b81526004016109f790615538565b611c9b6040880160208901615247565b6001600160401b0316611cb16020890189615247565b6001600160401b031610611cf55760405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afa7a92222a960a91b60448201526064016109f7565b611cfd6123d2565b6001600160401b0316611d166040890160208a01615247565b6001600160401b03161115611d5c5760405162461bcd60e51b815260206004820152600c60248201526b1393d517d41493d413d4d15160a21b60448201526064016109f7565b611d696020880188615247565b6001600160401b0316611d846075546001600160401b031690565b6001600160401b031610611dce5760405162461bcd60e51b81526020600482015260116024820152701053149150511657d0d3d3919254935151607a1b60448201526064016109f7565b6000611dee88825b602002016020810190611de99190615247565b612f2f565b90506000611dfd896001611dd6565b600380820154908401549192506001600160401b03918216911614611e505760405162461bcd60e51b81526020600482015260096024820152682224a3232fa82922ab60b91b60448201526064016109f7565b611e6f8a60005b602002016020810190611e6a91906151da565b612f9a565b611e7a8a6001611e57565b611ea1611e8a60208b018b615247565b8b60005b6020020160208101906107c991906151da565b611ee25760405162461bcd60e51b815260206004820152601260248201527114d51052d1548c57d393d517d4d51052d15160721b60448201526064016109f7565b611efd611ef560408b0160208c01615247565b8b6001611e8e565b611f3e5760405162461bcd60e51b815260206004820152601260248201527114d51052d1548c97d393d517d4d51052d15160721b60448201526064016109f7565b604080518082018252611fbf91611faf91908b90600290839083908082843760009201829052506040805180820190915292508c9150600290835b82821015611fa557611f966080830285013681900381019061578f565b81526020019060010190611f79565b5050505089613c01565b85358560005b6020020135613cab565b826001015414611ffe5760405162461bcd60e51b815260206004820152600a6024820152694348414c5f484153483160b01b60448201526064016109f7565b61200f856020860135856001611fb5565b81600101541461204e5760405162461bcd60e51b815260206004820152600a60248201526921a420a62fa420a9a41960b11b60448201526064016109f7565b60655460038301546000916001600160401b03600160401b9182900481169261207c92893592910416615637565b6003850154612093906001600160401b0316612f2f565b600401546120b19190600160401b90046001600160401b03166157dc565b6120bb91906157dc565b905060208501358110156120f6576120ee6120d960208d018d6151da565b6120e960408e0160208f016151da565b612d6f565b505050612254565b60006121368c8b8b8b89600c61210d8d358a615637565b612117919061582c565b600c61212760208f01358b615637565b612131919061582c565b613ce9565b90506121b961214860208e018e6151da565b8d600160200201602081019061215e91906151da565b6001600160a01b03918216600090815260796020526040808220600190810180546001600160401b038916600160801b0267ffffffffffffffff60801b19918216811790925594909516835291200180549091169091179055565b6001600160401b0381167f6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd8736121f160208f018f6151da565b8e600160200201602081019061220791906151da565b8e600060200201602081019061221d9190615247565b604080516001600160a01b0394851681529390921660208401526001600160401b03169082015260600160405180910390a2505050505b5050505050505050565b3360009081526074602052604090205460ff168061227e5750607e5460ff165b61229a5760405162461bcd60e51b81526004016109f79061558e565b60335460ff16158061232f5750606a546040805163cb23bcb560e01b8152905130926001600160a01b03169163cb23bcb5916004808301926020929190829003018186803b1580156122eb57600080fd5b505afa1580156122ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232391906155d9565b6001600160a01b031614155b61234b5760405162461bcd60e51b81526004016109f7906155f6565b6075546001600160401b031661236082610e9d565b6001600160401b031611156123a45760405162461bcd60e51b815260206004820152600a6024820152691513d3d7d49150d1539560b21b60448201526064016109f7565b6123ad81612f9a565b610e9a81613da8565b6123bf83613e58565b6123c98282610b21565b610aa283613f7a565b607554600160801b90046001600160401b031690565b3360009081526074602052604090205460ff16806124085750607e5460ff165b6124245760405162461bcd60e51b81526004016109f79061558e565b60335460ff16156124475760405162461bcd60e51b81526004016109f790615538565b607a5482106124895760405162461bcd60e51b815260206004820152600e60248201526d4e4f5f535543485f5a4f4d42494560901b60448201526064016109f7565b600061249483612911565b905060006124a184612aa0565b90506000806124b86075546001600160401b031690565b6001600160401b031690505b80836001600160401b0316101580156124dc57508482105b1561251b5760006124ec84612f2f565b90506124f88486614040565b60038101546001600160401b0316935082612512816157ab565b935050506124c4565b80836001600160401b0316101561253a576125358661418a565b612544565b6125448684614250565b505050505050565b6000611753614299565b6000805b607a548110156125b157607a818154811061257757612577615816565b6000918252602090912001546001600160a01b038481169116141561259f5750600192915050565b806125a9816157ab565b91505061255a565b50600092915050565b6125c2615004565b6125cb82612f2f565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082015260059091015461016082015292915050565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b60006126bf8484846001600160401b03166130bd565b90505b9392505050565b607e5460ff16156126ec5760405162461bcd60e51b81526004016109f790615562565b467f00000000000000000000000000000000000000000000000000000000000000001415610b125760405162461bcd60e51b815260206004820152601460248201527310d210525397d25117d393d517d0d2105391d15160621b60448201526064016109f7565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156127e15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016109f7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166128136142cc565b6001600160a01b03161461287e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016109f7565b6001600160a01b0381166128c75760405162461bcd60e51b815260206004820152601060248201526f2722a2a22fa9aa20a5a2afaa27a5a2a760811b60448201526064016109f7565b6072546001600160a01b0316610e9a5760405162461bcd60e51b815260206004820152600f60248201526e046414345545f4e4f545f455243323608c1b60448201526064016109f7565b6000607a8281548110611c1157611c11615816565b61292f84613e58565b61293a838383610fbe565b61121b84613f7a565b607554600160401b90046001600160401b031690565b6001600160a01b038116600090815260796020526040812060010154600160c01b900460ff1680156126a357506075546126a3906001600160401b031683612672565b3360009081526074602052604090205460ff16806129bc5750607e5460ff165b6129d85760405162461bcd60e51b81526004016109f79061558e565b60335460ff16156129fb5760405162461bcd60e51b81526004016109f790615538565b6000612a06607a5490565b90506000612a1c6075546001600160401b031690565b6001600160401b03169050825b8281101561121b575b81612a3c82612aa0565b6001600160401b03161015612a7357612a548161418a565b82612a5e8161584b565b935050828110612a6e5750505050565b612a32565b80612a7d816157ab565b915050612a29565b6001600160a01b031660009081526079602052604090205490565b6000607a8281548110612ab557612ab5615816565b600091825260209091200154600160a01b90046001600160401b031692915050565b3360009081526074602052604090205460ff1680612af75750607e5460ff165b612b135760405162461bcd60e51b81526004016109f79061558e565b60335460ff1615612b365760405162461bcd60e51b81526004016109f790615538565b612b4082826142f4565b612b4981613f7a565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000015612bab576001600160401b0382166000908152607f6020526040902054806126a35760405162461bcd60e51b81526004016109f790615862565b6000612bb683612f2f565b6003810154909150600160401b90046001600160401b0316612bea5760405162461bcd60e51b81526004016109f790615862565b60040154600160c01b90046001600160401b031692915050565b919050565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b179052905160009182918291606491612c479190615883565b600060405180830381855afa9150503d8060008114612c82576040519150601f19603f3d011682016040523d82523d6000602084013e612c87565b606091505b5091509150818015612c9a575080516020145b9250505090565b6001600160a01b03828116600090815260796020526040808220928416825281206001830154919291600160801b90046001600160401b031680612d115760405162461bcd60e51b81526020600482015260076024820152661393d7d0d2105360ca1b60448201526064016109f7565b60018201546001600160401b03828116600160801b9092041614612d665760405162461bcd60e51b815260206004820152600c60248201526b1112519197d25397d0d2105360a21b60448201526064016109f7565b95945050505050565b6000612d7a82612a85565b90506000612d8784612a85565b905080821115612da857612d9b838261300a565b612da59083615637565b91505b6000612db56002846158d4565b9050612dc18582614362565b612dcb8184615637565b9250612dff856001600160a01b03166000908152607960205260409020600101805467ffffffffffffffff60801b19169055565b607154612e15906001600160a01b0316846143c7565b612e1e84614463565b5050505050565b600080612e33611de96123d2565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082018190526005909201546101608201529150612ee457600091505090565b606554610140820151439161b2fa91612f06916001600160401b0316906158e8565b6001600160401b0316612f1991906157dc565b1015612f2757600191505090565b600091505090565b6001600160401b0316600090815260766020526040902090565b6001600160a01b0382166000908152607960205260409020612f6b8284614509565b60010180546001600160401b03909216600160401b0267ffffffffffffffff60401b1990921691909117905550565b612fa381611758565b612fbf5760405162461bcd60e51b81526004016109f7906155b5565b6000612fca8261180a565b6001600160401b031614610e9a5760405162461bcd60e51b8152602060048201526007602482015266125397d0d2105360ca1b60448201526064016109f7565b6001600160a01b03821660009081526079602052604081208054808411156130675760405162461bcd60e51b815260206004820152601060248201526f544f4f5f4c4954544c455f5354414b4560801b60448201526064016109f7565b60006130738583615637565b858455905061308286826143c7565b60408051838152602081018790526001600160a01b03881691600080516020615dca833981519152910160405180910390a295945050505050565b6000816130cb600185615913565b6001600160401b031614156130e357506067546126c2565b60006130ee84612f2f565b60030154600160401b90046001600160401b03169050808510156131165750506067546126c2565b6000604051806101400160405280600162ffffff1681526020016201e05b62ffffff1681526020016201f7d162ffffff1681526020016201389162ffffff168152602001620329e162ffffff1681526020016201be4362ffffff1681526020016204cb8c62ffffff1681526020016201fbc462ffffff16815260200162036d3262ffffff1681526020016202797362ffffff1681525090506000604051806101400160405280600162ffffff1681526020016201c03062ffffff1681526020016201b69962ffffff16815260200161fde262ffffff168152602001620265c662ffffff16815260200162013b8e62ffffff168152602001620329e162ffffff1681526020016201389162ffffff1681526020016201f7d162ffffff1681526020016201537562ffffff168152509050600083886132539190615637565b6065549091506000906001600160401b031661327083600a61582c565b61327a91906158d4565b90506000613289600a836158d4565b613294906002615a1f565b90506000856132a4600a85615a2b565b600a81106132b4576132b4615816565b60200201516132c89062ffffff168361582c565b90506000856132d8600a86615a2b565b600a81106132e8576132e8615816565b60200201516132fc9062ffffff16836158d4565b905080613307575060015b80606754613315919061582c565b9c9b505050505050505050505050565b6020810151600090815b602002015192915050565b6000600161335061014087016101208801615673565b60038111156133615761336161564e565b148061338f5750600261337c61014087016101208801615673565b600381111561338d5761338d61564e565b145b6133ce5760405162461bcd60e51b815260206004820152601060248201526f4241445f41465445525f53544154555360801b60448201526064016109f7565b6133d6615068565b6133df856125ba565b6060820152606a54604080516221048360e21b815290516001600160a01b03909216916284120c91600480820192602092909190829003018186803b15801561342757600080fd5b505afa15801561343b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061345f9190615a3f565b815260608101515161347187866146cf565b146134b05760405162461bcd60e51b815260206004820152600f60248201526e0a0a48aacbea6a882a88abe9082a69608b1b60448201526064016109f7565b60006134c76110f536899003890160a08a0161578f565b905060006134dd6110f5368a90038a018a61578f565b9050806001600160401b0316826001600160401b031610156135335760405162461bcd60e51b815260206004820152600f60248201526e494e424f585f4241434b574152445360881b60448201526064016109f7565b806001600160401b0316826001600160401b031614156135d95761356461355f368a90038a018a61578f565b614729565b6001600160401b031661358261355f368b90038b0160a08c0161578f565b6001600160401b031610156135d95760405162461bcd60e51b815260206004820152601a60248201527f494e424f585f504f535f494e5f4d53475f4241434b574152445300000000000060448201526064016109f7565b60026135ed6101408a016101208b01615673565b60038111156135fe576135fe61564e565b14806136275750600061361c61355f368b90038b0160a08c0161578f565b6001600160401b0316115b1561363a578161363681615a58565b9250505b82516001600160401b03831611156136855760405162461bcd60e51b815260206004820152600e60248201526d12539093d617d41054d517d1539160921b60448201526064016109f7565b6001600160401b0382161561372d57606a546001600160a01b03166316bf55796136b0600185615913565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b1580156136ef57600080fd5b505afa158015613703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137279190615a3f565b60e08401525b50613747905061374236889003880188615abe565b614738565b6040820152606554613762906001600160401b0316436158e8565b6001600160401b0390811660c0830152606082015161012001511615801560a08301526137a95761379b81606001516101200151612f2f565b6005015460808201526137b9565b6060810151610160015160808201525b6137d88160a00151826080015183604001518460e001516068546147d7565b9150828214806137e6575082155b6138295760405162461bcd60e51b81526020600482015260146024820152730aa9c8ab0a08a86a88a88be9c9e888abe9082a6960631b60448201526064016109f7565b61387161383d8760a00183600001516146cf565b61384e836040015143606854613cab565b613865613860368b90038b018b615abe565b614844565b888560c001518761486e565b602082015260006138806123d2565b61388b9060016158e8565b9050600061389887612f2f565b90506138a481836148c2565b6138b18360200151614933565b505081816060015161016001516138c66123d2565b6001600160401b03167f4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d09684604001518a8660e001516068548860000151604051613914959493929190615bb9565b60405180910390a450949350505050565b80608001516001600160401b0316431015610e9a5760405162461bcd60e51b815260206004820152600f60248201526e4245464f52455f444541444c494e4560881b60448201526064016109f7565b8060a001516001600160401b0316431015610e9a5760405162461bcd60e51b815260206004820152601060248201526f10d212531117d513d3d7d49150d1539560821b60448201526064016109f7565b60006139cf84612f2f565b90506139db8383614b21565b816002015414613a1c5760405162461bcd60e51b815260206004820152600c60248201526b434f4e4649524d5f4441544160a01b60448201526064016109f7565b606b54604051630502677360e51b815260048101849052602481018590526001600160a01b039091169063a04cee6090604401600060405180830381600087803b158015613a6957600080fd5b505af1158015613a7d573d6000803e3d6000fd5b50506075805467ffffffffffffffff19166001600160401b03881617905550613aa990508460016158e8565b6075805467ffffffffffffffff60401b1916600160401b6001600160401b03938416021790556040805185815260208101859052918616917f22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c91015b60405180910390a250505050565b6001600160a01b0381166000908152607b60205260408120805490829055607c80548291908490613b45908490615637565b909155505060408051828152600060208201526001600160a01b038516917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a292915050565b60758054600160401b90046001600160401b0316906008613bb483615a58565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050565b6000607a8281548110613bf057613bf0615816565b906000526020600020019050919050565b60408051600280825260608201835260009283929190602083019080368337019050508551909150613c4390613c3e8660005b6020020151614b3d565b614bb1565b81600081518110613c5657613c56615816565b6020908102919091010152613c778560016020020151613c3e866001613c34565b81600181518110613c8a57613c8a615816565b602002602001018181525050612d666000846001600160401b031683614cd5565b6040805160208101859052908101839052606081018290526000906080015b6040516020818303038152906040528051906020012090509392505050565b606e546000906001600160a01b03166314eab5e78535898989613d0f60208f018f6151da565b8e6001602002016020810190613d2591906151da565b8a8a6040518963ffffffff1660e01b8152600401613d4a989796959493929190615c1b565b602060405180830381600087803b158015613d6457600080fd5b505af1158015613d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9c9190615ccb565b98975050505050505050565b6001600160a01b038116600090815260796020526040812090613dd36075546001600160401b031690565b9050613ddf8184612672565b15613e145760018201546001600160401b03828116600160401b9092041614613e0a57613e0a6157c6565b613e148184614040565b8154613e2084826143c7565b613e2984614cec565b60408051828152600060208201526001600160a01b03861691600080516020615dca8339815191529101613b05565b3360009081526074602052604090205460ff1680613e785750607e5460ff165b613e945760405162461bcd60e51b81526004016109f79061558e565b60335460ff1615613eb75760405162461bcd60e51b81526004016109f790615538565b613ec033611758565b15613edd5760405162461bcd60e51b81526004016109f790615ce8565b613ee633612556565b15613f265760405162461bcd60e51b815260206004820152601060248201526f5354414b45525f49535f5a4f4d42494560801b60448201526064016109f7565b613f2e610ecb565b811015613f705760405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b60448201526064016109f7565b610e9a3382614e92565b6072546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015613fcc57600080fd5b505af1158015613fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400491906157f4565b610e9a5760405162461bcd60e51b815260206004820152600d60248201526c1514905394d1915497d1905253609a1b60448201526064016109f7565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff1661408c5760405162461bcd60e51b81526004016109f7906155b5565b6001600160401b03821660009081526077602090815260408083206001600160a01b03851684529091528120805460ff191690556140c983612f2f565b600381018054919250600160c01b9091046001600160401b03169060186140ef83615d10565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505060006001600160401b0316836001600160401b03161115610aa2576003810154614146906001600160401b0316612f2f565b60040180546001600160401b031690600061416083615d10565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050505050565b607a805461419a90600190615637565b815481106141aa576141aa615816565b90600052602060002001607a82815481106141c7576141c7615816565b600091825260209091208254910180546001600160a01b039092166001600160a01b031983168117825592546001600160e01b0319909216909217600160a01b918290046001600160401b0316909102179055607a80548061422b5761422b615d33565b600082815260209020810160001990810180546001600160e01b031916905501905550565b80607a838154811061426457614264615816565b9060005260206000200160000160146101000a8154816001600160401b0302191690836001600160401b031602179055505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d6142bd565b3360009081526074602052604090205460ff16806143145750607e5460ff165b6143305760405162461bcd60e51b81526004016109f79061558e565b60335460ff16156143535760405162461bcd60e51b81526004016109f790615538565b61435c82612f9a565b612b4982825b6001600160a01b03821660009081526079602052604081208054909161438884836157dc565b80845560408051848152602081018390529192506001600160a01b03871691600080516020615dca833981519152910160405180910390a25050505050565b6001600160a01b0382166000908152607b6020526040812054906143eb83836157dc565b6001600160a01b0385166000908152607b60205260408120829055607c8054929350859290919061441d9084906157dc565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae29101613b05565b6001600160a01b03808216600081815260796020908152604080832081518083019092529381526001808501546001600160401b03600160401b9091048116938301938452607a8054928301815590945290517ff0440771a29e57e18c66727944770b82cc77924aef333c927ce6bdd2cdb3ae0390910180549251909316600160a01b026001600160e01b031990921694169390931792909217909155612b4982614cec565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff16156145565760405162461bcd60e51b81526004016109f790615ce8565b6001600160401b03821660009081526077602090815260408083206001600160a01b03851684529091528120805460ff1916600117905561459683612f2f565b6003810154909150600160401b90046001600160401b03166145ca5760405162461bcd60e51b81526004016109f790615862565b6003810154600160c01b90046001600160401b03166145ea8160016158e8565b6003830180546001600160c01b0316600160c01b6001600160401b039384160217905584161561121b57600382015460009061462e906001600160401b0316612f2f565b6004810180549192506001600160401b0390911690600061464e83615a58565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050816001600160401b031660001415612e1e57606554612e1e9061469f906001600160401b0316436158e8565b60038301805467ffffffffffffffff60801b1916600160801b6001600160401b0390931692909202919091179055565b60006146e86146e33685900385018561578f565b614b3d565b826146f960a0860160808701615673565b60405160200161470b93929190615d49565b60405160208183030381529060405280519060200120905092915050565b6020810151600090600161332f565b60006147426150b9565b8251602001518190600381111561475b5761475b61564e565b9081600381111561476e5761476e61564e565b90525060208381015181015190820190600381111561478f5761478f61564e565b908160038111156147a2576147a261564e565b9052506147ad6150d7565b8351518152602080850151519082015260408401516147cf9083908390613c01565b949350505050565b600080866147e65760006147e9565b60015b6040516001600160f81b031960f883901b1660208201526021810188905260418101879052606181018690526081810185905290915060a1016040516020818303038152906040528051906020012091505095945050505050565b60006126a361485a836020015160000151614fed565b60208401515161486990614ff8565b614b21565b614876615004565b61487e615004565b96875250602086019490945260408501929092526001600160401b0390811660608501529081166080840181905260a0840152431661014083015261016082015290565b6004820154600160401b90046001600160401b03166149035760048201805467ffffffffffffffff60401b1916600160401b436001600160401b0316021790555b600490910180546001600160401b03909216600160801b0267ffffffffffffffff60801b19909216919091179055565b60758054600160801b90046001600160401b031690601061495383615a58565b825461010092830a6001600160401b03818102199092169282160291909117909255607554600160801b908190048316600090815260766020908152604091829020875181559087015160018201559086015160028201556060860151600382018054608089015160a08a015160c08b01519489166001600160801b031993841617600160401b928a168302176001600160801b03908116918a1688026001600160c01b0390811692909217600160c01b968b1687021790945560e08b0151600487018054998d01516101208e01516101408f0151938d169b9096169a909a17998b16909302989098179093169188169095029091161793909416909302919091179055610160830151600590910155507f000000000000000000000000000000000000000000000000000000000000000015610e9a5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b158015614ac457600080fd5b505afa158015614ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614afc9190615a3f565b607554600160801b90046001600160401b03166000908152607f602052604090205550565b604080516020810184905290810182905260009060600161470b565b8051805160209182015192820151805190830151604080516c23b637b130b61039ba30ba329d60991b81870152602d810194909452604d8401959095526001600160c01b031960c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b60006001836003811115614bc757614bc761564e565b1415614c0d576040516b213637b1b59039ba30ba329d60a11b6020820152602c8101839052604c015b6040516020818303038152906040528051906020012090506126a3565b6002836003811115614c2157614c2161564e565b1415614c575760405174213637b1b59039ba30ba32961032b93937b932b21d60591b602082015260358101839052605501614bf0565b6003836003811115614c6b57614c6b61564e565b1415614c9a5760405174213637b1b59039ba30ba3296103a37b7903330b91d60591b6020820152603501614bf0565b60405162461bcd60e51b815260206004820152601060248201526f4241445f424c4f434b5f53544154555360801b60448201526064016109f7565b6000838383604051602001613cca93929190615d87565b6001600160a01b03811660009081526079602052604090206001810154600160c01b900460ff16614d2f5760405162461bcd60e51b81526004016109f7906155b5565b600180820154607880546001600160401b03909216929091614d519190615637565b81548110614d6157614d61615816565b600091825260209091200154607880546001600160a01b03909216916001600160401b038416908110614d9657614d96615816565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080607960006078846001600160401b031681548110614de557614de5615816565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600101805467ffffffffffffffff19166001600160401b03929092169190911790556078805480614e3d57614e3d615d33565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152607990935250506040812090815560010180546001600160c81b0319169055565b6078805460018082019092557f8dc6fb69531d98d70dc0420e638d2dfd04e09e1ec783ede9aac77da9c5a0dac4810180546001600160a01b0319166001600160a01b0386169081179091556040805160a0810182528581526001600160401b038085166020808401918252607580548416858701908152600060608701818152608088018c81528a835260798652898320985189559551978c0180549351915196519888166001600160801b031990941693909317600160401b918816919091021768ffffffffffffffffff60801b1916600160801b9587169590950260ff60c01b191694909417600160c01b9615158702179055805484168352607782528583208784528252858320805460ff191690991790985587546001600160c01b031643909316909302919091179095558151948552840185905291929091600080516020615dca833981519152910160405180910390a2505050565b80516000908161332f565b8051600090600161332f565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b60405180610100016040528060008152602001615083615004565b815260006020820152604001615097615004565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b6150ee615104565b8152602001906001900390816150e65790505090565b60405180604001604052806151176150b9565b81526020016151246150b9565b905290565b6001600160a01b0381168114610e9a57600080fd5b60008060006060848603121561515357600080fd5b83359250602084013561516581615129565b9150604084013561517581615129565b809150509250925092565b6001600160401b0381168114610e9a57600080fd5b600080604083850312156151a857600080fd5b82356151b381615180565b946020939093013593505050565b6000602082840312156151d357600080fd5b5035919050565b6000602082840312156151ec57600080fd5b81356126c281615129565b6000610160828403121561520a57600080fd5b50919050565b60008060006101a0848603121561522657600080fd5b61523085856151f7565b956101608501359550610180909401359392505050565b60006020828403121561525957600080fd5b81356126c281615180565b6000806040838503121561527757600080fd5b50508035926020909101359150565b80604081018310156126a357600080fd5b600080600080600080600080610280898b0312156152b457600080fd5b6152be8a8a615286565b97506152cd8a60408b01615286565b96506152dc8a60808b01615286565b95506101c089018a8111156152f057600080fd5b60c08a0195503561530081615180565b93506101e089013592506153188a6102008b01615286565b91506153288a6102408b01615286565b90509295985092959890939650565b60008060006060848603121561534c57600080fd5b83359250602084013561535e81615180565b929592945050506040919091013590565b60006101808201905082518252602083015160208301526040830151604083015260608301516153aa60608401826001600160401b03169052565b5060808301516153c560808401826001600160401b03169052565b5060a08301516153e060a08401826001600160401b03169052565b5060c08301516153fb60c08401826001600160401b03169052565b5060e083015161541660e08401826001600160401b03169052565b50610100838101516001600160401b038116848301525050610120838101516001600160401b038116848301525050610140838101516001600160401b03811684830152505061016092830151919092015290565b6000806040838503121561547e57600080fd5b823561548981615180565b9150602083013561549981615129565b809150509250929050565b6000806000606084860312156154b957600080fd5b8335925060208401356154cb81615180565b9150604084013561517581615180565b6000806000806101c085870312156154f257600080fd5b8435935061550386602087016151f7565b9396939550505050610180820135916101a0013590565b6000806040838503121561552d57600080fd5b82356151b381615129565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526012908201527115d2125511531254d517d11254d05093115160721b604082015260600190565b6020808252600d908201526c2727aa2fab20a624a220aa27a960991b604082015260600190565b6020808252600a90820152691393d517d4d51052d15160b21b604082015260600190565b6000602082840312156155eb57600080fd5b81516126c281615129565b6020808252601190820152705041555345445f414e445f41435449564560781b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561564957615649615621565b500390565b634e487b7160e01b600052602160045260246000fd5b803560048110612c0457600080fd5b60006020828403121561568557600080fd5b6126c282615664565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156156c6576156c661568e565b60405290565b6000608082840312156156de57600080fd5b6156e66156a4565b905082601f8301126156f757600080fd5b6156ff6156a4565b80604084018581111561571157600080fd5b845b8181101561572b578035845260209384019301615713565b5081845285605f86011261573e57600080fd5b6157466156a4565b9250829150608085018681111561575c57600080fd5b8082101561578157813561576f81615180565b8452602093840193919091019061575c565b505060208301525092915050565b6000608082840312156157a157600080fd5b6126c283836156cc565b60006000198214156157bf576157bf615621565b5060010190565b634e487b7160e01b600052600160045260246000fd5b600082198211156157ef576157ef615621565b500190565b60006020828403121561580657600080fd5b815180151581146126c257600080fd5b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561584657615846615621565b500290565b60008161585a5761585a615621565b506000190190565b6020808252600790820152664e4f5f4e4f444560c81b604082015260600190565b6000825160005b818110156158a4576020818601810151858301520161588a565b818111156158b3576000828501525b509190910192915050565b634e487b7160e01b600052601260045260246000fd5b6000826158e3576158e36158be565b500490565b60006001600160401b0380831681851680830382111561590a5761590a615621565b01949350505050565b60006001600160401b038381169083168181101561593357615933615621565b039392505050565b600181815b8085111561597657816000190482111561595c5761595c615621565b8085161561596957918102915b93841c9390800290615940565b509250929050565b60008261598d575060016126a3565b8161599a575060006126a3565b81600181146159b057600281146159ba576159d6565b60019150506126a3565b60ff8411156159cb576159cb615621565b50506001821b6126a3565b5060208310610133831016604e8410600b84101617156159f9575081810a6126a3565b615a03838361593b565b8060001904821115615a1757615a17615621565b029392505050565b60006126c2838361597e565b600082615a3a57615a3a6158be565b500690565b600060208284031215615a5157600080fd5b5051919050565b60006001600160401b0380831681811415615a7557615a75615621565b6001019392505050565b600060a08284031215615a9157600080fd5b615a996156a4565b9050615aa583836156cc565b8152615ab360808301615664565b602082015292915050565b60006101608284031215615ad157600080fd5b604051606081018181106001600160401b0382111715615af357615af361568e565b604052615b008484615a7f565b8152615b0f8460a08501615a7f565b6020820152610140830135615b2381615180565b60408201529392505050565b604081833760006040838101828152908301915b6002811015612e1e578235615b5781615180565b6001600160401b0316825260209283019290910190600101615b43565b60048110615b9257634e487b7160e01b600052602160045260246000fd5b9052565b615ba08282615b2f565b615bac60808201615664565b610aa26080840182615b74565b8581526101e08101615bce6020830187615b96565b615bde60c0830160a08801615b96565b610140860135615bed81615180565b6001600160401b03166101608301526101808201949094526101a08101929092526101c09091015292915050565b888152610200810160208083018a60005b6002811015615c5757615c4783615c4284615664565b615b74565b9183019190830190600101615c2c565b50505050606082018860005b6002811015615c8957615c768383615b2f565b6080928301929190910190600101615c63565b5050506001600160401b03969096166101608201526001600160a01b03948516610180820152929093166101a08301526101c08201526101e001529392505050565b600060208284031215615cdd57600080fd5b81516126c281615180565b6020808252600e908201526d1053149150511657d4d51052d15160921b604082015260600190565b60006001600160401b03821680615d2957615d29615621565b6000190192915050565b634e487b7160e01b600052603160045260246000fd5b838152826020820152600060048310615d7257634e487b7160e01b600052602160045260246000fd5b5060f89190911b604082015260410192915050565b83815260006020848184015260408301845182860160005b82811015615dbb57815184529284019290840190600101615d9f565b50919897505050505050505056feebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6a2646970667358221220fdc0ef6f37b884c116c31a1f798cd957e33fa10d8d4e48b539dc995420abc2f364736f6c63430008090033",
}

// ERC20RollupUserLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20RollupUserLogicMetaData.ABI instead.
var ERC20RollupUserLogicABI = ERC20RollupUserLogicMetaData.ABI

// ERC20RollupUserLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20RollupUserLogicMetaData.Bin instead.
var ERC20RollupUserLogicBin = ERC20RollupUserLogicMetaData.Bin

// DeployERC20RollupUserLogic deploys a new Ethereum contract, binding an instance of ERC20RollupUserLogic to it.
func DeployERC20RollupUserLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20RollupUserLogic, error) {
	parsed, err := ERC20RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20RollupUserLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20RollupUserLogic{ERC20RollupUserLogicCaller: ERC20RollupUserLogicCaller{contract: contract}, ERC20RollupUserLogicTransactor: ERC20RollupUserLogicTransactor{contract: contract}, ERC20RollupUserLogicFilterer: ERC20RollupUserLogicFilterer{contract: contract}}, nil
}

// ERC20RollupUserLogic is an auto generated Go binding around an Ethereum contract.
type ERC20RollupUserLogic struct {
	ERC20RollupUserLogicCaller     // Read-only binding to the contract
	ERC20RollupUserLogicTransactor // Write-only binding to the contract
	ERC20RollupUserLogicFilterer   // Log filterer for contract events
}

// ERC20RollupUserLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20RollupUserLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupUserLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20RollupUserLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupUserLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20RollupUserLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupUserLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20RollupUserLogicSession struct {
	Contract     *ERC20RollupUserLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ERC20RollupUserLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20RollupUserLogicCallerSession struct {
	Contract *ERC20RollupUserLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ERC20RollupUserLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20RollupUserLogicTransactorSession struct {
	Contract     *ERC20RollupUserLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ERC20RollupUserLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20RollupUserLogicRaw struct {
	Contract *ERC20RollupUserLogic // Generic contract binding to access the raw methods on
}

// ERC20RollupUserLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20RollupUserLogicCallerRaw struct {
	Contract *ERC20RollupUserLogicCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20RollupUserLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20RollupUserLogicTransactorRaw struct {
	Contract *ERC20RollupUserLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20RollupUserLogic creates a new instance of ERC20RollupUserLogic, bound to a specific deployed contract.
func NewERC20RollupUserLogic(address common.Address, backend bind.ContractBackend) (*ERC20RollupUserLogic, error) {
	contract, err := bindERC20RollupUserLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogic{ERC20RollupUserLogicCaller: ERC20RollupUserLogicCaller{contract: contract}, ERC20RollupUserLogicTransactor: ERC20RollupUserLogicTransactor{contract: contract}, ERC20RollupUserLogicFilterer: ERC20RollupUserLogicFilterer{contract: contract}}, nil
}

// NewERC20RollupUserLogicCaller creates a new read-only instance of ERC20RollupUserLogic, bound to a specific deployed contract.
func NewERC20RollupUserLogicCaller(address common.Address, caller bind.ContractCaller) (*ERC20RollupUserLogicCaller, error) {
	contract, err := bindERC20RollupUserLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicCaller{contract: contract}, nil
}

// NewERC20RollupUserLogicTransactor creates a new write-only instance of ERC20RollupUserLogic, bound to a specific deployed contract.
func NewERC20RollupUserLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20RollupUserLogicTransactor, error) {
	contract, err := bindERC20RollupUserLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicTransactor{contract: contract}, nil
}

// NewERC20RollupUserLogicFilterer creates a new log filterer instance of ERC20RollupUserLogic, bound to a specific deployed contract.
func NewERC20RollupUserLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20RollupUserLogicFilterer, error) {
	contract, err := bindERC20RollupUserLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicFilterer{contract: contract}, nil
}

// bindERC20RollupUserLogic binds a generic wrapper to an already deployed contract.
func bindERC20RollupUserLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RollupUserLogic.Contract.ERC20RollupUserLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ERC20RollupUserLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ERC20RollupUserLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RollupUserLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.contract.Transact(opts, method, params...)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) VALIDATORAFKBLOCKS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "VALIDATOR_AFK_BLOCKS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_ERC20RollupUserLogic.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_ERC20RollupUserLogic.CallOpts)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked     *big.Int
		Index            uint64
		LatestStakedNode uint64
		CurrentChallenge uint64
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.LatestStakedNode = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _ERC20RollupUserLogic.Contract.StakerMap(&_ERC20RollupUserLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _ERC20RollupUserLogic.Contract.StakerMap(&_ERC20RollupUserLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.AmountStaked(&_ERC20RollupUserLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.AmountStaked(&_ERC20RollupUserLogic.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) BaseStake() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.BaseStake(&_ERC20RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) BaseStake() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.BaseStake(&_ERC20RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Bridge() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Bridge(&_ERC20RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Bridge() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Bridge(&_ERC20RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ChainId() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.ChainId(&_ERC20RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ChainId() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.ChainId(&_ERC20RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ChallengeManager() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ChallengeManager(&_ERC20RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ChallengeManager(&_ERC20RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ConfirmPeriodBlocks(&_ERC20RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ConfirmPeriodBlocks(&_ERC20RollupUserLogic.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CountStakedZombies(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CountStakedZombies(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CountZombiesStakedOnChildren(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CountZombiesStakedOnChildren(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.CurrentChallenge(&_ERC20RollupUserLogic.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.CurrentChallenge(&_ERC20RollupUserLogic.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CurrentRequiredStake() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CurrentRequiredStake(&_ERC20RollupUserLogic.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CurrentRequiredStake(&_ERC20RollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_ERC20RollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_ERC20RollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) FirstUnresolvedNode() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.FirstUnresolvedNode(&_ERC20RollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.FirstUnresolvedNode(&_ERC20RollupUserLogic.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) GetNode(nodeNum uint64) (Node, error) {
	return _ERC20RollupUserLogic.Contract.GetNode(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _ERC20RollupUserLogic.Contract.GetNode(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) GetNodeCreationBlockForLogLookup(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "getNodeCreationBlockForLogLookup", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.GetNodeCreationBlockForLogLookup(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.GetNodeCreationBlockForLogLookup(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _ERC20RollupUserLogic.Contract.GetStaker(&_ERC20RollupUserLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _ERC20RollupUserLogic.Contract.GetStaker(&_ERC20RollupUserLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.GetStakerAddress(&_ERC20RollupUserLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.GetStakerAddress(&_ERC20RollupUserLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Inbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Inbox(&_ERC20RollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Inbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Inbox(&_ERC20RollupUserLogic.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Initialize(opts *bind.CallOpts, _stakeToken common.Address) error {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "initialize", _stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Initialize(_stakeToken common.Address) error {
	return _ERC20RollupUserLogic.Contract.Initialize(&_ERC20RollupUserLogic.CallOpts, _stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Initialize(_stakeToken common.Address) error {
	return _ERC20RollupUserLogic.Contract.Initialize(&_ERC20RollupUserLogic.CallOpts, _stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) IsERC20Enabled() (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsERC20Enabled(&_ERC20RollupUserLogic.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) IsERC20Enabled() (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsERC20Enabled(&_ERC20RollupUserLogic.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsStaked(&_ERC20RollupUserLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsStaked(&_ERC20RollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) IsStakedOnLatestConfirmed(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "isStakedOnLatestConfirmed", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_ERC20RollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_ERC20RollupUserLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsValidator(&_ERC20RollupUserLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsValidator(&_ERC20RollupUserLogic.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) IsZombie(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsZombie(&_ERC20RollupUserLogic.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsZombie(&_ERC20RollupUserLogic.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) LastStakeBlock() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LastStakeBlock(&_ERC20RollupUserLogic.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) LastStakeBlock() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LastStakeBlock(&_ERC20RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) LatestConfirmed() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestConfirmed(&_ERC20RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) LatestConfirmed() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestConfirmed(&_ERC20RollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) LatestNodeCreated() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestNodeCreated(&_ERC20RollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) LatestNodeCreated() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestNodeCreated(&_ERC20RollupUserLogic.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestStakedNode(&_ERC20RollupUserLogic.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestStakedNode(&_ERC20RollupUserLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.LoserStakeEscrow(&_ERC20RollupUserLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.LoserStakeEscrow(&_ERC20RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.MinimumAssertionPeriod(&_ERC20RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.MinimumAssertionPeriod(&_ERC20RollupUserLogic.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.NodeHasStaker(&_ERC20RollupUserLogic.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.NodeHasStaker(&_ERC20RollupUserLogic.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Outbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Outbox(&_ERC20RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Outbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Outbox(&_ERC20RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Owner() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Owner(&_ERC20RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Owner() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Owner(&_ERC20RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Paused() (bool, error) {
	return _ERC20RollupUserLogic.Contract.Paused(&_ERC20RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Paused() (bool, error) {
	return _ERC20RollupUserLogic.Contract.Paused(&_ERC20RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ProxiableUUID() ([32]byte, error) {
	return _ERC20RollupUserLogic.Contract.ProxiableUUID(&_ERC20RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _ERC20RollupUserLogic.Contract.ProxiableUUID(&_ERC20RollupUserLogic.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RequireUnresolved(nodeNum *big.Int) error {
	return _ERC20RollupUserLogic.Contract.RequireUnresolved(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _ERC20RollupUserLogic.Contract.RequireUnresolved(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RequireUnresolvedExists() error {
	return _ERC20RollupUserLogic.Contract.RequireUnresolvedExists(&_ERC20RollupUserLogic.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) RequireUnresolvedExists() error {
	return _ERC20RollupUserLogic.Contract.RequireUnresolvedExists(&_ERC20RollupUserLogic.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.RequiredStake(&_ERC20RollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.RequiredStake(&_ERC20RollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.RollupDeploymentBlock(&_ERC20RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.RollupDeploymentBlock(&_ERC20RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RollupEventInbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.RollupEventInbox(&_ERC20RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.RollupEventInbox(&_ERC20RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) SequencerInbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.SequencerInbox(&_ERC20RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.SequencerInbox(&_ERC20RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) StakeToken() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.StakeToken(&_ERC20RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) StakeToken() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.StakeToken(&_ERC20RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) StakerCount() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.StakerCount(&_ERC20RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) StakerCount() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.StakerCount(&_ERC20RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.TotalWithdrawableFunds(&_ERC20RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.TotalWithdrawableFunds(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ValidatorUtils() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorUtils(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ValidatorUtils() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorUtils(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorWalletCreator(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorWalletCreator(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_ERC20RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _ERC20RollupUserLogic.Contract.WasmModuleRoot(&_ERC20RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _ERC20RollupUserLogic.Contract.WasmModuleRoot(&_ERC20RollupUserLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.WithdrawableFunds(&_ERC20RollupUserLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.WithdrawableFunds(&_ERC20RollupUserLogic.CallOpts, user)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ZombieAddress(&_ERC20RollupUserLogic.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ZombieAddress(&_ERC20RollupUserLogic.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ZombieCount() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.ZombieCount(&_ERC20RollupUserLogic.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ZombieCount() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.ZombieCount(&_ERC20RollupUserLogic.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ZombieLatestStakedNode(&_ERC20RollupUserLogic.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ZombieLatestStakedNode(&_ERC20RollupUserLogic.CallOpts, zombieNum)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "addToDeposit", stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.AddToDeposit(&_ERC20RollupUserLogic.TransactOpts, stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.AddToDeposit(&_ERC20RollupUserLogic.TransactOpts, stakerAddress, tokenAmount)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) CompleteChallenge(opts *bind.TransactOpts, challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "completeChallenge", challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.CompleteChallenge(&_ERC20RollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.CompleteChallenge(&_ERC20RollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ConfirmNextNode(&_ERC20RollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ConfirmNextNode(&_ERC20RollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.CreateChallenge(&_ERC20RollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.CreateChallenge(&_ERC20RollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) NewStakeOnExistingNode(opts *bind.TransactOpts, tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "newStakeOnExistingNode", tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) NewStakeOnExistingNode(tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.NewStakeOnExistingNode(&_ERC20RollupUserLogic.TransactOpts, tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) NewStakeOnExistingNode(tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.NewStakeOnExistingNode(&_ERC20RollupUserLogic.TransactOpts, tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) NewStakeOnNewNode(opts *bind.TransactOpts, tokenAmount *big.Int, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "newStakeOnNewNode", tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) NewStakeOnNewNode(tokenAmount *big.Int, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.NewStakeOnNewNode(&_ERC20RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) NewStakeOnNewNode(tokenAmount *big.Int, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.NewStakeOnNewNode(&_ERC20RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ReduceDeposit(&_ERC20RollupUserLogic.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ReduceDeposit(&_ERC20RollupUserLogic.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RejectNextNode(&_ERC20RollupUserLogic.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RejectNextNode(&_ERC20RollupUserLogic.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveOldZombies(&_ERC20RollupUserLogic.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveOldZombies(&_ERC20RollupUserLogic.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_ERC20RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_ERC20RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_ERC20RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_ERC20RollupUserLogic.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveZombie(&_ERC20RollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveZombie(&_ERC20RollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ReturnOldDeposit(&_ERC20RollupUserLogic.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ReturnOldDeposit(&_ERC20RollupUserLogic.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.StakeOnExistingNode(&_ERC20RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.StakeOnExistingNode(&_ERC20RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) StakeOnNewNode(opts *bind.TransactOpts, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.StakeOnNewNode(&_ERC20RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.StakeOnNewNode(&_ERC20RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.WithdrawStakerFunds(&_ERC20RollupUserLogic.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.WithdrawStakerFunds(&_ERC20RollupUserLogic.TransactOpts)
}

// ERC20RollupUserLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicAdminChangedIterator struct {
	Event *ERC20RollupUserLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicAdminChanged represents a AdminChanged event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*ERC20RollupUserLogicAdminChangedIterator, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicAdminChangedIterator{contract: _ERC20RollupUserLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicAdminChanged)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseAdminChanged(log types.Log) (*ERC20RollupUserLogicAdminChanged, error) {
	event := new(ERC20RollupUserLogicAdminChanged)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicBeaconUpgradedIterator struct {
	Event *ERC20RollupUserLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicBeaconUpgraded represents a BeaconUpgraded event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ERC20RollupUserLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicBeaconUpgradedIterator{contract: _ERC20RollupUserLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicBeaconUpgraded)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseBeaconUpgraded(log types.Log) (*ERC20RollupUserLogicBeaconUpgraded, error) {
	event := new(ERC20RollupUserLogicBeaconUpgraded)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeConfirmedIterator struct {
	Event *ERC20RollupUserLogicNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicNodeConfirmed represents a NodeConfirmed event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*ERC20RollupUserLogicNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicNodeConfirmedIterator{contract: _ERC20RollupUserLogic.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicNodeConfirmed)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseNodeConfirmed(log types.Log) (*ERC20RollupUserLogicNodeConfirmed, error) {
	event := new(ERC20RollupUserLogicNodeConfirmed)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeCreatedIterator struct {
	Event *ERC20RollupUserLogicNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicNodeCreated represents a NodeCreated event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          Assertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*ERC20RollupUserLogicNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicNodeCreatedIterator{contract: _ERC20RollupUserLogic.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicNodeCreated)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseNodeCreated(log types.Log) (*ERC20RollupUserLogicNodeCreated, error) {
	event := new(ERC20RollupUserLogicNodeCreated)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeRejectedIterator struct {
	Event *ERC20RollupUserLogicNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicNodeRejected represents a NodeRejected event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*ERC20RollupUserLogicNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicNodeRejectedIterator{contract: _ERC20RollupUserLogic.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicNodeRejected)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseNodeRejected(log types.Log) (*ERC20RollupUserLogicNodeRejected, error) {
	event := new(ERC20RollupUserLogicNodeRejected)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicPausedIterator struct {
	Event *ERC20RollupUserLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicPaused represents a Paused event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*ERC20RollupUserLogicPausedIterator, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicPausedIterator{contract: _ERC20RollupUserLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicPaused) (event.Subscription, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicPaused)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParsePaused(log types.Log) (*ERC20RollupUserLogicPaused, error) {
	event := new(ERC20RollupUserLogicPaused)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicRollupChallengeStartedIterator struct {
	Event *ERC20RollupUserLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*ERC20RollupUserLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicRollupChallengeStartedIterator{contract: _ERC20RollupUserLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicRollupChallengeStarted)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*ERC20RollupUserLogicRollupChallengeStarted, error) {
	event := new(ERC20RollupUserLogicRollupChallengeStarted)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicRollupInitializedIterator struct {
	Event *ERC20RollupUserLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicRollupInitialized represents a RollupInitialized event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*ERC20RollupUserLogicRollupInitializedIterator, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicRollupInitializedIterator{contract: _ERC20RollupUserLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicRollupInitialized)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseRollupInitialized(log types.Log) (*ERC20RollupUserLogicRollupInitialized, error) {
	event := new(ERC20RollupUserLogicRollupInitialized)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUnpausedIterator struct {
	Event *ERC20RollupUserLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicUnpaused represents a Unpaused event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ERC20RollupUserLogicUnpausedIterator, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicUnpausedIterator{contract: _ERC20RollupUserLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicUnpaused)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseUnpaused(log types.Log) (*ERC20RollupUserLogicUnpaused, error) {
	event := new(ERC20RollupUserLogicUnpaused)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUpgradedIterator struct {
	Event *ERC20RollupUserLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicUpgraded represents a Upgraded event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ERC20RollupUserLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicUpgradedIterator{contract: _ERC20RollupUserLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicUpgraded)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseUpgraded(log types.Log) (*ERC20RollupUserLogicUpgraded, error) {
	event := new(ERC20RollupUserLogicUpgraded)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUpgradedSecondaryIterator struct {
	Event *ERC20RollupUserLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicUpgradedSecondary represents a UpgradedSecondary event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*ERC20RollupUserLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicUpgradedSecondaryIterator{contract: _ERC20RollupUserLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicUpgradedSecondary)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseUpgradedSecondary(log types.Log) (*ERC20RollupUserLogicUpgradedSecondary, error) {
	event := new(ERC20RollupUserLogicUpgradedSecondary)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUserStakeUpdatedIterator struct {
	Event *ERC20RollupUserLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicUserStakeUpdated represents a UserStakeUpdated event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*ERC20RollupUserLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicUserStakeUpdatedIterator{contract: _ERC20RollupUserLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicUserStakeUpdated)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseUserStakeUpdated(log types.Log) (*ERC20RollupUserLogicUserStakeUpdated, error) {
	event := new(ERC20RollupUserLogicUserStakeUpdated)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *ERC20RollupUserLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator{contract: _ERC20RollupUserLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicUserWithdrawableFundsUpdated)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*ERC20RollupUserLogicUserWithdrawableFundsUpdated, error) {
	event := new(ERC20RollupUserLogicUserWithdrawableFundsUpdated)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminMetaData contains all meta data concerning the IRollupAdmin contract.
var IRollupAdminMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"prevNode\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stacker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stackerA\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stackerB\",\"type\":\"address[]\"}],\"name\":\"forceResolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"extraChallengeTimeBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"delayBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"futureBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"delaySeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"futureSeconds\",\"type\":\"uint64\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newExtraTimeBlocks\",\"type\":\"uint64\"}],\"name\":\"setExtraChallengeTimeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakeToken\",\"type\":\"address\"}],\"name\":\"setStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupAdminMetaData.ABI instead.
var IRollupAdminABI = IRollupAdminMetaData.ABI

// IRollupAdmin is an auto generated Go binding around an Ethereum contract.
type IRollupAdmin struct {
	IRollupAdminCaller     // Read-only binding to the contract
	IRollupAdminTransactor // Write-only binding to the contract
	IRollupAdminFilterer   // Log filterer for contract events
}

// IRollupAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupAdminSession struct {
	Contract     *IRollupAdmin     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupAdminCallerSession struct {
	Contract *IRollupAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IRollupAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupAdminTransactorSession struct {
	Contract     *IRollupAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IRollupAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupAdminRaw struct {
	Contract *IRollupAdmin // Generic contract binding to access the raw methods on
}

// IRollupAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupAdminCallerRaw struct {
	Contract *IRollupAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupAdminTransactorRaw struct {
	Contract *IRollupAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupAdmin creates a new instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdmin(address common.Address, backend bind.ContractBackend) (*IRollupAdmin, error) {
	contract, err := bindIRollupAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupAdmin{IRollupAdminCaller: IRollupAdminCaller{contract: contract}, IRollupAdminTransactor: IRollupAdminTransactor{contract: contract}, IRollupAdminFilterer: IRollupAdminFilterer{contract: contract}}, nil
}

// NewIRollupAdminCaller creates a new read-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminCaller(address common.Address, caller bind.ContractCaller) (*IRollupAdminCaller, error) {
	contract, err := bindIRollupAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminCaller{contract: contract}, nil
}

// NewIRollupAdminTransactor creates a new write-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupAdminTransactor, error) {
	contract, err := bindIRollupAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminTransactor{contract: contract}, nil
}

// NewIRollupAdminFilterer creates a new log filterer instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupAdminFilterer, error) {
	contract, err := bindIRollupAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminFilterer{contract: contract}, nil
}

// bindIRollupAdmin binds a generic wrapper to an already deployed contract.
func bindIRollupAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupAdminMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.IRollupAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transact(opts, method, params...)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceConfirmNode(opts *bind.TransactOpts, nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceConfirmNode", nodeNum, blockHash, sendRoot)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceConfirmNode(nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmNode(&_IRollupAdmin.TransactOpts, nodeNum, blockHash, sendRoot)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceConfirmNode(nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmNode(&_IRollupAdmin.TransactOpts, nodeNum, blockHash, sendRoot)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceCreateNode(opts *bind.TransactOpts, prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion Assertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceCreateNode", prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceCreateNode(prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion Assertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateNode(&_IRollupAdmin.TransactOpts, prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceCreateNode(prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion Assertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateNode(&_IRollupAdmin.TransactOpts, prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceRefundStaker(opts *bind.TransactOpts, stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceRefundStaker", stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stackerA, address[] stackerB) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceResolveChallenge(opts *bind.TransactOpts, stackerA []common.Address, stackerB []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceResolveChallenge", stackerA, stackerB)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stackerA, address[] stackerB) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceResolveChallenge(stackerA []common.Address, stackerB []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceResolveChallenge(&_IRollupAdmin.TransactOpts, stackerA, stackerB)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stackerA, address[] stackerB) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceResolveChallenge(stackerA []common.Address, stackerB []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceResolveChallenge(&_IRollupAdmin.TransactOpts, stackerA, stackerB)
}

// Initialize is a paid mutator transaction binding the contract method 0x27aa19bd.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x27aa19bd.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x27aa19bd.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetExtraChallengeTimeBlocks(opts *bind.TransactOpts, newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setExtraChallengeTimeBlocks", newExtraTimeBlocks)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_IRollupAdmin *IRollupAdminSession) SetExtraChallengeTimeBlocks(newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetExtraChallengeTimeBlocks(&_IRollupAdmin.TransactOpts, newExtraTimeBlocks)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetExtraChallengeTimeBlocks(newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetExtraChallengeTimeBlocks(&_IRollupAdmin.TransactOpts, newExtraTimeBlocks)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetStakeToken(opts *bind.TransactOpts, newStakeToken common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setStakeToken", newStakeToken)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_IRollupAdmin *IRollupAdminSession) SetStakeToken(newStakeToken common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetStakeToken(&_IRollupAdmin.TransactOpts, newStakeToken)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetStakeToken(newStakeToken common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetStakeToken(&_IRollupAdmin.TransactOpts, newStakeToken)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_IRollupAdmin *IRollupAdminTransactor) UpgradeBeacon(opts *bind.TransactOpts, beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "upgradeBeacon", beacon, newImplementation)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_IRollupAdmin *IRollupAdminSession) UpgradeBeacon(beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.UpgradeBeacon(&_IRollupAdmin.TransactOpts, beacon, newImplementation)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) UpgradeBeacon(beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.UpgradeBeacon(&_IRollupAdmin.TransactOpts, beacon, newImplementation)
}

// IRollupAdminOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the IRollupAdmin contract.
type IRollupAdminOwnerFunctionCalledIterator struct {
	Event *IRollupAdminOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the IRollupAdmin contract.
type IRollupAdminOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*IRollupAdminOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminOwnerFunctionCalledIterator{contract: _IRollupAdmin.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *IRollupAdminOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminOwnerFunctionCalled)
				if err := _IRollupAdmin.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) ParseOwnerFunctionCalled(log types.Log) (*IRollupAdminOwnerFunctionCalled, error) {
	event := new(IRollupAdminOwnerFunctionCalled)
	if err := _IRollupAdmin.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreMetaData contains all meta data concerning the IRollupCore contract.
var IRollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNodeCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupCoreMetaData.ABI instead.
var IRollupCoreABI = IRollupCoreMetaData.ABI

// IRollupCore is an auto generated Go binding around an Ethereum contract.
type IRollupCore struct {
	IRollupCoreCaller     // Read-only binding to the contract
	IRollupCoreTransactor // Write-only binding to the contract
	IRollupCoreFilterer   // Log filterer for contract events
}

// IRollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupCoreSession struct {
	Contract     *IRollupCore      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupCoreCallerSession struct {
	Contract *IRollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupCoreTransactorSession struct {
	Contract     *IRollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupCoreRaw struct {
	Contract *IRollupCore // Generic contract binding to access the raw methods on
}

// IRollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupCoreCallerRaw struct {
	Contract *IRollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupCoreTransactorRaw struct {
	Contract *IRollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupCore creates a new instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCore(address common.Address, backend bind.ContractBackend) (*IRollupCore, error) {
	contract, err := bindIRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupCore{IRollupCoreCaller: IRollupCoreCaller{contract: contract}, IRollupCoreTransactor: IRollupCoreTransactor{contract: contract}, IRollupCoreFilterer: IRollupCoreFilterer{contract: contract}}, nil
}

// NewIRollupCoreCaller creates a new read-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*IRollupCoreCaller, error) {
	contract, err := bindIRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreCaller{contract: contract}, nil
}

// NewIRollupCoreTransactor creates a new write-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupCoreTransactor, error) {
	contract, err := bindIRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreTransactor{contract: contract}, nil
}

// NewIRollupCoreFilterer creates a new log filterer instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupCoreFilterer, error) {
	contract, err := bindIRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreFilterer{contract: contract}, nil
}

// bindIRollupCore binds a generic wrapper to an already deployed contract.
func bindIRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupCoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.IRollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreSession) ChallengeManager() (common.Address, error) {
	return _IRollupCore.Contract.ChallengeManager(&_IRollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupCore.Contract.ChallengeManager(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupCore.Contract.CurrentChallenge(&_IRollupCore.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupCore.Contract.CurrentChallenge(&_IRollupCore.CallOpts, staker)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupCore.Contract.ExtraChallengeTimeBlocks(&_IRollupCore.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupCore.Contract.ExtraChallengeTimeBlocks(&_IRollupCore.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupCore.Contract.FirstUnresolvedNode(&_IRollupCore.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupCore.Contract.FirstUnresolvedNode(&_IRollupCore.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupCore *IRollupCoreCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupCore *IRollupCoreSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupCore.Contract.GetNode(&_IRollupCore.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupCore *IRollupCoreCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupCore.Contract.GetNode(&_IRollupCore.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) GetNodeCreationBlockForLogLookup(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getNodeCreationBlockForLogLookup", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _IRollupCore.Contract.GetNodeCreationBlockForLogLookup(&_IRollupCore.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _IRollupCore.Contract.GetNodeCreationBlockForLogLookup(&_IRollupCore.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupCore *IRollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupCore *IRollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupCore *IRollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsZombie(&_IRollupCore.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsZombie(&_IRollupCore.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) LastStakeBlock() (uint64, error) {
	return _IRollupCore.Contract.LastStakeBlock(&_IRollupCore.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) LastStakeBlock() (uint64, error) {
	return _IRollupCore.Contract.LastStakeBlock(&_IRollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) LatestConfirmed() (uint64, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) LatestConfirmed() (uint64, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) LatestNodeCreated() (uint64, error) {
	return _IRollupCore.Contract.LatestNodeCreated(&_IRollupCore.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) LatestNodeCreated() (uint64, error) {
	return _IRollupCore.Contract.LatestNodeCreated(&_IRollupCore.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupCore.Contract.LatestStakedNode(&_IRollupCore.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupCore.Contract.LatestStakedNode(&_IRollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupCore *IRollupCoreSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupCore.Contract.NodeHasStaker(&_IRollupCore.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupCore.Contract.NodeHasStaker(&_IRollupCore.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupCore *IRollupCoreCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupCore *IRollupCoreSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupCore.Contract.ZombieAddress(&_IRollupCore.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupCore.Contract.ZombieAddress(&_IRollupCore.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) ZombieCount() (*big.Int, error) {
	return _IRollupCore.Contract.ZombieCount(&_IRollupCore.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) ZombieCount() (*big.Int, error) {
	return _IRollupCore.Contract.ZombieCount(&_IRollupCore.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupCore.Contract.ZombieLatestStakedNode(&_IRollupCore.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupCore.Contract.ZombieLatestStakedNode(&_IRollupCore.CallOpts, zombieNum)
}

// IRollupCoreNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the IRollupCore contract.
type IRollupCoreNodeConfirmedIterator struct {
	Event *IRollupCoreNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreNodeConfirmed represents a NodeConfirmed event raised by the IRollupCore contract.
type IRollupCoreNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupCoreNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreNodeConfirmedIterator{contract: _IRollupCore.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupCoreNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreNodeConfirmed)
				if err := _IRollupCore.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) ParseNodeConfirmed(log types.Log) (*IRollupCoreNodeConfirmed, error) {
	event := new(IRollupCoreNodeConfirmed)
	if err := _IRollupCore.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IRollupCore contract.
type IRollupCoreNodeCreatedIterator struct {
	Event *IRollupCoreNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreNodeCreated represents a NodeCreated event raised by the IRollupCore contract.
type IRollupCoreNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          Assertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupCore *IRollupCoreFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IRollupCoreNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreNodeCreatedIterator{contract: _IRollupCore.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupCore *IRollupCoreFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IRollupCoreNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreNodeCreated)
				if err := _IRollupCore.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupCore *IRollupCoreFilterer) ParseNodeCreated(log types.Log) (*IRollupCoreNodeCreated, error) {
	event := new(IRollupCoreNodeCreated)
	if err := _IRollupCore.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the IRollupCore contract.
type IRollupCoreNodeRejectedIterator struct {
	Event *IRollupCoreNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreNodeRejected represents a NodeRejected event raised by the IRollupCore contract.
type IRollupCoreNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupCore *IRollupCoreFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupCoreNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreNodeRejectedIterator{contract: _IRollupCore.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupCore *IRollupCoreFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *IRollupCoreNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreNodeRejected)
				if err := _IRollupCore.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupCore *IRollupCoreFilterer) ParseNodeRejected(log types.Log) (*IRollupCoreNodeRejected, error) {
	event := new(IRollupCoreNodeRejected)
	if err := _IRollupCore.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStartedIterator struct {
	Event *IRollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupChallengeStartedIterator{contract: _IRollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupChallengeStarted)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupCoreRollupChallengeStarted, error) {
	event := new(IRollupCoreRollupChallengeStarted)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupCore contract.
type IRollupCoreRollupInitializedIterator struct {
	Event *IRollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupInitialized represents a RollupInitialized event raised by the IRollupCore contract.
type IRollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupInitializedIterator{contract: _IRollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupInitialized)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupInitialized(log types.Log) (*IRollupCoreRollupInitialized, error) {
	event := new(IRollupCoreRollupInitialized)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdatedIterator struct {
	Event *IRollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserStakeUpdatedIterator{contract: _IRollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserStakeUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupCoreUserStakeUpdated, error) {
	event := new(IRollupCoreUserStakeUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserWithdrawableFundsUpdatedIterator{contract: _IRollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserWithdrawableFundsUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(IRollupCoreUserWithdrawableFundsUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupEventInboxMetaData contains all meta data concerning the IRollupEventInbox contract.
var IRollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupEventInboxMetaData.ABI instead.
var IRollupEventInboxABI = IRollupEventInboxMetaData.ABI

// IRollupEventInbox is an auto generated Go binding around an Ethereum contract.
type IRollupEventInbox struct {
	IRollupEventInboxCaller     // Read-only binding to the contract
	IRollupEventInboxTransactor // Write-only binding to the contract
	IRollupEventInboxFilterer   // Log filterer for contract events
}

// IRollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupEventInboxSession struct {
	Contract     *IRollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IRollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupEventInboxCallerSession struct {
	Contract *IRollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IRollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupEventInboxTransactorSession struct {
	Contract     *IRollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IRollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupEventInboxRaw struct {
	Contract *IRollupEventInbox // Generic contract binding to access the raw methods on
}

// IRollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupEventInboxCallerRaw struct {
	Contract *IRollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactorRaw struct {
	Contract *IRollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupEventInbox creates a new instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInbox(address common.Address, backend bind.ContractBackend) (*IRollupEventInbox, error) {
	contract, err := bindIRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInbox{IRollupEventInboxCaller: IRollupEventInboxCaller{contract: contract}, IRollupEventInboxTransactor: IRollupEventInboxTransactor{contract: contract}, IRollupEventInboxFilterer: IRollupEventInboxFilterer{contract: contract}}, nil
}

// NewIRollupEventInboxCaller creates a new read-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*IRollupEventInboxCaller, error) {
	contract, err := bindIRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxCaller{contract: contract}, nil
}

// NewIRollupEventInboxTransactor creates a new write-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupEventInboxTransactor, error) {
	contract, err := bindIRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxTransactor{contract: contract}, nil
}

// NewIRollupEventInboxFilterer creates a new log filterer instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupEventInboxFilterer, error) {
	contract, err := bindIRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxFilterer{contract: contract}, nil
}

// bindIRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindIRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.IRollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.UpdateRollupAddress(&_IRollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.UpdateRollupAddress(&_IRollupEventInbox.TransactOpts)
}

// IRollupUserMetaData contains all meta data concerning the IRollupUser contract.
var IRollupUserMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedTimes\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNodeCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"newStakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupUserABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupUserMetaData.ABI instead.
var IRollupUserABI = IRollupUserMetaData.ABI

// IRollupUser is an auto generated Go binding around an Ethereum contract.
type IRollupUser struct {
	IRollupUserCaller     // Read-only binding to the contract
	IRollupUserTransactor // Write-only binding to the contract
	IRollupUserFilterer   // Log filterer for contract events
}

// IRollupUserCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupUserCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupUserTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupUserFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupUserSession struct {
	Contract     *IRollupUser      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupUserCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupUserCallerSession struct {
	Contract *IRollupUserCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupUserTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupUserTransactorSession struct {
	Contract     *IRollupUserTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupUserRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupUserRaw struct {
	Contract *IRollupUser // Generic contract binding to access the raw methods on
}

// IRollupUserCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupUserCallerRaw struct {
	Contract *IRollupUserCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupUserTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupUserTransactorRaw struct {
	Contract *IRollupUserTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupUser creates a new instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUser(address common.Address, backend bind.ContractBackend) (*IRollupUser, error) {
	contract, err := bindIRollupUser(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupUser{IRollupUserCaller: IRollupUserCaller{contract: contract}, IRollupUserTransactor: IRollupUserTransactor{contract: contract}, IRollupUserFilterer: IRollupUserFilterer{contract: contract}}, nil
}

// NewIRollupUserCaller creates a new read-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserCaller(address common.Address, caller bind.ContractCaller) (*IRollupUserCaller, error) {
	contract, err := bindIRollupUser(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserCaller{contract: contract}, nil
}

// NewIRollupUserTransactor creates a new write-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupUserTransactor, error) {
	contract, err := bindIRollupUser(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserTransactor{contract: contract}, nil
}

// NewIRollupUserFilterer creates a new log filterer instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupUserFilterer, error) {
	contract, err := bindIRollupUser(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupUserFilterer{contract: contract}, nil
}

// bindIRollupUser binds a generic wrapper to an already deployed contract.
func bindIRollupUser(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupUserMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.IRollupUserCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserSession) ChallengeManager() (common.Address, error) {
	return _IRollupUser.Contract.ChallengeManager(&_IRollupUser.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupUser.Contract.ChallengeManager(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUser.Contract.CountStakedZombies(&_IRollupUser.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUser.Contract.CountStakedZombies(&_IRollupUser.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUser.Contract.CountZombiesStakedOnChildren(&_IRollupUser.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUser.Contract.CountZombiesStakedOnChildren(&_IRollupUser.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUser.Contract.CurrentChallenge(&_IRollupUser.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUser.Contract.CurrentChallenge(&_IRollupUser.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUser *IRollupUserSession) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUser.Contract.CurrentRequiredStake(&_IRollupUser.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUser.Contract.CurrentRequiredStake(&_IRollupUser.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUser.Contract.ExtraChallengeTimeBlocks(&_IRollupUser.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUser.Contract.ExtraChallengeTimeBlocks(&_IRollupUser.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUser *IRollupUserSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUser.Contract.FirstUnresolvedNode(&_IRollupUser.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUser.Contract.FirstUnresolvedNode(&_IRollupUser.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUser *IRollupUserCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUser *IRollupUserSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUser.Contract.GetNode(&_IRollupUser.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUser *IRollupUserCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUser.Contract.GetNode(&_IRollupUser.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) GetNodeCreationBlockForLogLookup(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getNodeCreationBlockForLogLookup", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _IRollupUser.Contract.GetNodeCreationBlockForLogLookup(&_IRollupUser.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _IRollupUser.Contract.GetNodeCreationBlockForLogLookup(&_IRollupUser.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUser *IRollupUserCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUser *IRollupUserSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUser *IRollupUserCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCaller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCallerSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUser *IRollupUserSession) IsERC20Enabled() (bool, error) {
	return _IRollupUser.Contract.IsERC20Enabled(&_IRollupUser.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsERC20Enabled() (bool, error) {
	return _IRollupUser.Contract.IsERC20Enabled(&_IRollupUser.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsZombie(&_IRollupUser.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsZombie(&_IRollupUser.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUser *IRollupUserSession) LastStakeBlock() (uint64, error) {
	return _IRollupUser.Contract.LastStakeBlock(&_IRollupUser.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) LastStakeBlock() (uint64, error) {
	return _IRollupUser.Contract.LastStakeBlock(&_IRollupUser.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUser *IRollupUserSession) LatestConfirmed() (uint64, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) LatestConfirmed() (uint64, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUser *IRollupUserSession) LatestNodeCreated() (uint64, error) {
	return _IRollupUser.Contract.LatestNodeCreated(&_IRollupUser.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) LatestNodeCreated() (uint64, error) {
	return _IRollupUser.Contract.LatestNodeCreated(&_IRollupUser.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUser.Contract.LatestStakedNode(&_IRollupUser.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUser.Contract.LatestStakedNode(&_IRollupUser.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUser *IRollupUserCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUser *IRollupUserSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUser.Contract.NodeHasStaker(&_IRollupUser.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUser.Contract.NodeHasStaker(&_IRollupUser.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUser *IRollupUserCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUser *IRollupUserSession) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUser.Contract.RequireUnresolved(&_IRollupUser.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUser *IRollupUserCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUser.Contract.RequireUnresolved(&_IRollupUser.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUser *IRollupUserCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUser *IRollupUserSession) RequireUnresolvedExists() error {
	return _IRollupUser.Contract.RequireUnresolvedExists(&_IRollupUser.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUser *IRollupUserCallerSession) RequireUnresolvedExists() error {
	return _IRollupUser.Contract.RequireUnresolvedExists(&_IRollupUser.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUser *IRollupUserSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUser.Contract.RequiredStake(&_IRollupUser.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUser.Contract.RequiredStake(&_IRollupUser.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUser *IRollupUserCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUser *IRollupUserSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUser.Contract.ZombieAddress(&_IRollupUser.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUser *IRollupUserCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUser.Contract.ZombieAddress(&_IRollupUser.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUser *IRollupUserSession) ZombieCount() (*big.Int, error) {
	return _IRollupUser.Contract.ZombieCount(&_IRollupUser.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) ZombieCount() (*big.Int, error) {
	return _IRollupUser.Contract.ZombieCount(&_IRollupUser.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUser *IRollupUserSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUser.Contract.ZombieLatestStakedNode(&_IRollupUser.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUser.Contract.ZombieLatestStakedNode(&_IRollupUser.CallOpts, zombieNum)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_IRollupUser *IRollupUserTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "addToDeposit", stakerAddress)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_IRollupUser *IRollupUserSession) AddToDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_IRollupUser *IRollupUserTransactorSession) AddToDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUser *IRollupUserTransactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUser *IRollupUserSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmNextNode(&_IRollupUser.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUser *IRollupUserTransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmNextNode(&_IRollupUser.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUser *IRollupUserTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUser *IRollupUserSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.CreateChallenge(&_IRollupUser.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUser *IRollupUserTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.CreateChallenge(&_IRollupUser.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_IRollupUser *IRollupUserTransactor) NewStakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStakeOnExistingNode", nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_IRollupUser *IRollupUserSession) NewStakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnExistingNode(&_IRollupUser.TransactOpts, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnExistingNode(&_IRollupUser.TransactOpts, nodeNum, nodeHash)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_IRollupUser *IRollupUserTransactor) NewStakeOnNewNode(opts *bind.TransactOpts, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_IRollupUser *IRollupUserSession) NewStakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewNode(&_IRollupUser.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewNode(&_IRollupUser.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUser *IRollupUserTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUser *IRollupUserSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.RejectNextNode(&_IRollupUser.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUser *IRollupUserTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.RejectNextNode(&_IRollupUser.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUser *IRollupUserTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUser *IRollupUserSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveOldZombies(&_IRollupUser.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveOldZombies(&_IRollupUser.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUser *IRollupUserTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUser *IRollupUserSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveZombie(&_IRollupUser.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveZombie(&_IRollupUser.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUser *IRollupUserTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUser *IRollupUserSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUser *IRollupUserTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUser *IRollupUserTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUser *IRollupUserSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnExistingNode(&_IRollupUser.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUser *IRollupUserTransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnExistingNode(&_IRollupUser.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUser *IRollupUserTransactor) StakeOnNewNode(opts *bind.TransactOpts, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUser *IRollupUserSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewNode(&_IRollupUser.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUser *IRollupUserTransactorSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewNode(&_IRollupUser.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// IRollupUserNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the IRollupUser contract.
type IRollupUserNodeConfirmedIterator struct {
	Event *IRollupUserNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserNodeConfirmed represents a NodeConfirmed event raised by the IRollupUser contract.
type IRollupUserNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserNodeConfirmedIterator{contract: _IRollupUser.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupUserNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserNodeConfirmed)
				if err := _IRollupUser.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) ParseNodeConfirmed(log types.Log) (*IRollupUserNodeConfirmed, error) {
	event := new(IRollupUserNodeConfirmed)
	if err := _IRollupUser.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IRollupUser contract.
type IRollupUserNodeCreatedIterator struct {
	Event *IRollupUserNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserNodeCreated represents a NodeCreated event raised by the IRollupUser contract.
type IRollupUserNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          Assertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUser *IRollupUserFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IRollupUserNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserNodeCreatedIterator{contract: _IRollupUser.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUser *IRollupUserFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IRollupUserNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserNodeCreated)
				if err := _IRollupUser.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUser *IRollupUserFilterer) ParseNodeCreated(log types.Log) (*IRollupUserNodeCreated, error) {
	event := new(IRollupUserNodeCreated)
	if err := _IRollupUser.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the IRollupUser contract.
type IRollupUserNodeRejectedIterator struct {
	Event *IRollupUserNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserNodeRejected represents a NodeRejected event raised by the IRollupUser contract.
type IRollupUserNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUser *IRollupUserFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserNodeRejectedIterator{contract: _IRollupUser.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUser *IRollupUserFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *IRollupUserNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserNodeRejected)
				if err := _IRollupUser.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUser *IRollupUserFilterer) ParseNodeRejected(log types.Log) (*IRollupUserNodeRejected, error) {
	event := new(IRollupUserNodeRejected)
	if err := _IRollupUser.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupUser contract.
type IRollupUserRollupChallengeStartedIterator struct {
	Event *IRollupUserRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupUser contract.
type IRollupUserRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUser *IRollupUserFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupUserRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupChallengeStartedIterator{contract: _IRollupUser.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUser *IRollupUserFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupChallengeStarted)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUser *IRollupUserFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupUserRollupChallengeStarted, error) {
	event := new(IRollupUserRollupChallengeStarted)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupUser contract.
type IRollupUserRollupInitializedIterator struct {
	Event *IRollupUserRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupInitialized represents a RollupInitialized event raised by the IRollupUser contract.
type IRollupUserRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupUserRollupInitializedIterator, error) {

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupInitializedIterator{contract: _IRollupUser.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupInitialized)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) ParseRollupInitialized(log types.Log) (*IRollupUserRollupInitialized, error) {
	event := new(IRollupUserRollupInitialized)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupUser contract.
type IRollupUserUserStakeUpdatedIterator struct {
	Event *IRollupUserUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupUser contract.
type IRollupUserUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserStakeUpdatedIterator{contract: _IRollupUser.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserStakeUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupUserUserStakeUpdated, error) {
	event := new(IRollupUserUserStakeUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupUserUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserWithdrawableFundsUpdatedIterator{contract: _IRollupUser.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserWithdrawableFundsUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupUserUserWithdrawableFundsUpdated, error) {
	event := new(IRollupUserUserWithdrawableFundsUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsMetaData contains all meta data concerning the IRollupUserAbs contract.
var IRollupUserAbsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedTimes\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNodeCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupUserAbsABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupUserAbsMetaData.ABI instead.
var IRollupUserAbsABI = IRollupUserAbsMetaData.ABI

// IRollupUserAbs is an auto generated Go binding around an Ethereum contract.
type IRollupUserAbs struct {
	IRollupUserAbsCaller     // Read-only binding to the contract
	IRollupUserAbsTransactor // Write-only binding to the contract
	IRollupUserAbsFilterer   // Log filterer for contract events
}

// IRollupUserAbsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupUserAbsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserAbsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupUserAbsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserAbsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupUserAbsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserAbsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupUserAbsSession struct {
	Contract     *IRollupUserAbs   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupUserAbsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupUserAbsCallerSession struct {
	Contract *IRollupUserAbsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IRollupUserAbsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupUserAbsTransactorSession struct {
	Contract     *IRollupUserAbsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IRollupUserAbsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupUserAbsRaw struct {
	Contract *IRollupUserAbs // Generic contract binding to access the raw methods on
}

// IRollupUserAbsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupUserAbsCallerRaw struct {
	Contract *IRollupUserAbsCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupUserAbsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupUserAbsTransactorRaw struct {
	Contract *IRollupUserAbsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupUserAbs creates a new instance of IRollupUserAbs, bound to a specific deployed contract.
func NewIRollupUserAbs(address common.Address, backend bind.ContractBackend) (*IRollupUserAbs, error) {
	contract, err := bindIRollupUserAbs(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbs{IRollupUserAbsCaller: IRollupUserAbsCaller{contract: contract}, IRollupUserAbsTransactor: IRollupUserAbsTransactor{contract: contract}, IRollupUserAbsFilterer: IRollupUserAbsFilterer{contract: contract}}, nil
}

// NewIRollupUserAbsCaller creates a new read-only instance of IRollupUserAbs, bound to a specific deployed contract.
func NewIRollupUserAbsCaller(address common.Address, caller bind.ContractCaller) (*IRollupUserAbsCaller, error) {
	contract, err := bindIRollupUserAbs(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsCaller{contract: contract}, nil
}

// NewIRollupUserAbsTransactor creates a new write-only instance of IRollupUserAbs, bound to a specific deployed contract.
func NewIRollupUserAbsTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupUserAbsTransactor, error) {
	contract, err := bindIRollupUserAbs(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsTransactor{contract: contract}, nil
}

// NewIRollupUserAbsFilterer creates a new log filterer instance of IRollupUserAbs, bound to a specific deployed contract.
func NewIRollupUserAbsFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupUserAbsFilterer, error) {
	contract, err := bindIRollupUserAbs(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsFilterer{contract: contract}, nil
}

// bindIRollupUserAbs binds a generic wrapper to an already deployed contract.
func bindIRollupUserAbs(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupUserAbsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUserAbs *IRollupUserAbsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUserAbs.Contract.IRollupUserAbsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUserAbs *IRollupUserAbsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.IRollupUserAbsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUserAbs *IRollupUserAbsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.IRollupUserAbsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUserAbs *IRollupUserAbsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUserAbs.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUserAbs *IRollupUserAbsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUserAbs *IRollupUserAbsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUserAbs.Contract.AmountStaked(&_IRollupUserAbs.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUserAbs.Contract.AmountStaked(&_IRollupUserAbs.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) BaseStake() (*big.Int, error) {
	return _IRollupUserAbs.Contract.BaseStake(&_IRollupUserAbs.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupUserAbs.Contract.BaseStake(&_IRollupUserAbs.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) Bridge() (common.Address, error) {
	return _IRollupUserAbs.Contract.Bridge(&_IRollupUserAbs.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) Bridge() (common.Address, error) {
	return _IRollupUserAbs.Contract.Bridge(&_IRollupUserAbs.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) ChainId() (*big.Int, error) {
	return _IRollupUserAbs.Contract.ChainId(&_IRollupUserAbs.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ChainId() (*big.Int, error) {
	return _IRollupUserAbs.Contract.ChainId(&_IRollupUserAbs.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) ChallengeManager() (common.Address, error) {
	return _IRollupUserAbs.Contract.ChallengeManager(&_IRollupUserAbs.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupUserAbs.Contract.ChallengeManager(&_IRollupUserAbs.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUserAbs.Contract.ConfirmPeriodBlocks(&_IRollupUserAbs.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUserAbs.Contract.ConfirmPeriodBlocks(&_IRollupUserAbs.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.CountStakedZombies(&_IRollupUserAbs.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.CountStakedZombies(&_IRollupUserAbs.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.CountZombiesStakedOnChildren(&_IRollupUserAbs.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.CountZombiesStakedOnChildren(&_IRollupUserAbs.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUserAbs.Contract.CurrentChallenge(&_IRollupUserAbs.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUserAbs.Contract.CurrentChallenge(&_IRollupUserAbs.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUserAbs.Contract.CurrentRequiredStake(&_IRollupUserAbs.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUserAbs.Contract.CurrentRequiredStake(&_IRollupUserAbs.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUserAbs.Contract.ExtraChallengeTimeBlocks(&_IRollupUserAbs.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUserAbs.Contract.ExtraChallengeTimeBlocks(&_IRollupUserAbs.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUserAbs.Contract.FirstUnresolvedNode(&_IRollupUserAbs.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUserAbs.Contract.FirstUnresolvedNode(&_IRollupUserAbs.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserAbs *IRollupUserAbsCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserAbs *IRollupUserAbsSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUserAbs.Contract.GetNode(&_IRollupUserAbs.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserAbs *IRollupUserAbsCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUserAbs.Contract.GetNode(&_IRollupUserAbs.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) GetNodeCreationBlockForLogLookup(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "getNodeCreationBlockForLogLookup", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.GetNodeCreationBlockForLogLookup(&_IRollupUserAbs.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.GetNodeCreationBlockForLogLookup(&_IRollupUserAbs.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserAbs *IRollupUserAbsCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserAbs *IRollupUserAbsSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUserAbs.Contract.GetStaker(&_IRollupUserAbs.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserAbs *IRollupUserAbsCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUserAbs.Contract.GetStaker(&_IRollupUserAbs.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUserAbs.Contract.GetStakerAddress(&_IRollupUserAbs.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUserAbs.Contract.GetStakerAddress(&_IRollupUserAbs.CallOpts, stakerNum)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserAbs *IRollupUserAbsCaller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserAbs *IRollupUserAbsSession) Initialize(stakeToken common.Address) error {
	return _IRollupUserAbs.Contract.Initialize(&_IRollupUserAbs.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserAbs *IRollupUserAbsCallerSession) Initialize(stakeToken common.Address) error {
	return _IRollupUserAbs.Contract.Initialize(&_IRollupUserAbs.CallOpts, stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) IsERC20Enabled() (bool, error) {
	return _IRollupUserAbs.Contract.IsERC20Enabled(&_IRollupUserAbs.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) IsERC20Enabled() (bool, error) {
	return _IRollupUserAbs.Contract.IsERC20Enabled(&_IRollupUserAbs.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsStaked(&_IRollupUserAbs.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsStaked(&_IRollupUserAbs.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsValidator(&_IRollupUserAbs.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsValidator(&_IRollupUserAbs.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsZombie(&_IRollupUserAbs.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsZombie(&_IRollupUserAbs.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) LastStakeBlock() (uint64, error) {
	return _IRollupUserAbs.Contract.LastStakeBlock(&_IRollupUserAbs.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) LastStakeBlock() (uint64, error) {
	return _IRollupUserAbs.Contract.LastStakeBlock(&_IRollupUserAbs.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) LatestConfirmed() (uint64, error) {
	return _IRollupUserAbs.Contract.LatestConfirmed(&_IRollupUserAbs.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) LatestConfirmed() (uint64, error) {
	return _IRollupUserAbs.Contract.LatestConfirmed(&_IRollupUserAbs.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) LatestNodeCreated() (uint64, error) {
	return _IRollupUserAbs.Contract.LatestNodeCreated(&_IRollupUserAbs.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) LatestNodeCreated() (uint64, error) {
	return _IRollupUserAbs.Contract.LatestNodeCreated(&_IRollupUserAbs.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUserAbs.Contract.LatestStakedNode(&_IRollupUserAbs.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUserAbs.Contract.LatestStakedNode(&_IRollupUserAbs.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUserAbs.Contract.LoserStakeEscrow(&_IRollupUserAbs.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUserAbs.Contract.LoserStakeEscrow(&_IRollupUserAbs.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUserAbs.Contract.MinimumAssertionPeriod(&_IRollupUserAbs.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUserAbs.Contract.MinimumAssertionPeriod(&_IRollupUserAbs.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.NodeHasStaker(&_IRollupUserAbs.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.NodeHasStaker(&_IRollupUserAbs.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) Outbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.Outbox(&_IRollupUserAbs.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) Outbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.Outbox(&_IRollupUserAbs.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) Owner() (common.Address, error) {
	return _IRollupUserAbs.Contract.Owner(&_IRollupUserAbs.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) Owner() (common.Address, error) {
	return _IRollupUserAbs.Contract.Owner(&_IRollupUserAbs.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserAbs *IRollupUserAbsCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUserAbs.Contract.RequireUnresolved(&_IRollupUserAbs.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserAbs *IRollupUserAbsCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUserAbs.Contract.RequireUnresolved(&_IRollupUserAbs.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserAbs *IRollupUserAbsCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RequireUnresolvedExists() error {
	return _IRollupUserAbs.Contract.RequireUnresolvedExists(&_IRollupUserAbs.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserAbs *IRollupUserAbsCallerSession) RequireUnresolvedExists() error {
	return _IRollupUserAbs.Contract.RequireUnresolvedExists(&_IRollupUserAbs.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.RequiredStake(&_IRollupUserAbs.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.RequiredStake(&_IRollupUserAbs.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.RollupEventInbox(&_IRollupUserAbs.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.RollupEventInbox(&_IRollupUserAbs.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) SequencerInbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.SequencerInbox(&_IRollupUserAbs.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.SequencerInbox(&_IRollupUserAbs.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) StakeToken() (common.Address, error) {
	return _IRollupUserAbs.Contract.StakeToken(&_IRollupUserAbs.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) StakeToken() (common.Address, error) {
	return _IRollupUserAbs.Contract.StakeToken(&_IRollupUserAbs.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) StakerCount() (uint64, error) {
	return _IRollupUserAbs.Contract.StakerCount(&_IRollupUserAbs.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) StakerCount() (uint64, error) {
	return _IRollupUserAbs.Contract.StakerCount(&_IRollupUserAbs.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUserAbs.Contract.ValidatorWhitelistDisabled(&_IRollupUserAbs.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUserAbs.Contract.ValidatorWhitelistDisabled(&_IRollupUserAbs.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserAbs *IRollupUserAbsCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserAbs *IRollupUserAbsSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUserAbs.Contract.WasmModuleRoot(&_IRollupUserAbs.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUserAbs.Contract.WasmModuleRoot(&_IRollupUserAbs.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUserAbs.Contract.WithdrawableFunds(&_IRollupUserAbs.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUserAbs.Contract.WithdrawableFunds(&_IRollupUserAbs.CallOpts, owner)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUserAbs.Contract.ZombieAddress(&_IRollupUserAbs.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUserAbs.Contract.ZombieAddress(&_IRollupUserAbs.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) ZombieCount() (*big.Int, error) {
	return _IRollupUserAbs.Contract.ZombieCount(&_IRollupUserAbs.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ZombieCount() (*big.Int, error) {
	return _IRollupUserAbs.Contract.ZombieCount(&_IRollupUserAbs.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUserAbs.Contract.ZombieLatestStakedNode(&_IRollupUserAbs.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUserAbs.Contract.ZombieLatestStakedNode(&_IRollupUserAbs.CallOpts, zombieNum)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ConfirmNextNode(&_IRollupUserAbs.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ConfirmNextNode(&_IRollupUserAbs.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.CreateChallenge(&_IRollupUserAbs.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.CreateChallenge(&_IRollupUserAbs.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ReduceDeposit(&_IRollupUserAbs.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ReduceDeposit(&_IRollupUserAbs.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RejectNextNode(&_IRollupUserAbs.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RejectNextNode(&_IRollupUserAbs.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveOldZombies(&_IRollupUserAbs.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveOldZombies(&_IRollupUserAbs.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveWhitelistAfterFork(&_IRollupUserAbs.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveWhitelistAfterFork(&_IRollupUserAbs.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUserAbs.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUserAbs.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveZombie(&_IRollupUserAbs.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveZombie(&_IRollupUserAbs.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ReturnOldDeposit(&_IRollupUserAbs.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ReturnOldDeposit(&_IRollupUserAbs.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.StakeOnExistingNode(&_IRollupUserAbs.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.StakeOnExistingNode(&_IRollupUserAbs.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) StakeOnNewNode(opts *bind.TransactOpts, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.StakeOnNewNode(&_IRollupUserAbs.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.StakeOnNewNode(&_IRollupUserAbs.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.WithdrawStakerFunds(&_IRollupUserAbs.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.WithdrawStakerFunds(&_IRollupUserAbs.TransactOpts)
}

// IRollupUserAbsNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeConfirmedIterator struct {
	Event *IRollupUserAbsNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsNodeConfirmed represents a NodeConfirmed event raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserAbsNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsNodeConfirmedIterator{contract: _IRollupUserAbs.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsNodeConfirmed)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseNodeConfirmed(log types.Log) (*IRollupUserAbsNodeConfirmed, error) {
	event := new(IRollupUserAbsNodeConfirmed)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeCreatedIterator struct {
	Event *IRollupUserAbsNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsNodeCreated represents a NodeCreated event raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          Assertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IRollupUserAbsNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsNodeCreatedIterator{contract: _IRollupUserAbs.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsNodeCreated)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseNodeCreated(log types.Log) (*IRollupUserAbsNodeCreated, error) {
	event := new(IRollupUserAbsNodeCreated)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeRejectedIterator struct {
	Event *IRollupUserAbsNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsNodeRejected represents a NodeRejected event raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserAbsNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsNodeRejectedIterator{contract: _IRollupUserAbs.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsNodeRejected)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseNodeRejected(log types.Log) (*IRollupUserAbsNodeRejected, error) {
	event := new(IRollupUserAbsNodeRejected)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupUserAbs contract.
type IRollupUserAbsRollupChallengeStartedIterator struct {
	Event *IRollupUserAbsRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupUserAbs contract.
type IRollupUserAbsRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupUserAbsRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsRollupChallengeStartedIterator{contract: _IRollupUserAbs.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsRollupChallengeStarted)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupUserAbsRollupChallengeStarted, error) {
	event := new(IRollupUserAbsRollupChallengeStarted)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupUserAbs contract.
type IRollupUserAbsRollupInitializedIterator struct {
	Event *IRollupUserAbsRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsRollupInitialized represents a RollupInitialized event raised by the IRollupUserAbs contract.
type IRollupUserAbsRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupUserAbsRollupInitializedIterator, error) {

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsRollupInitializedIterator{contract: _IRollupUserAbs.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsRollupInitialized)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseRollupInitialized(log types.Log) (*IRollupUserAbsRollupInitialized, error) {
	event := new(IRollupUserAbsRollupInitialized)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupUserAbs contract.
type IRollupUserAbsUserStakeUpdatedIterator struct {
	Event *IRollupUserAbsUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupUserAbs contract.
type IRollupUserAbsUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserAbsUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsUserStakeUpdatedIterator{contract: _IRollupUserAbs.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsUserStakeUpdated)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupUserAbsUserStakeUpdated, error) {
	event := new(IRollupUserAbsUserStakeUpdated)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupUserAbs contract.
type IRollupUserAbsUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupUserAbsUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupUserAbs contract.
type IRollupUserAbsUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserAbsUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsUserWithdrawableFundsUpdatedIterator{contract: _IRollupUserAbs.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsUserWithdrawableFundsUpdated)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupUserAbsUserWithdrawableFundsUpdated, error) {
	event := new(IRollupUserAbsUserWithdrawableFundsUpdated)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20MetaData contains all meta data concerning the IRollupUserERC20 contract.
var IRollupUserERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedTimes\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNodeCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"newStakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupUserERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupUserERC20MetaData.ABI instead.
var IRollupUserERC20ABI = IRollupUserERC20MetaData.ABI

// IRollupUserERC20 is an auto generated Go binding around an Ethereum contract.
type IRollupUserERC20 struct {
	IRollupUserERC20Caller     // Read-only binding to the contract
	IRollupUserERC20Transactor // Write-only binding to the contract
	IRollupUserERC20Filterer   // Log filterer for contract events
}

// IRollupUserERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupUserERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupUserERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupUserERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupUserERC20Session struct {
	Contract     *IRollupUserERC20 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupUserERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupUserERC20CallerSession struct {
	Contract *IRollupUserERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// IRollupUserERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupUserERC20TransactorSession struct {
	Contract     *IRollupUserERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IRollupUserERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupUserERC20Raw struct {
	Contract *IRollupUserERC20 // Generic contract binding to access the raw methods on
}

// IRollupUserERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupUserERC20CallerRaw struct {
	Contract *IRollupUserERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IRollupUserERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupUserERC20TransactorRaw struct {
	Contract *IRollupUserERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupUserERC20 creates a new instance of IRollupUserERC20, bound to a specific deployed contract.
func NewIRollupUserERC20(address common.Address, backend bind.ContractBackend) (*IRollupUserERC20, error) {
	contract, err := bindIRollupUserERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20{IRollupUserERC20Caller: IRollupUserERC20Caller{contract: contract}, IRollupUserERC20Transactor: IRollupUserERC20Transactor{contract: contract}, IRollupUserERC20Filterer: IRollupUserERC20Filterer{contract: contract}}, nil
}

// NewIRollupUserERC20Caller creates a new read-only instance of IRollupUserERC20, bound to a specific deployed contract.
func NewIRollupUserERC20Caller(address common.Address, caller bind.ContractCaller) (*IRollupUserERC20Caller, error) {
	contract, err := bindIRollupUserERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20Caller{contract: contract}, nil
}

// NewIRollupUserERC20Transactor creates a new write-only instance of IRollupUserERC20, bound to a specific deployed contract.
func NewIRollupUserERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IRollupUserERC20Transactor, error) {
	contract, err := bindIRollupUserERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20Transactor{contract: contract}, nil
}

// NewIRollupUserERC20Filterer creates a new log filterer instance of IRollupUserERC20, bound to a specific deployed contract.
func NewIRollupUserERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IRollupUserERC20Filterer, error) {
	contract, err := bindIRollupUserERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20Filterer{contract: contract}, nil
}

// bindIRollupUserERC20 binds a generic wrapper to an already deployed contract.
func bindIRollupUserERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupUserERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUserERC20 *IRollupUserERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUserERC20.Contract.IRollupUserERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUserERC20 *IRollupUserERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.IRollupUserERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUserERC20 *IRollupUserERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.IRollupUserERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUserERC20 *IRollupUserERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUserERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUserERC20 *IRollupUserERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUserERC20 *IRollupUserERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUserERC20.Contract.AmountStaked(&_IRollupUserERC20.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUserERC20.Contract.AmountStaked(&_IRollupUserERC20.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) BaseStake() (*big.Int, error) {
	return _IRollupUserERC20.Contract.BaseStake(&_IRollupUserERC20.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) BaseStake() (*big.Int, error) {
	return _IRollupUserERC20.Contract.BaseStake(&_IRollupUserERC20.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) Bridge() (common.Address, error) {
	return _IRollupUserERC20.Contract.Bridge(&_IRollupUserERC20.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) Bridge() (common.Address, error) {
	return _IRollupUserERC20.Contract.Bridge(&_IRollupUserERC20.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) ChainId() (*big.Int, error) {
	return _IRollupUserERC20.Contract.ChainId(&_IRollupUserERC20.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ChainId() (*big.Int, error) {
	return _IRollupUserERC20.Contract.ChainId(&_IRollupUserERC20.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) ChallengeManager() (common.Address, error) {
	return _IRollupUserERC20.Contract.ChallengeManager(&_IRollupUserERC20.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupUserERC20.Contract.ChallengeManager(&_IRollupUserERC20.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUserERC20.Contract.ConfirmPeriodBlocks(&_IRollupUserERC20.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUserERC20.Contract.ConfirmPeriodBlocks(&_IRollupUserERC20.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.CountStakedZombies(&_IRollupUserERC20.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.CountStakedZombies(&_IRollupUserERC20.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.CountZombiesStakedOnChildren(&_IRollupUserERC20.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.CountZombiesStakedOnChildren(&_IRollupUserERC20.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUserERC20.Contract.CurrentChallenge(&_IRollupUserERC20.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUserERC20.Contract.CurrentChallenge(&_IRollupUserERC20.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUserERC20.Contract.CurrentRequiredStake(&_IRollupUserERC20.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUserERC20.Contract.CurrentRequiredStake(&_IRollupUserERC20.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUserERC20.Contract.ExtraChallengeTimeBlocks(&_IRollupUserERC20.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUserERC20.Contract.ExtraChallengeTimeBlocks(&_IRollupUserERC20.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUserERC20.Contract.FirstUnresolvedNode(&_IRollupUserERC20.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUserERC20.Contract.FirstUnresolvedNode(&_IRollupUserERC20.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserERC20 *IRollupUserERC20Caller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserERC20 *IRollupUserERC20Session) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUserERC20.Contract.GetNode(&_IRollupUserERC20.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUserERC20.Contract.GetNode(&_IRollupUserERC20.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) GetNodeCreationBlockForLogLookup(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "getNodeCreationBlockForLogLookup", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.GetNodeCreationBlockForLogLookup(&_IRollupUserERC20.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.GetNodeCreationBlockForLogLookup(&_IRollupUserERC20.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserERC20 *IRollupUserERC20Caller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserERC20 *IRollupUserERC20Session) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUserERC20.Contract.GetStaker(&_IRollupUserERC20.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUserERC20.Contract.GetStaker(&_IRollupUserERC20.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUserERC20.Contract.GetStakerAddress(&_IRollupUserERC20.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUserERC20.Contract.GetStakerAddress(&_IRollupUserERC20.CallOpts, stakerNum)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserERC20 *IRollupUserERC20Caller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) Initialize(stakeToken common.Address) error {
	return _IRollupUserERC20.Contract.Initialize(&_IRollupUserERC20.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) Initialize(stakeToken common.Address) error {
	return _IRollupUserERC20.Contract.Initialize(&_IRollupUserERC20.CallOpts, stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) IsERC20Enabled() (bool, error) {
	return _IRollupUserERC20.Contract.IsERC20Enabled(&_IRollupUserERC20.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) IsERC20Enabled() (bool, error) {
	return _IRollupUserERC20.Contract.IsERC20Enabled(&_IRollupUserERC20.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsStaked(&_IRollupUserERC20.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsStaked(&_IRollupUserERC20.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsValidator(&_IRollupUserERC20.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsValidator(&_IRollupUserERC20.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsZombie(&_IRollupUserERC20.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsZombie(&_IRollupUserERC20.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) LastStakeBlock() (uint64, error) {
	return _IRollupUserERC20.Contract.LastStakeBlock(&_IRollupUserERC20.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) LastStakeBlock() (uint64, error) {
	return _IRollupUserERC20.Contract.LastStakeBlock(&_IRollupUserERC20.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) LatestConfirmed() (uint64, error) {
	return _IRollupUserERC20.Contract.LatestConfirmed(&_IRollupUserERC20.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) LatestConfirmed() (uint64, error) {
	return _IRollupUserERC20.Contract.LatestConfirmed(&_IRollupUserERC20.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) LatestNodeCreated() (uint64, error) {
	return _IRollupUserERC20.Contract.LatestNodeCreated(&_IRollupUserERC20.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) LatestNodeCreated() (uint64, error) {
	return _IRollupUserERC20.Contract.LatestNodeCreated(&_IRollupUserERC20.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUserERC20.Contract.LatestStakedNode(&_IRollupUserERC20.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUserERC20.Contract.LatestStakedNode(&_IRollupUserERC20.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUserERC20.Contract.LoserStakeEscrow(&_IRollupUserERC20.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUserERC20.Contract.LoserStakeEscrow(&_IRollupUserERC20.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUserERC20.Contract.MinimumAssertionPeriod(&_IRollupUserERC20.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUserERC20.Contract.MinimumAssertionPeriod(&_IRollupUserERC20.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.NodeHasStaker(&_IRollupUserERC20.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.NodeHasStaker(&_IRollupUserERC20.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) Outbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.Outbox(&_IRollupUserERC20.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) Outbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.Outbox(&_IRollupUserERC20.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) Owner() (common.Address, error) {
	return _IRollupUserERC20.Contract.Owner(&_IRollupUserERC20.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) Owner() (common.Address, error) {
	return _IRollupUserERC20.Contract.Owner(&_IRollupUserERC20.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserERC20 *IRollupUserERC20Caller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUserERC20.Contract.RequireUnresolved(&_IRollupUserERC20.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUserERC20.Contract.RequireUnresolved(&_IRollupUserERC20.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserERC20 *IRollupUserERC20Caller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RequireUnresolvedExists() error {
	return _IRollupUserERC20.Contract.RequireUnresolvedExists(&_IRollupUserERC20.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) RequireUnresolvedExists() error {
	return _IRollupUserERC20.Contract.RequireUnresolvedExists(&_IRollupUserERC20.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.RequiredStake(&_IRollupUserERC20.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.RequiredStake(&_IRollupUserERC20.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) RollupEventInbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.RollupEventInbox(&_IRollupUserERC20.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.RollupEventInbox(&_IRollupUserERC20.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) SequencerInbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.SequencerInbox(&_IRollupUserERC20.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.SequencerInbox(&_IRollupUserERC20.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) StakeToken() (common.Address, error) {
	return _IRollupUserERC20.Contract.StakeToken(&_IRollupUserERC20.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) StakeToken() (common.Address, error) {
	return _IRollupUserERC20.Contract.StakeToken(&_IRollupUserERC20.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) StakerCount() (uint64, error) {
	return _IRollupUserERC20.Contract.StakerCount(&_IRollupUserERC20.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) StakerCount() (uint64, error) {
	return _IRollupUserERC20.Contract.StakerCount(&_IRollupUserERC20.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUserERC20.Contract.ValidatorWhitelistDisabled(&_IRollupUserERC20.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUserERC20.Contract.ValidatorWhitelistDisabled(&_IRollupUserERC20.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserERC20 *IRollupUserERC20Caller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserERC20 *IRollupUserERC20Session) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUserERC20.Contract.WasmModuleRoot(&_IRollupUserERC20.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUserERC20.Contract.WasmModuleRoot(&_IRollupUserERC20.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUserERC20.Contract.WithdrawableFunds(&_IRollupUserERC20.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUserERC20.Contract.WithdrawableFunds(&_IRollupUserERC20.CallOpts, owner)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUserERC20.Contract.ZombieAddress(&_IRollupUserERC20.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUserERC20.Contract.ZombieAddress(&_IRollupUserERC20.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) ZombieCount() (*big.Int, error) {
	return _IRollupUserERC20.Contract.ZombieCount(&_IRollupUserERC20.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ZombieCount() (*big.Int, error) {
	return _IRollupUserERC20.Contract.ZombieCount(&_IRollupUserERC20.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUserERC20.Contract.ZombieLatestStakedNode(&_IRollupUserERC20.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUserERC20.Contract.ZombieLatestStakedNode(&_IRollupUserERC20.CallOpts, zombieNum)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "addToDeposit", stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.AddToDeposit(&_IRollupUserERC20.TransactOpts, stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.AddToDeposit(&_IRollupUserERC20.TransactOpts, stakerAddress, tokenAmount)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ConfirmNextNode(&_IRollupUserERC20.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ConfirmNextNode(&_IRollupUserERC20.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.CreateChallenge(&_IRollupUserERC20.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.CreateChallenge(&_IRollupUserERC20.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) NewStakeOnExistingNode(opts *bind.TransactOpts, tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "newStakeOnExistingNode", tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) NewStakeOnExistingNode(tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.NewStakeOnExistingNode(&_IRollupUserERC20.TransactOpts, tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) NewStakeOnExistingNode(tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.NewStakeOnExistingNode(&_IRollupUserERC20.TransactOpts, tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) NewStakeOnNewNode(opts *bind.TransactOpts, tokenAmount *big.Int, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "newStakeOnNewNode", tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) NewStakeOnNewNode(tokenAmount *big.Int, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.NewStakeOnNewNode(&_IRollupUserERC20.TransactOpts, tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) NewStakeOnNewNode(tokenAmount *big.Int, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.NewStakeOnNewNode(&_IRollupUserERC20.TransactOpts, tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ReduceDeposit(&_IRollupUserERC20.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ReduceDeposit(&_IRollupUserERC20.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RejectNextNode(&_IRollupUserERC20.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RejectNextNode(&_IRollupUserERC20.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveOldZombies(&_IRollupUserERC20.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveOldZombies(&_IRollupUserERC20.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveWhitelistAfterFork(&_IRollupUserERC20.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveWhitelistAfterFork(&_IRollupUserERC20.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUserERC20.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUserERC20.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveZombie(&_IRollupUserERC20.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveZombie(&_IRollupUserERC20.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ReturnOldDeposit(&_IRollupUserERC20.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ReturnOldDeposit(&_IRollupUserERC20.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.StakeOnExistingNode(&_IRollupUserERC20.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.StakeOnExistingNode(&_IRollupUserERC20.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) StakeOnNewNode(opts *bind.TransactOpts, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.StakeOnNewNode(&_IRollupUserERC20.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.StakeOnNewNode(&_IRollupUserERC20.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Transactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.WithdrawStakerFunds(&_IRollupUserERC20.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.WithdrawStakerFunds(&_IRollupUserERC20.TransactOpts)
}

// IRollupUserERC20NodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeConfirmedIterator struct {
	Event *IRollupUserERC20NodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20NodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20NodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20NodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20NodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20NodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20NodeConfirmed represents a NodeConfirmed event raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserERC20NodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20NodeConfirmedIterator{contract: _IRollupUserERC20.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20NodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20NodeConfirmed)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseNodeConfirmed(log types.Log) (*IRollupUserERC20NodeConfirmed, error) {
	event := new(IRollupUserERC20NodeConfirmed)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20NodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeCreatedIterator struct {
	Event *IRollupUserERC20NodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20NodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20NodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20NodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20NodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20NodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20NodeCreated represents a NodeCreated event raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          Assertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IRollupUserERC20NodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20NodeCreatedIterator{contract: _IRollupUserERC20.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20NodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20NodeCreated)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseNodeCreated(log types.Log) (*IRollupUserERC20NodeCreated, error) {
	event := new(IRollupUserERC20NodeCreated)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20NodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeRejectedIterator struct {
	Event *IRollupUserERC20NodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20NodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20NodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20NodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20NodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20NodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20NodeRejected represents a NodeRejected event raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserERC20NodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20NodeRejectedIterator{contract: _IRollupUserERC20.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20NodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20NodeRejected)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseNodeRejected(log types.Log) (*IRollupUserERC20NodeRejected, error) {
	event := new(IRollupUserERC20NodeRejected)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20RollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupUserERC20 contract.
type IRollupUserERC20RollupChallengeStartedIterator struct {
	Event *IRollupUserERC20RollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20RollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20RollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20RollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20RollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20RollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20RollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupUserERC20 contract.
type IRollupUserERC20RollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupUserERC20RollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20RollupChallengeStartedIterator{contract: _IRollupUserERC20.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20RollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20RollupChallengeStarted)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseRollupChallengeStarted(log types.Log) (*IRollupUserERC20RollupChallengeStarted, error) {
	event := new(IRollupUserERC20RollupChallengeStarted)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20RollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupUserERC20 contract.
type IRollupUserERC20RollupInitializedIterator struct {
	Event *IRollupUserERC20RollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20RollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20RollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20RollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20RollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20RollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20RollupInitialized represents a RollupInitialized event raised by the IRollupUserERC20 contract.
type IRollupUserERC20RollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupUserERC20RollupInitializedIterator, error) {

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20RollupInitializedIterator{contract: _IRollupUserERC20.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20RollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20RollupInitialized)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseRollupInitialized(log types.Log) (*IRollupUserERC20RollupInitialized, error) {
	event := new(IRollupUserERC20RollupInitialized)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20UserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupUserERC20 contract.
type IRollupUserERC20UserStakeUpdatedIterator struct {
	Event *IRollupUserERC20UserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20UserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20UserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20UserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20UserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20UserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20UserStakeUpdated represents a UserStakeUpdated event raised by the IRollupUserERC20 contract.
type IRollupUserERC20UserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserERC20UserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20UserStakeUpdatedIterator{contract: _IRollupUserERC20.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20UserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20UserStakeUpdated)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseUserStakeUpdated(log types.Log) (*IRollupUserERC20UserStakeUpdated, error) {
	event := new(IRollupUserERC20UserStakeUpdated)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20UserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupUserERC20 contract.
type IRollupUserERC20UserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupUserERC20UserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20UserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20UserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20UserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20UserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20UserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20UserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupUserERC20 contract.
type IRollupUserERC20UserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserERC20UserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20UserWithdrawableFundsUpdatedIterator{contract: _IRollupUserERC20.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20UserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20UserWithdrawableFundsUpdated)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupUserERC20UserWithdrawableFundsUpdated, error) {
	event := new(IRollupUserERC20UserWithdrawableFundsUpdated)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLibMetaData contains all meta data concerning the NodeLib contract.
var NodeLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122012ad3280eda98a943b13a85835d107667b4df68a96bcf51be2fb1f3c7d4db21164736f6c63430008090033",
}

// NodeLibABI is the input ABI used to generate the binding from.
// Deprecated: Use NodeLibMetaData.ABI instead.
var NodeLibABI = NodeLibMetaData.ABI

// NodeLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodeLibMetaData.Bin instead.
var NodeLibBin = NodeLibMetaData.Bin

// DeployNodeLib deploys a new Ethereum contract, binding an instance of NodeLib to it.
func DeployNodeLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeLib, error) {
	parsed, err := NodeLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodeLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeLib{NodeLibCaller: NodeLibCaller{contract: contract}, NodeLibTransactor: NodeLibTransactor{contract: contract}, NodeLibFilterer: NodeLibFilterer{contract: contract}}, nil
}

// NodeLib is an auto generated Go binding around an Ethereum contract.
type NodeLib struct {
	NodeLibCaller     // Read-only binding to the contract
	NodeLibTransactor // Write-only binding to the contract
	NodeLibFilterer   // Log filterer for contract events
}

// NodeLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeLibSession struct {
	Contract     *NodeLib          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeLibCallerSession struct {
	Contract *NodeLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// NodeLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeLibTransactorSession struct {
	Contract     *NodeLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// NodeLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeLibRaw struct {
	Contract *NodeLib // Generic contract binding to access the raw methods on
}

// NodeLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeLibCallerRaw struct {
	Contract *NodeLibCaller // Generic read-only contract binding to access the raw methods on
}

// NodeLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeLibTransactorRaw struct {
	Contract *NodeLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodeLib creates a new instance of NodeLib, bound to a specific deployed contract.
func NewNodeLib(address common.Address, backend bind.ContractBackend) (*NodeLib, error) {
	contract, err := bindNodeLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeLib{NodeLibCaller: NodeLibCaller{contract: contract}, NodeLibTransactor: NodeLibTransactor{contract: contract}, NodeLibFilterer: NodeLibFilterer{contract: contract}}, nil
}

// NewNodeLibCaller creates a new read-only instance of NodeLib, bound to a specific deployed contract.
func NewNodeLibCaller(address common.Address, caller bind.ContractCaller) (*NodeLibCaller, error) {
	contract, err := bindNodeLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeLibCaller{contract: contract}, nil
}

// NewNodeLibTransactor creates a new write-only instance of NodeLib, bound to a specific deployed contract.
func NewNodeLibTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeLibTransactor, error) {
	contract, err := bindNodeLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeLibTransactor{contract: contract}, nil
}

// NewNodeLibFilterer creates a new log filterer instance of NodeLib, bound to a specific deployed contract.
func NewNodeLibFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeLibFilterer, error) {
	contract, err := bindNodeLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeLibFilterer{contract: contract}, nil
}

// bindNodeLib binds a generic wrapper to an already deployed contract.
func bindNodeLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NodeLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeLib *NodeLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeLib.Contract.NodeLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeLib *NodeLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeLib.Contract.NodeLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeLib *NodeLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeLib.Contract.NodeLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeLib *NodeLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeLib *NodeLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeLib *NodeLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeLib.Contract.contract.Transact(opts, method, params...)
}

// RollupAdminLogicMetaData contains all meta data concerning the RollupAdminLogic contract.
var RollupAdminLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"}],\"name\":\"createNitroMigrationGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"prevNode\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakerA\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stakerB\",\"type\":\"address[]\"}],\"name\":\"forceResolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNodeCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"extraChallengeTimeBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"delayBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"futureBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"delaySeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"futureSeconds\",\"type\":\"uint64\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakedOnLatestConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newExtraTimeBlocks\",\"type\":\"uint64\"}],\"name\":\"setExtraChallengeTimeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"newInbox\",\"type\":\"address\"}],\"name\":\"setInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakeToken\",\"type\":\"address\"}],\"name\":\"setStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeSecondaryTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeSecondaryToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c0604052620000196200003660201b62002ca61760201c565b15156080523060a0523480156200002f57600080fd5b5062000111565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b179052905160009182918291606491620000769190620000d3565b600060405180830381855afa9150503d8060008114620000b3576040519150601f19603f3d011682016040523d82523d6000602084013e620000b8565b606091505b5091509150818015620000cc575080516020145b9250505090565b6000825160005b81811015620000f65760208186018101518583015201620000da565b8181111562000106576000828501525b509190910192915050565b60805160a051615aa46200018b60003960008181611071015281816110b10152818161115701528181611197015281816119b4015281816119f401528181611b9701528181611bd701528181611cc90152818161259101526125d1015260008181612ab7015281816131e001526145200152615aa46000f3fe6080604052600436106103905760003560e01c80637ba9534a116101de578063ce11e6ab11610103578063ef40a6701161009b578063ef40a67014610d08578063f065de3f14610d3e578063f33e1fac14610d5e578063f38c937914610d7e578063f63a434a14610d9e578063facd743b14610dbe578063fb0e722b14610dee578063fc8ffa0314610e0e578063ff204f3b14610e2e57600080fd5b8063ce11e6ab14610b79578063ce66d05c14610b99578063d01e660214610bb9578063d735e21d14610bd9578063dcd030aa14610bfe578063dff6978714610c1e578063e78cea9214610c33578063e8bd492214610c53578063ee35f32714610ce857600080fd5b8063948d658811610176578063948d6588146109815780639846129a146109a15780639a8a0592146109b4578063a23c44b1146109ca578063a2b4f1d814610ad9578063a3ffb77214610af9578063aa38a6e714610b19578063aa65af4814610b39578063bc45e0ae14610b5957600080fd5b80637ba9534a1461086f5780637c75c298146108845780638456cb59146108a4578063848bf918146108b95780638640ce5f146108d957806389384960146108fe5780638ee1a1261461091e57806391c657e81461093457806392c8134c1461095457600080fd5b806347fb24c5116102c45780636177fd181161025c5780636177fd181461071d57806363721d6b1461076057806365f7f80d1461077557806369fd251c146107935780636ddd3744146107dc57806371ef232c146107fc57806376e7e23b14610812578063771b2f97146108285780637b83a3fe1461084f57600080fd5b806347fb24c51461061d5780634f1ef2861461063d5780634f61f8501461065057806351ed6a301461067057806352d1902d1461069057806353b60c4a146106a5578063567ca41b146106c55780635c975abb146106e55780636136fe2e146106fd57600080fd5b80631b1689e9116103375780631b1689e9146104ac57806327aa19bd146104d05780632e7acfa6146104f05780632f30cabd146105285780632f7968e81461055e5780633659cfe61461057e5780633e96576e1461059e57806345e38b64146105e7578063470dce4e146105fd57600080fd5b8063014cc92c14610395578063023a96fe146103cb5780630397d458146103eb578063046f7da21461040d57806306ae5851146104225780630d40a0fd1461044257806312ab3d3b1461046257806313af40351461048c575b600080fd5b3480156103a157600080fd5b50606f546103b5906001600160a01b031681565b6040516103c29190614dbd565b60405180910390f35b3480156103d757600080fd5b50606e546103b5906001600160a01b031681565b3480156103f757600080fd5b5061040b610406366004614de6565b610e4e565b005b34801561041957600080fd5b5061040b611020565b34801561042e57600080fd5b5061040b61043d366004614e03565b611044565b34801561044e57600080fd5b5061040b61045d366004614de6565b611066565b34801561046e57600080fd5b50607e5461047c9060ff1681565b60405190151581526020016103c2565b34801561049857600080fd5b5061040b6104a7366004614de6565b611126565b3480156104b857600080fd5b506104c2607d5481565b6040519081526020016103c2565b3480156104dc57600080fd5b5061040b6104eb366004614e1c565b61114c565b3480156104fc57600080fd5b50606554610510906001600160401b031681565b6040516001600160401b0390911681526020016103c2565b34801561053457600080fd5b506104c2610543366004614de6565b6001600160a01b03166000908152607b602052604090205490565b34801561056a57600080fd5b5061040b610579366004614e94565b61195d565b34801561058a57600080fd5b5061040b610599366004614de6565b6119a9565b3480156105aa57600080fd5b506105106105b9366004614de6565b6001600160a01b0316600090815260796020526040902060010154600160401b90046001600160401b031690565b3480156105f357600080fd5b506104c260735481565b34801561060957600080fd5b5061040b610618366004614ee0565b611a66565b34801561062957600080fd5b5061040b610638366004614f35565b611b0a565b61040b61064b366004614fdc565b611b8c565b34801561065c57600080fd5b5061040b61066b366004614de6565b611c3d565b34801561067c57600080fd5b506072546103b5906001600160a01b031681565b34801561069c57600080fd5b506104c2611cbc565b3480156106b157600080fd5b5061040b6106c0366004614de6565b611d6a565b3480156106d157600080fd5b5061040b6106e0366004614de6565b611da2565b3480156106f157600080fd5b5060335460ff1661047c565b34801561070957600080fd5b5061040b610718366004615083565b611e6f565b34801561072957600080fd5b5061047c610738366004614de6565b6001600160a01b0316600090815260796020526040902060010154600160c01b900460ff1690565b34801561076c57600080fd5b50607a546104c2565b34801561078157600080fd5b506075546001600160401b0316610510565b34801561079f57600080fd5b506105106107ae366004614de6565b6001600160a01b0316600090815260796020526040902060010154600160801b90046001600160401b031690565b3480156107e857600080fd5b506103b56107f7366004615083565b611eb1565b34801561080857600080fd5b506104c2607c5481565b34801561081e57600080fd5b506104c260675481565b34801561083457600080fd5b5060655461051090600160401b90046001600160401b031681565b34801561085b57600080fd5b5061040b61086a36600461509e565b611eea565b34801561087b57600080fd5b506105106121ed565b34801561089057600080fd5b5061040b61089f366004615106565b612203565b3480156108b057600080fd5b5061040b612377565b3480156108c557600080fd5b5061040b6108d4366004615147565b61239b565b3480156108e557600080fd5b50607554600160c01b90046001600160401b0316610510565b34801561090a57600080fd5b5061040b610919366004614e03565b612417565b34801561092a57600080fd5b506104c260685481565b34801561094057600080fd5b5061047c61094f366004614de6565b612439565b34801561096057600080fd5b5061097461096f366004615083565b61249d565b6040516103c29190615175565b34801561098d57600080fd5b5061040b61099c366004614e03565b612564565b61040b6109af366004614fdc565b612586565b3480156109c057600080fd5b506104c260665481565b3480156109d657600080fd5b50610a846109e5366004614de6565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0316600090815260796020908152604091829020825160a081018452815481526001909101546001600160401b0380821693830193909352600160401b8104831693820193909352600160801b83049091166060820152600160c01b90910460ff161515608082015290565b6040516103c29190600060a0820190508251825260208301516001600160401b038082166020850152806040860151166040850152806060860151166060850152505060808301511515608083015292915050565b348015610ae557600080fd5b5061040b610af4366004615271565b612633565b348015610b0557600080fd5b5061040b610b1436600461528e565b61265e565b348015610b2557600080fd5b50606d546103b5906001600160a01b031681565b348015610b4557600080fd5b5061047c610b543660046152f9565b612752565b348015610b6557600080fd5b506070546103b5906001600160a01b031681565b348015610b8557600080fd5b50606b546103b5906001600160a01b031681565b348015610ba557600080fd5b5061040b610bb4366004615083565b612789565b348015610bc557600080fd5b506103b5610bd4366004614e03565b612814565b348015610be557600080fd5b50607554600160401b90046001600160401b0316610510565b348015610c0a57600080fd5b5061047c610c19366004614de6565b612829565b348015610c2a57600080fd5b50607854610510565b348015610c3f57600080fd5b50606a546103b5906001600160a01b031681565b348015610c5f57600080fd5b50610cb0610c6e366004614de6565b607960205260009081526040902080546001909101546001600160401b0380821691600160401b8104821691600160801b82041690600160c01b900460ff1685565b604080519586526001600160401b0394851660208701529284169285019290925290911660608301521515608082015260a0016103c2565b348015610cf457600080fd5b50606c546103b5906001600160a01b031681565b348015610d1457600080fd5b506104c2610d23366004614de6565b6001600160a01b031660009081526079602052604090205490565b348015610d4a57600080fd5b506071546103b5906001600160a01b031681565b348015610d6a57600080fd5b50610510610d79366004614e03565b61286c565b348015610d8a57600080fd5b5061040b610d9936600461528e565b6128a3565b348015610daa57600080fd5b506104c2610db9366004615083565b612ab3565b348015610dca57600080fd5b5061047c610dd9366004614de6565b60746020526000908152604090205460ff1681565b348015610dfa57600080fd5b506069546103b5906001600160a01b031681565b348015610e1a57600080fd5b5061040b610e29366004614de6565b612b7c565b348015610e3a57600080fd5b5061040b610e49366004614de6565b612c0e565b60335460ff16610e795760405162461bcd60e51b8152600401610e7090615315565b60405180910390fd5b6000806001600160a01b0316826001600160a01b0316141590506000306001600160a01b031663cd205fda6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ece57600080fd5b505afa158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f069190615343565b905081151581151514610f535760405162461bcd60e51b81526020600482015260156024820152741393d7d554d15497d313d1d250d7d4d5541413d495605a1b6044820152606401610e70565b6078546001600160401b031615610fa05760405162461bcd60e51b81526020600482015260116024820152704e4f5f4143544956455f5354414b45525360781b6044820152606401610e70565b607c5415610fe65760405162461bcd60e51b81526020600482015260136024820152724e4f5f50454e44494e475f574954484452415760681b6044820152606401610e70565b607280546001600160a01b0319166001600160a01b038516179055604051600d90600080516020615a2883398151915290600090a2505050565b611028612d3e565b604051600490600080516020615a2883398151915290600090a2565b6067819055604051600c90600080516020615a2883398151915290600090a250565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110af5760405162461bcd60e51b8152600401610e7090615360565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110e1612da4565b6001600160a01b0316146111075760405162461bcd60e51b8152600401610e70906153ac565b6040805160008082526020820190925261112391839190612dc5565b50565b61112f81612f65565b604051600790600080516020615a2883398151915290600090a250565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111955760405162461bcd60e51b8152600401610e7090615360565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111c7612da4565b6001600160a01b0316146111ed5760405162461bcd60e51b8152600401610e70906153ac565b600054610100900460ff166112085760005460ff161561120c565b303b155b61126f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e70565b600054610100900460ff16158015611291576000805461ffff19166101011790555b43607d556112a26020830183614de6565b606a80546001600160a01b0319166001600160a01b03929092169190911790556112d26040830160208401614de6565b606c80546001600160a01b0319166001600160a01b03929092169190911790556112ff6020830183614de6565b6001600160a01b03166347fb24c561131d6060850160408601614de6565b60016040518363ffffffff1660e01b815260040161133c9291906153f8565b600060405180830381600087803b15801561135657600080fd5b505af115801561136a573d6000803e3d6000fd5b5061137c925050506020830183614de6565b6001600160a01b0316634f61f85061139a6040850160208601614de6565b6040518263ffffffff1660e01b81526004016113b69190614dbd565b600060405180830381600087803b1580156113d057600080fd5b505af11580156113e4573d6000803e3d6000fd5b506113f9925050506060830160408401614de6565b606980546001600160a01b0319166001600160a01b03929092169190911790556114296080830160608401614de6565b606b80546001600160a01b0319166001600160a01b03929092169190911790556114566020830183614de6565b6001600160a01b031663cee3d7286114746080850160608601614de6565b60016040518363ffffffff1660e01b81526004016114939291906153f8565b600060405180830381600087803b1580156114ad57600080fd5b505af11580156114c1573d6000803e3d6000fd5b506114d69250505060a0830160808401614de6565b606d80546001600160a01b0319166001600160a01b03929092169190911790556115036020830183614de6565b6001600160a01b03166347fb24c561152160a0850160808601614de6565b60016040518363ffffffff1660e01b81526004016115409291906153f8565b600060405180830381600087803b15801561155a57600080fd5b505af115801561156e573d6000803e3d6000fd5b506115839250505060a0830160808401614de6565b6001600160a01b031663cf8d56d660e08501356115a4610100870187615413565b6040518463ffffffff1660e01b81526004016115c293929190615459565b600060405180830381600087803b1580156115dc57600080fd5b505af11580156115f0573d6000803e3d6000fd5b50611605925050506040830160208401614de6565b60405163e0bc972960e01b815260006004820181905260c0602483015260c4820181905260016044830181905260648301829052608483019190915260a48201526001600160a01b03919091169063e0bc97299060e401600060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b506116a19250505061012083016101008401614de6565b606f80546001600160a01b0319166001600160a01b03929092169190911790556116d361014083016101208401614de6565b607080546001600160a01b0319166001600160a01b039290921691909117905561170360c0830160a08401614de6565b606e80546001600160a01b0319166001600160a01b0392909216919091179055600061172d612fb9565b90506117388161300c565b6117456020850185615083565b6065805467ffffffffffffffff19166001600160401b03929092169190911790556117766040850160208601615083565b606580546001600160401b0392909216600160401b0267ffffffffffffffff60401b1990921691909117905560e084013560665560608401356067556080840135606855604b6073556117c76132a4565b6001600160a01b03166117e060e0860160c08701614de6565b6001600160a01b0316141561182e5760405162461bcd60e51b815260206004820152601460248201527324a72b20a624a22fa2a9a1a927abafa0a226a4a760611b6044820152606401610e70565b61183e60c0850160a08601614de6565b6001600160a01b031661185760e0860160c08701614de6565b6001600160a01b031614156118a55760405162461bcd60e51b815260206004820152601460248201527324a72b20a624a22fa2a9a1a927abafa7aba722a960611b6044820152606401610e70565b6118b560e0850160c08601614de6565b607180546001600160a01b0319166001600160a01b03929092169190911790556118e56060850160408601614de6565b607280546001600160a01b0319166001600160a01b0392909216919091179055604080516080860135815260e086013560208201527ffc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464910160405180910390a1508015611958576000805461ff00191690555b505050565b60335460ff1661197f5760405162461bcd60e51b8152600401610e7090615315565b61198a8383836132cc565b604051601890600080516020615a2883398151915290600090a2505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156119f25760405162461bcd60e51b8152600401610e7090615360565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a24612da4565b6001600160a01b031614611a4a5760405162461bcd60e51b8152600401610e70906153ac565b6040805160008082526020820190925261112391839190613426565b60335460ff16611a885760405162461bcd60e51b8152600401610e7090615315565b6075546001600160401b03858116911614611add5760405162461bcd60e51b815260206004820152601560248201527413d3931657d310551154d517d0d3d3919254935151605a1b6044820152606401610e70565b611ae9828585846135a0565b50604051601790600080516020615a2883398151915290600090a250505050565b606a546040516347fb24c560e01b81526001600160a01b03909116906347fb24c590611b3c90859085906004016153f8565b600060405180830381600087803b158015611b5657600080fd5b505af1158015611b6a573d6000803e3d6000fd5b505060405160029250600080516020615a288339815191529150600090a25050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611bd55760405162461bcd60e51b8152600401610e7090615360565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c07612da4565b6001600160a01b031614611c2d5760405162461bcd60e51b8152600401610e70906153ac565b611c3982826001613426565b5050565b606a546040516304f61f8560e41b81526001600160a01b0390911690634f61f85090611c6d908490600401614dbd565b600060405180830381600087803b158015611c8757600080fd5b505af1158015611c9b573d6000803e3d6000fd5b5050604051601b9250600080516020615a288339815191529150600090a250565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611d575760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610e70565b50600080516020615a0883398151915290565b606980546001600160a01b0319166001600160a01b038316179055604051601c90600080516020615a2883398151915290600090a250565b606b546001600160a01b0382811691161415611ded5760405162461bcd60e51b815260206004820152600a602482015269086aaa4be9eaaa8849eb60b31b6044820152606401610e70565b606a546040516319dc7ae560e31b81526001600160a01b039091169063cee3d72890611e209084906000906004016153f8565b600060405180830381600087803b158015611e3a57600080fd5b505af1158015611e4e573d6000803e3d6000fd5b505060405160019250600080516020615a288339815191529150600090a250565b6065805467ffffffffffffffff60401b1916600160401b6001600160401b03841602179055604051600a90600080516020615a2883398151915290600090a250565b60006078826001600160401b031681548110611ecf57611ecf61548f565b6000918252602090912001546001600160a01b031692915050565b60335460ff16611f0c5760405162461bcd60e51b8152600401610e7090615315565b60006001611f186121ed565b6001600160401b031615611f685760405162461bcd60e51b81526020600482015260176024820152761393d397d1d1539154d254d7d393d11154d7d1561254d5604a1b6044820152606401610e70565b611f7183613bb4565b611fb05760405162461bcd60e51b815260206004820152601060248201526f4e4f545f454d5054595f4245464f524560801b6044820152606401610e70565b6001611fc260a08501608086016154ca565b6003811115611fd357611fd36154a5565b146120205760405162461bcd60e51b815260206004820152601b60248201527f4245464f52455f4d414348494e455f4e4f545f46494e495348454400000000006044820152606401610e70565b60c083013582146120675760405162461bcd60e51b81526020600482015260116024820152701393d517d6915493d7d4d153911493d3d5607a1b6044820152606401610e70565b6001600160401b038116612082610100850160e08601615083565b6001600160401b0316146120cb5760405162461bcd60e51b815260206004820152601060248201526f494e424f585f4e4f545f41545f4f4e4560801b6044820152606401610e70565b6120dd61012084016101008501615083565b6001600160401b0316156121335760405162461bcd60e51b815260206004820152601c60248201527f504f534954494f4e5f494e5f4d4553534147455f4e4f545f5a45524f000000006044820152606401610e70565b6001612147610140850161012086016154ca565b6003811115612158576121586154a5565b146121a55760405162461bcd60e51b815260206004820152601a60248201527f41465445525f4d414348494e455f4e4f545f46494e49534845440000000000006044820152606401610e70565b60a08301356121c08460006001600160401b038516816135a0565b506121cd600182856132cc565b604051601d90600080516020615a2883398151915290600090a250505050565b607554600160801b90046001600160401b031690565b60335460ff166122255760405162461bcd60e51b8152600401610e7090615315565b806122425760405162461bcd60e51b8152600401610e70906154e5565b60005b818110156123585760006079818585858181106122645761226461548f565b90506020020160208101906122799190614de6565b6001600160a01b03168152602081019190915260400160002060010154600160801b90046001600160401b0316146122e55760405162461bcd60e51b815260206004820152600f60248201526e14d51052d15497d25397d0d2105313608a1b6044820152606401610e70565b6123168383838181106122fa576122fa61548f565b905060200201602081019061230f9190614de6565b6000613c10565b5061234683838381811061232c5761232c61548f565b90506020020160208101906123419190614de6565b613cd5565b8061235081615520565b915050612245565b50604051601690600080516020615a2883398151915290600090a25050565b61237f613d7b565b604051600390600080516020615a2883398151915290600090a2565b604051631b2ce7f360e11b81526001600160a01b03831690633659cfe6906123c7908490600401614dbd565b600060405180830381600087803b1580156123e157600080fd5b505af11580156123f5573d6000803e3d6000fd5b505060405160149250600080516020615a288339815191529150600090a25050565b6068819055604051601a90600080516020615a2883398151915290600090a250565b6000805b607a5481101561249457607a818154811061245a5761245a61548f565b6000918252602090912001546001600160a01b03848116911614156124825750600192915050565b8061248c81615520565b91505061243d565b50600092915050565b6124a5614c98565b6001600160401b03821660009081526076602052604090206040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082015260059091015461016082015292915050565b6073819055604051600890600080516020615a2883398151915290600090a250565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156125cf5760405162461bcd60e51b8152600401610e7090615360565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612601612da4565b6001600160a01b0316146126275760405162461bcd60e51b8152600401610e70906153ac565b611c3982826001612dc5565b607e805460ff1916821515179055604051601e90600080516020615a2883398151915290600090a250565b8261267b5760405162461bcd60e51b8152600401610e70906154e5565b82811461269a5760405162461bcd60e51b8152600401610e709061553b565b60005b83811015612731578282828181106126b7576126b761548f565b90506020020160208101906126cc9190615271565b607460008787858181106126e2576126e261548f565b90506020020160208101906126f79190614de6565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061272981615520565b91505061269d565b50604051600690600080516020615a2883398151915290600090a250505050565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6000816001600160401b0316116127db5760405162461bcd60e51b81526020600482015260166024820152751253959053125117d0d3d39192549357d411549253d160521b6044820152606401610e70565b6065805467ffffffffffffffff19166001600160401b038316179055604051600990600080516020615a2883398151915290600090a250565b6000607a8281548110611ecf57611ecf61548f565b6001600160a01b038116600090815260796020526040812060010154600160c01b900460ff1680156127835750607554612783906001600160401b031683612752565b6000607a82815481106128815761288161548f565b600091825260209091200154600160a01b90046001600160401b031692915050565b60335460ff166128c55760405162461bcd60e51b8152600401610e7090615315565b826128e25760405162461bcd60e51b8152600401610e70906154e5565b8281146129015760405162461bcd60e51b8152600401610e709061553b565b60005b83811015612a925760006129648686848181106129235761292361548f565b90506020020160208101906129389190614de6565b85858581811061294a5761294a61548f565b905060200201602081019061295f9190614de6565b613df6565b90506001600160401b0381166129ab5760405162461bcd60e51b815260206004820152600c60248201526b1393d517d25397d0d210531360a21b6044820152606401610e70565b612a038686848181106129c0576129c061548f565b90506020020160208101906129d59190614de6565b6001600160a01b03166000908152607960205260409020600101805467ffffffffffffffff60801b19169055565b612a188484848181106129c0576129c061548f565b606e546040516356e9df9760e01b81526001600160401b03831660048201526001600160a01b03909116906356e9df9790602401600060405180830381600087803b158015612a6657600080fd5b505af1158015612a7a573d6000803e3d6000fd5b50505050508080612a8a90615520565b915050612904565b50604051601590600080516020615a2883398151915290600090a250505050565b60007f000000000000000000000000000000000000000000000000000000000000000015612b11576001600160401b0382166000908152607f6020526040902054806127835760405162461bcd60e51b8152600401610e7090615561565b6001600160401b03821660009081526076602052604081206003810154909150600160401b90046001600160401b0316612b5d5760405162461bcd60e51b8152600401610e7090615561565b60040154600160c01b90046001600160401b031692915050565b919050565b612b846132a4565b6001600160a01b0316816001600160a01b03161415612bd65760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f455343524f5760901b6044820152606401610e70565b607180546001600160a01b0319166001600160a01b038316179055604051601990600080516020615a2883398151915290600090a250565b606b80546001600160a01b0319166001600160a01b0383811691909117909155606a546040516319dc7ae560e31b815291169063cee3d72890612c589084906001906004016153f8565b600060405180830381600087803b158015612c7257600080fd5b505af1158015612c86573d6000803e3d6000fd5b505060405160009250600080516020615a2883398151915291508290a250565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b179052905160009182918291606491612ce491906155ae565b600060405180830381855afa9150503d8060008114612d1f576040519150601f19603f3d011682016040523d82523d6000602084013e612d24565b606091505b5091509150818015612d37575080516020145b9250505090565b60335460ff16612d605760405162461bcd60e51b8152600401610e7090615315565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051612d9a9190614dbd565b60405180910390a1565b6000600080516020615a088339815191525b546001600160a01b0316919050565b7f49bd798cd84788856140a4cd5030756b4d08a9e4d55db725ec195f232d262a895460ff1615612df85761195883613ec4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e3157600080fd5b505afa925050508015612e61575060408051601f3d908101601f19168201909252612e5e918101906155ca565b60015b612ece5760405162461bcd60e51b815260206004820152603860248201527f45524331393637557067726164653a206e6577207365636f6e6461727920696d604482015277706c656d656e746174696f6e206973206e6f74205555505360401b6064820152608401610e70565b7f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d8114612f595760405162461bcd60e51b815260206004820152603360248201527f45524331393637557067726164653a20756e737570706f72746564207365636f6044820152721b99185c9e481c1c9bde1a58589b1955555251606a1b6064820152608401610e70565b50611958838383613f7f565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f612f8e6132a4565b604080516001600160a01b03928316815291841660208301520160405180910390a161112381613faa565b612fc1614c98565b612fc9614cfc565b6000612ffb604051806040016040528084815260200160016003811115612ff257612ff26154a5565b90526001614036565b9050612d378160008080438161407b565b6130146140cf565b60008080526076602090815282517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a181958558201517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a1819595560408201517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a18195a5560608201517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a18195b8054608085015160a086015160c08701516001600160401b039586166001600160801b031994851617600160401b9387168402176001600160801b03908116600160801b93881684026001600160c01b0390811691909117600160c01b93891684021790965560e08901517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a18195c80546101008c01516101208d01516101408e0151948c169290991691909117908a169096029590951790911694871690920290941692909217919093169091021790556101608201517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a18195d556131b89060016155e3565b607560086101000a8154816001600160401b0302191690836001600160401b031602179055507f0000000000000000000000000000000000000000000000000000000000000000156111235760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561323e57600080fd5b505afa158015613252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327691906155ca565b60008052607f6020527f18b3a2798575d3a428c1f52e616a74b071539854e037e7d7c535365d474f40335550565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612db6565b6001600160401b03831660009081526076602052604090206132ee8383614100565b81600201541461332f5760405162461bcd60e51b815260206004820152600c60248201526b434f4e4649524d5f4441544160a01b6044820152606401610e70565b606b54604051630502677360e51b815260048101849052602481018590526001600160a01b039091169063a04cee6090604401600060405180830381600087803b15801561337c57600080fd5b505af1158015613390573d6000803e3d6000fd5b50506075805467ffffffffffffffff19166001600160401b038816179055506133bc90508460016155e3565b6075805467ffffffffffffffff60401b1916600160401b6001600160401b03938416021790556040805185815260208101859052918616917f22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c91015b60405180910390a250505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613459576119588361411c565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561349257600080fd5b505afa9250505080156134c2575060408051601f3d908101601f191682019092526134bf918101906155ca565b60015b6135255760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610e70565b600080516020615a0883398151915281146135945760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610e70565b5061195883838361419e565b600060016135b6610140870161012088016154ca565b60038111156135c7576135c76154a5565b14806135f5575060026135e2610140870161012088016154ca565b60038111156135f3576135f36154a5565b145b6136345760405162461bcd60e51b815260206004820152601060248201526f4241445f41465445525f53544154555360801b6044820152606401610e70565b61363c614d21565b6136458561249d565b6060820152606a54604080516221048360e21b815290516001600160a01b03909216916284120c91600480820192602092909190829003018186803b15801561368d57600080fd5b505afa1580156136a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c591906155ca565b81526060810151516136d787866141a7565b146137165760405162461bcd60e51b815260206004820152600f60248201526e0a0a48aacbea6a882a88abe9082a69608b1b6044820152606401610e70565b600061373261372d36899003890160a08a016156d0565b6141e3565b9050600061374861372d368a90038a018a6156d0565b9050806001600160401b0316826001600160401b0316101561379e5760405162461bcd60e51b815260206004820152600f60248201526e494e424f585f4241434b574152445360881b6044820152606401610e70565b806001600160401b0316826001600160401b03161415613844576137cf6137ca368a90038a018a6156d0565b6141f8565b6001600160401b03166137ed6137ca368b90038b0160a08c016156d0565b6001600160401b031610156138445760405162461bcd60e51b815260206004820152601a60248201527f494e424f585f504f535f494e5f4d53475f4241434b57415244530000000000006044820152606401610e70565b60026138586101408a016101208b016154ca565b6003811115613869576138696154a5565b1480613892575060006138876137ca368b90038b0160a08c016156d0565b6001600160401b0316115b156138a557816138a1816156ec565b9250505b82516001600160401b03831611156138f05760405162461bcd60e51b815260206004820152600e60248201526d12539093d617d41054d517d1539160921b6044820152606401610e70565b6001600160401b0382161561399857606a546001600160a01b03166316bf557961391b600185615713565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b15801561395a57600080fd5b505afa15801561396e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061399291906155ca565b60e08401525b506139b290506139ad3688900388018861577a565b614207565b60408201526065546139cd906001600160401b0316436155e3565b6001600160401b0390811660c0830152606082015161012001511615801560a0830152613a2357606081015161012001516001600160401b03166000908152607660205260409020600501546080820152613a33565b6060810151610160015160808201525b613a528160a00151826080015183604001518460e001516068546142a6565b915082821480613a60575082155b613aa35760405162461bcd60e51b81526020600482015260146024820152730aa9c8ab0a08a86a88a88be9c9e888abe9082a6960631b6044820152606401610e70565b613aeb613ab78760a00183600001516141a7565b613ac8836040015143606854614313565b613adf613ada368b90038b018b61577a565b614352565b888560c001518761407b565b60208201526000613afa6121ed565b613b059060016155e3565b90506000613b27876001600160401b0316600090815260766020526040902090565b9050613b33818361437c565b613b4083602001516143ed565b50508181606001516101600151613b556121ed565b6001600160401b03167f4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d09684604001518a8660e001516068548860000151604051613ba3959493929190615864565b60405180910390a450949350505050565b60008135158015613bc757506020820135155b8015613be95750613bde6060830160408401615083565b6001600160401b0316155b80156127835750613c006080830160608401615083565b6001600160401b03161592915050565b6001600160a01b0382166000908152607960205260408120805480841115613c6d5760405162461bcd60e51b815260206004820152601060248201526f544f4f5f4c4954544c455f5354414b4560801b6044820152606401610e70565b6000613c7985836158c4565b8584559050613c8886826145db565b60408051838152602081018790526001600160a01b038816917febd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6910160405180910390a295945050505050565b6001600160a01b03808216600081815260796020908152604080832081518083019092529381526001808501546001600160401b03600160401b9091048116938301938452607a8054928301815590945290517ff0440771a29e57e18c66727944770b82cc77924aef333c927ce6bdd2cdb3ae0390910180549251909316600160a01b026001600160e01b031990921694169390931792909217909155611c3982614677565b60335460ff1615613dc15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610e70565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612d8d3390565b6001600160a01b03828116600090815260796020526040808220928416825281206001830154919291600160801b90046001600160401b031680613e665760405162461bcd60e51b81526020600482015260076024820152661393d7d0d2105360ca1b6044820152606401610e70565b60018201546001600160401b03828116600160801b9092041614613ebb5760405162461bcd60e51b815260206004820152600c60248201526b1112519197d25397d0d2105360a21b6044820152606401610e70565b95945050505050565b6001600160a01b0381163b613f3b5760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e74604482015276185d1a5bdb881a5cc81b9bdd08184818dbdb9d1c9858dd604a1b6064820152608401610e70565b807f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d5b80546001600160a01b0319166001600160a01b039290921691909117905550565b613f888361483a565b600082511180613f955750805b1561195857613fa4838361487a565b50505050565b6001600160a01b03811661400f5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e70565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103613f5e565b6000614045836000015161489f565b82846020015160405160200161405d939291906158db565b60405160208183030381529060405280519060200120905092915050565b614083614c98565b61408b614c98565b96875250602086019490945260408501929092526001600160401b0390811660608501529081166080840181905260a0840152431661014083015261016082015290565b600054610100900460ff166140f65760405162461bcd60e51b8152600401610e7090615919565b6140fe614913565b565b604080516020810184905290810182905260009060600161405d565b6001600160a01b0381163b6141895760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610e70565b80600080516020615a08833981519152613f5e565b613f8883614946565b60006141c06141bb368590038501856156d0565b61489f565b826141d160a08601608087016154ca565b60405160200161405d939291906158db565b6020810151600090815b602002015192915050565b602081015160009060016141ed565b6000614211614d72565b8251602001518190600381111561422a5761422a6154a5565b9081600381111561423d5761423d6154a5565b90525060208381015181015190820190600381111561425e5761425e6154a5565b90816003811115614271576142716154a5565b90525061427c614d90565b83515181526020808501515190820152604084015161429e9083908390614986565b949350505050565b600080866142b55760006142b8565b60015b6040516001600160f81b031960f883901b1660208201526021810188905260418101879052606181018690526081810185905290915060a1016040516020818303038152906040528051906020012091505095945050505050565b6040805160208101859052908101839052606081018290526000906080015b6040516020818303038152906040528051906020012090505b9392505050565b6000612783614368836020015160000151614a30565b60208401515161437790614a3b565b614100565b6004820154600160401b90046001600160401b03166143bd5760048201805467ffffffffffffffff60401b1916600160401b436001600160401b0316021790555b600490910180546001600160401b03909216600160801b0267ffffffffffffffff60801b19909216919091179055565b60758054600160801b90046001600160401b031690601061440d836156ec565b825461010092830a6001600160401b03818102199092169282160291909117909255607554600160801b908190048316600090815260766020908152604091829020875181559087015160018201559086015160028201556060860151600382018054608089015160a08a015160c08b01519489166001600160801b031993841617600160401b928a168302176001600160801b03908116918a1688026001600160c01b0390811692909217600160c01b968b1687021790945560e08b0151600487018054998d01516101208e01516101408f0151938d169b9096169a909a17998b16909302989098179093169188169095029091161793909416909302919091179055610160830151600590910155507f0000000000000000000000000000000000000000000000000000000000000000156111235760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561457e57600080fd5b505afa158015614592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145b691906155ca565b607554600160801b90046001600160401b03166000908152607f602052604090205550565b6001600160a01b0382166000908152607b6020526040812054906145ff8383615964565b6001600160a01b0385166000908152607b60205260408120829055607c80549293508592909190614631908490615964565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae29101613418565b6001600160a01b03811660009081526079602052604090206001810154600160c01b900460ff166146d75760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b6044820152606401610e70565b600180820154607880546001600160401b039092169290916146f991906158c4565b815481106147095761470961548f565b600091825260209091200154607880546001600160a01b03909216916001600160401b03841690811061473e5761473e61548f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080607960006078846001600160401b03168154811061478d5761478d61548f565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600101805467ffffffffffffffff19166001600160401b039290921691909117905560788054806147e5576147e561597c565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152607990935250506040812090815560010180546001600160c81b0319169055565b61484381613ec4565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b606061434b8383604051806060016040528060278152602001615a4860279139614a47565b8051805160209182015192820151805190830151604080516c23b637b130b61039ba30ba329d60991b81870152602d810194909452604d8401959095526001600160c01b031960c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b600054610100900460ff1661493a5760405162461bcd60e51b8152600401610e7090615919565b6033805460ff19169055565b61494f8161411c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b604080516002808252606082018352600092839291906020830190803683370190505085519091506149c8906149c38660005b602002015161489f565b614b24565b816000815181106149db576149db61548f565b60209081029190910101526149fc85600160200201516149c38660016149b9565b81600181518110614a0f57614a0f61548f565b602002602001018181525050613ebb6000846001600160401b031683614c48565b8051600090816141ed565b805160009060016141ed565b60606001600160a01b0384163b614aaf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610e70565b600080856001600160a01b031685604051614aca91906155ae565b600060405180830381855af49150503d8060008114614b05576040519150601f19603f3d011682016040523d82523d6000602084013e614b0a565b606091505b5091509150614b1a828286614c5f565b9695505050505050565b60006001836003811115614b3a57614b3a6154a5565b1415614b80576040516b213637b1b59039ba30ba329d60a11b6020820152602c8101839052604c015b604051602081830303815290604052805190602001209050612783565b6002836003811115614b9457614b946154a5565b1415614bca5760405174213637b1b59039ba30ba32961032b93937b932b21d60591b602082015260358101839052605501614b63565b6003836003811115614bde57614bde6154a5565b1415614c0d5760405174213637b1b59039ba30ba3296103a37b7903330b91d60591b6020820152603501614b63565b60405162461bcd60e51b815260206004820152601060248201526f4241445f424c4f434b5f53544154555360801b6044820152606401610e70565b600083838360405160200161433293929190615992565b60608315614c6e57508161434b565b825115614c7e5782518084602001fd5b8160405162461bcd60e51b8152600401610e7091906159d4565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b6040518060400160405280614d0f614d72565b8152602001614d1c614d72565b905290565b60405180610100016040528060008152602001614d3c614c98565b815260006020820152604001614d50614c98565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b614da7614cfc565b815260200190600190039081614d9f5790505090565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461112357600080fd5b600060208284031215614df857600080fd5b813561434b81614dd1565b600060208284031215614e1557600080fd5b5035919050565b600080828403610160811215614e3157600080fd5b83356001600160401b03811115614e4757600080fd5b84016101c08187031215614e5a57600080fd5b9250610140601f1982011215614e6f57600080fd5b506020830190509250929050565b80356001600160401b0381168114612b7757600080fd5b600080600060608486031215614ea957600080fd5b614eb284614e7d565b95602085013595506040909401359392505050565b60006101608284031215614eda57600080fd5b50919050565b6000806000806101c08587031215614ef757600080fd5b614f0085614e7d565b935060208501359250614f168660408701614ec7565b939692955092936101a00135925050565b801515811461112357600080fd5b60008060408385031215614f4857600080fd5b8235614f5381614dd1565b91506020830135614f6381614f27565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715614fa657614fa6614f6e565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614fd457614fd4614f6e565b604052919050565b60008060408385031215614fef57600080fd5b8235614ffa81614dd1565b91506020838101356001600160401b038082111561501757600080fd5b818601915086601f83011261502b57600080fd5b81358181111561503d5761503d614f6e565b61504f601f8201601f19168501614fac565b9150808252878482850101111561506557600080fd5b80848401858401376000848284010152508093505050509250929050565b60006020828403121561509557600080fd5b61434b82614e7d565b600061016082840312156150b157600080fd5b61434b8383614ec7565b60008083601f8401126150cd57600080fd5b5081356001600160401b038111156150e457600080fd5b6020830191508360208260051b85010111156150ff57600080fd5b9250929050565b6000806020838503121561511957600080fd5b82356001600160401b0381111561512f57600080fd5b61513b858286016150bb565b90969095509350505050565b6000806040838503121561515a57600080fd5b823561516581614dd1565b91506020830135614f6381614dd1565b60006101808201905082518252602083015160208301526040830151604083015260608301516151b060608401826001600160401b03169052565b5060808301516151cb60808401826001600160401b03169052565b5060a08301516151e660a08401826001600160401b03169052565b5060c083015161520160c08401826001600160401b03169052565b5060e083015161521c60e08401826001600160401b03169052565b50610100838101516001600160401b038116848301525050610120838101516001600160401b038116848301525050610140838101516001600160401b03811684830152505061016092830151919092015290565b60006020828403121561528357600080fd5b813561434b81614f27565b600080600080604085870312156152a457600080fd5b84356001600160401b03808211156152bb57600080fd5b6152c7888389016150bb565b909650945060208701359150808211156152e057600080fd5b506152ed878288016150bb565b95989497509550505050565b6000806040838503121561530c57600080fd5b61516583614e7d565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60006020828403121561535557600080fd5b815161434b81614f27565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6001600160a01b039290921682521515602082015260400190565b6000808335601e1984360301811261542a57600080fd5b8301803591506001600160401b0382111561544457600080fd5b6020019150368190038213156150ff57600080fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b803560048110612b7757600080fd5b6000602082840312156154dc57600080fd5b61434b826154bb565b6020808252600b908201526a454d5054595f415252415960a81b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156155345761553461550a565b5060010190565b6020808252600c908201526b0aea49e9c8ebe988a9c8ea8960a31b604082015260600190565b6020808252600790820152664e4f5f4e4f444560c81b604082015260600190565b60005b8381101561559d578181015183820152602001615585565b83811115613fa45750506000910152565b600082516155c0818460208701615582565b9190910192915050565b6000602082840312156155dc57600080fd5b5051919050565b60006001600160401b038083168185168083038211156156055761560561550a565b01949350505050565b60006080828403121561562057600080fd5b615628614f84565b905082601f83011261563957600080fd5b615641614f84565b80604084018581111561565357600080fd5b845b8181101561566d578035845260209384019301615655565b5081845285605f86011261568057600080fd5b615688614f84565b9250829150608085018681111561569e57600080fd5b808210156156c2576156af82614e7d565b845260208401935060208201915061569e565b505060208301525092915050565b6000608082840312156156e257600080fd5b61434b838361560e565b60006001600160401b03808316818114156157095761570961550a565b6001019392505050565b60006001600160401b03838116908316818110156157335761573361550a565b039392505050565b600060a0828403121561574d57600080fd5b615755614f84565b9050615761838361560e565b815261576f608083016154bb565b602082015292915050565b6000610160828403121561578d57600080fd5b604051606081018181106001600160401b03821117156157af576157af614f6e565b6040526157bc848461573b565b81526157cb8460a0850161573b565b60208201526157dd6101408401614e7d565b60408201529392505050565b604081833760006040838101828152908301915b600281101561582c576001600160401b0361581784614e7d565b168252602092830192909101906001016157fd565b50505061583b608082016154bb565b6004811061585957634e487b7160e01b600052602160045260246000fd5b806080840152505050565b8581526101e0810161587960208301876157e9565b61588960c0830160a088016157e9565b6001600160401b0361589e6101408801614e7d565b1661016083015284610180830152836101a0830152826101c08301529695505050505050565b6000828210156158d6576158d661550a565b500390565b83815282602082015260006004831061590457634e487b7160e01b600052602160045260246000fd5b5060f89190911b604082015260410192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082198211156159775761597761550a565b500190565b634e487b7160e01b600052603160045260246000fd5b83815260006020848184015260408301845182860160005b828110156159c6578151845292840192908401906001016159aa565b509198975050505050505050565b60208152600082518060208401526159f3816040850160208701615582565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220eda4d79009e675dadfa4089a12d6a3ece2a45d0aabd99add19752d926b446a8764736f6c63430008090033",
}

// RollupAdminLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupAdminLogicMetaData.ABI instead.
var RollupAdminLogicABI = RollupAdminLogicMetaData.ABI

// RollupAdminLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupAdminLogicMetaData.Bin instead.
var RollupAdminLogicBin = RollupAdminLogicMetaData.Bin

// DeployRollupAdminLogic deploys a new Ethereum contract, binding an instance of RollupAdminLogic to it.
func DeployRollupAdminLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupAdminLogic, error) {
	parsed, err := RollupAdminLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupAdminLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// RollupAdminLogic is an auto generated Go binding around an Ethereum contract.
type RollupAdminLogic struct {
	RollupAdminLogicCaller     // Read-only binding to the contract
	RollupAdminLogicTransactor // Write-only binding to the contract
	RollupAdminLogicFilterer   // Log filterer for contract events
}

// RollupAdminLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupAdminLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupAdminLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupAdminLogicSession struct {
	Contract     *RollupAdminLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupAdminLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupAdminLogicCallerSession struct {
	Contract *RollupAdminLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupAdminLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupAdminLogicTransactorSession struct {
	Contract     *RollupAdminLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupAdminLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupAdminLogicRaw struct {
	Contract *RollupAdminLogic // Generic contract binding to access the raw methods on
}

// RollupAdminLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupAdminLogicCallerRaw struct {
	Contract *RollupAdminLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupAdminLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactorRaw struct {
	Contract *RollupAdminLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupAdminLogic creates a new instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogic(address common.Address, backend bind.ContractBackend) (*RollupAdminLogic, error) {
	contract, err := bindRollupAdminLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// NewRollupAdminLogicCaller creates a new read-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupAdminLogicCaller, error) {
	contract, err := bindRollupAdminLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicCaller{contract: contract}, nil
}

// NewRollupAdminLogicTransactor creates a new write-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupAdminLogicTransactor, error) {
	contract, err := bindRollupAdminLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicTransactor{contract: contract}, nil
}

// NewRollupAdminLogicFilterer creates a new log filterer instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupAdminLogicFilterer, error) {
	contract, err := bindRollupAdminLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicFilterer{contract: contract}, nil
}

// bindRollupAdminLogic binds a generic wrapper to an already deployed contract.
func bindRollupAdminLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupAdminLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.RollupAdminLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked     *big.Int
		Index            uint64
		LatestStakedNode uint64
		CurrentChallenge uint64
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.LatestStakedNode = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupAdminLogic.Contract.CurrentChallenge(&_RollupAdminLogic.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupAdminLogic.Contract.CurrentChallenge(&_RollupAdminLogic.CallOpts, staker)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ExtraChallengeTimeBlocks(&_RollupAdminLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ExtraChallengeTimeBlocks(&_RollupAdminLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupAdminLogic.Contract.FirstUnresolvedNode(&_RollupAdminLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupAdminLogic.Contract.FirstUnresolvedNode(&_RollupAdminLogic.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupAdminLogic *RollupAdminLogicSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupAdminLogic.Contract.GetNode(&_RollupAdminLogic.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupAdminLogic.Contract.GetNode(&_RollupAdminLogic.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetNodeCreationBlockForLogLookup(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getNodeCreationBlockForLogLookup", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetNodeCreationBlockForLogLookup(&_RollupAdminLogic.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetNodeCreationBlockForLogLookup(&_RollupAdminLogic.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsStakedOnLatestConfirmed(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isStakedOnLatestConfirmed", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStakedOnLatestConfirmed(&_RollupAdminLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStakedOnLatestConfirmed(&_RollupAdminLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsZombie(&_RollupAdminLogic.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsZombie(&_RollupAdminLogic.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) LastStakeBlock() (uint64, error) {
	return _RollupAdminLogic.Contract.LastStakeBlock(&_RollupAdminLogic.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LastStakeBlock() (uint64, error) {
	return _RollupAdminLogic.Contract.LastStakeBlock(&_RollupAdminLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestConfirmed() (uint64, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestConfirmed() (uint64, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestNodeCreated() (uint64, error) {
	return _RollupAdminLogic.Contract.LatestNodeCreated(&_RollupAdminLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestNodeCreated() (uint64, error) {
	return _RollupAdminLogic.Contract.LatestNodeCreated(&_RollupAdminLogic.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupAdminLogic.Contract.LatestStakedNode(&_RollupAdminLogic.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupAdminLogic.Contract.LatestStakedNode(&_RollupAdminLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.NodeHasStaker(&_RollupAdminLogic.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.NodeHasStaker(&_RollupAdminLogic.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorUtils() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorUtils(&_RollupAdminLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorUtils(&_RollupAdminLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupAdminLogic.Contract.ZombieAddress(&_RollupAdminLogic.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupAdminLogic.Contract.ZombieAddress(&_RollupAdminLogic.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) ZombieCount() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ZombieCount(&_RollupAdminLogic.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ZombieCount() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ZombieCount(&_RollupAdminLogic.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupAdminLogic.Contract.ZombieLatestStakedNode(&_RollupAdminLogic.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupAdminLogic.Contract.ZombieLatestStakedNode(&_RollupAdminLogic.CallOpts, zombieNum)
}

// CreateNitroMigrationGenesis is a paid mutator transaction binding the contract method 0x7b83a3fe.
//
// Solidity: function createNitroMigrationGenesis((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) CreateNitroMigrationGenesis(opts *bind.TransactOpts, assertion Assertion) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "createNitroMigrationGenesis", assertion)
}

// CreateNitroMigrationGenesis is a paid mutator transaction binding the contract method 0x7b83a3fe.
//
// Solidity: function createNitroMigrationGenesis((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) CreateNitroMigrationGenesis(assertion Assertion) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.CreateNitroMigrationGenesis(&_RollupAdminLogic.TransactOpts, assertion)
}

// CreateNitroMigrationGenesis is a paid mutator transaction binding the contract method 0x7b83a3fe.
//
// Solidity: function createNitroMigrationGenesis((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) CreateNitroMigrationGenesis(assertion Assertion) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.CreateNitroMigrationGenesis(&_RollupAdminLogic.TransactOpts, assertion)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceConfirmNode(opts *bind.TransactOpts, nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceConfirmNode", nodeNum, blockHash, sendRoot)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceConfirmNode(nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmNode(&_RollupAdminLogic.TransactOpts, nodeNum, blockHash, sendRoot)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceConfirmNode(nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmNode(&_RollupAdminLogic.TransactOpts, nodeNum, blockHash, sendRoot)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceCreateNode(opts *bind.TransactOpts, prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion Assertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceCreateNode", prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceCreateNode(prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion Assertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateNode(&_RollupAdminLogic.TransactOpts, prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceCreateNode(prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion Assertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateNode(&_RollupAdminLogic.TransactOpts, prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceRefundStaker(opts *bind.TransactOpts, staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceRefundStaker", staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stakerA, address[] stakerB) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceResolveChallenge(opts *bind.TransactOpts, stakerA []common.Address, stakerB []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceResolveChallenge", stakerA, stakerB)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stakerA, address[] stakerB) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceResolveChallenge(stakerA []common.Address, stakerB []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceResolveChallenge(&_RollupAdminLogic.TransactOpts, stakerA, stakerB)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stakerA, address[] stakerB) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceResolveChallenge(stakerA []common.Address, stakerB []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceResolveChallenge(&_RollupAdminLogic.TransactOpts, stakerA, stakerB)
}

// Initialize is a paid mutator transaction binding the contract method 0x27aa19bd.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x27aa19bd.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x27aa19bd.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetExtraChallengeTimeBlocks(opts *bind.TransactOpts, newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setExtraChallengeTimeBlocks", newExtraTimeBlocks)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetExtraChallengeTimeBlocks(newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetExtraChallengeTimeBlocks(&_RollupAdminLogic.TransactOpts, newExtraTimeBlocks)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetExtraChallengeTimeBlocks(newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetExtraChallengeTimeBlocks(&_RollupAdminLogic.TransactOpts, newExtraTimeBlocks)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetInbox(opts *bind.TransactOpts, newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setInbox", newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetStakeToken(opts *bind.TransactOpts, newStakeToken common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setStakeToken", newStakeToken)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetStakeToken(newStakeToken common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetStakeToken(&_RollupAdminLogic.TransactOpts, newStakeToken)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetStakeToken(newStakeToken common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetStakeToken(&_RollupAdminLogic.TransactOpts, newStakeToken)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeBeacon(opts *bind.TransactOpts, beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeBeacon", beacon, newImplementation)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeBeacon(beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeBeacon(&_RollupAdminLogic.TransactOpts, beacon, newImplementation)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeBeacon(beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeBeacon(&_RollupAdminLogic.TransactOpts, beacon, newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryTo", newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryToAndCall", newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// RollupAdminLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChangedIterator struct {
	Event *RollupAdminLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAdminChanged represents a AdminChanged event raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupAdminLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAdminChangedIterator{contract: _RollupAdminLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAdminChanged)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAdminChanged(log types.Log) (*RollupAdminLogicAdminChanged, error) {
	event := new(RollupAdminLogicAdminChanged)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgradedIterator struct {
	Event *RollupAdminLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupAdminLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicBeaconUpgradedIterator{contract: _RollupAdminLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicBeaconUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupAdminLogicBeaconUpgraded, error) {
	event := new(RollupAdminLogicBeaconUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeConfirmedIterator struct {
	Event *RollupAdminLogicNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicNodeConfirmed represents a NodeConfirmed event raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*RollupAdminLogicNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicNodeConfirmedIterator{contract: _RollupAdminLogic.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicNodeConfirmed)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseNodeConfirmed(log types.Log) (*RollupAdminLogicNodeConfirmed, error) {
	event := new(RollupAdminLogicNodeConfirmed)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeCreatedIterator struct {
	Event *RollupAdminLogicNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicNodeCreated represents a NodeCreated event raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          Assertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*RollupAdminLogicNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicNodeCreatedIterator{contract: _RollupAdminLogic.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicNodeCreated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseNodeCreated(log types.Log) (*RollupAdminLogicNodeCreated, error) {
	event := new(RollupAdminLogicNodeCreated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeRejectedIterator struct {
	Event *RollupAdminLogicNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicNodeRejected represents a NodeRejected event raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*RollupAdminLogicNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicNodeRejectedIterator{contract: _RollupAdminLogic.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicNodeRejected)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseNodeRejected(log types.Log) (*RollupAdminLogicNodeRejected, error) {
	event := new(RollupAdminLogicNodeRejected)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the RollupAdminLogic contract.
type RollupAdminLogicOwnerFunctionCalledIterator struct {
	Event *RollupAdminLogicOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the RollupAdminLogic contract.
type RollupAdminLogicOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*RollupAdminLogicOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicOwnerFunctionCalledIterator{contract: _RollupAdminLogic.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicOwnerFunctionCalled)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseOwnerFunctionCalled(log types.Log) (*RollupAdminLogicOwnerFunctionCalled, error) {
	event := new(RollupAdminLogicOwnerFunctionCalled)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupAdminLogic contract.
type RollupAdminLogicPausedIterator struct {
	Event *RollupAdminLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicPaused represents a Paused event raised by the RollupAdminLogic contract.
type RollupAdminLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupAdminLogicPausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicPausedIterator{contract: _RollupAdminLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicPaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParsePaused(log types.Log) (*RollupAdminLogicPaused, error) {
	event := new(RollupAdminLogicPaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStartedIterator struct {
	Event *RollupAdminLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupAdminLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupChallengeStartedIterator{contract: _RollupAdminLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupChallengeStarted)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupAdminLogicRollupChallengeStarted, error) {
	event := new(RollupAdminLogicRollupChallengeStarted)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitializedIterator struct {
	Event *RollupAdminLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupInitialized represents a RollupInitialized event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupAdminLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupInitializedIterator{contract: _RollupAdminLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupInitialized)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupAdminLogicRollupInitialized, error) {
	event := new(RollupAdminLogicRollupInitialized)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpausedIterator struct {
	Event *RollupAdminLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUnpaused represents a Unpaused event raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupAdminLogicUnpausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUnpausedIterator{contract: _RollupAdminLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUnpaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUnpaused(log types.Log) (*RollupAdminLogicUnpaused, error) {
	event := new(RollupAdminLogicUnpaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedIterator struct {
	Event *RollupAdminLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgraded represents a Upgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedIterator{contract: _RollupAdminLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgraded(log types.Log) (*RollupAdminLogicUpgraded, error) {
	event := new(RollupAdminLogicUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondaryIterator struct {
	Event *RollupAdminLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedSecondaryIterator{contract: _RollupAdminLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgradedSecondary)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupAdminLogicUpgradedSecondary, error) {
	event := new(RollupAdminLogicUpgradedSecondary)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdatedIterator struct {
	Event *RollupAdminLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupAdminLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserStakeUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserStakeUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupAdminLogicUserStakeUpdated, error) {
	event := new(RollupAdminLogicUserStakeUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupAdminLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupAdminLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupAdminLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreMetaData contains all meta data concerning the RollupCore contract.
var RollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNodeCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakedOnLatestConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// RollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCoreMetaData.ABI instead.
var RollupCoreABI = RollupCoreMetaData.ABI

// RollupCore is an auto generated Go binding around an Ethereum contract.
type RollupCore struct {
	RollupCoreCaller     // Read-only binding to the contract
	RollupCoreTransactor // Write-only binding to the contract
	RollupCoreFilterer   // Log filterer for contract events
}

// RollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCoreSession struct {
	Contract     *RollupCore       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCoreCallerSession struct {
	Contract *RollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// RollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCoreTransactorSession struct {
	Contract     *RollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCoreRaw struct {
	Contract *RollupCore // Generic contract binding to access the raw methods on
}

// RollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCoreCallerRaw struct {
	Contract *RollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCoreTransactorRaw struct {
	Contract *RollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCore creates a new instance of RollupCore, bound to a specific deployed contract.
func NewRollupCore(address common.Address, backend bind.ContractBackend) (*RollupCore, error) {
	contract, err := bindRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCore{RollupCoreCaller: RollupCoreCaller{contract: contract}, RollupCoreTransactor: RollupCoreTransactor{contract: contract}, RollupCoreFilterer: RollupCoreFilterer{contract: contract}}, nil
}

// NewRollupCoreCaller creates a new read-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*RollupCoreCaller, error) {
	contract, err := bindRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreCaller{contract: contract}, nil
}

// NewRollupCoreTransactor creates a new write-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCoreTransactor, error) {
	contract, err := bindRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreTransactor{contract: contract}, nil
}

// NewRollupCoreFilterer creates a new log filterer instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCoreFilterer, error) {
	contract, err := bindRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCoreFilterer{contract: contract}, nil
}

// bindRollupCore binds a generic wrapper to an already deployed contract.
func bindRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupCoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.RollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupCore *RollupCoreCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked     *big.Int
		Index            uint64
		LatestStakedNode uint64
		CurrentChallenge uint64
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.LatestStakedNode = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupCore *RollupCoreSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupCore *RollupCoreCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupCore *RollupCoreCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupCore *RollupCoreSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupCore.Contract.CurrentChallenge(&_RollupCore.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupCore.Contract.CurrentChallenge(&_RollupCore.CallOpts, staker)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupCore.Contract.ExtraChallengeTimeBlocks(&_RollupCore.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupCore.Contract.ExtraChallengeTimeBlocks(&_RollupCore.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupCore *RollupCoreCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupCore *RollupCoreSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupCore.Contract.FirstUnresolvedNode(&_RollupCore.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupCore.Contract.FirstUnresolvedNode(&_RollupCore.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupCore *RollupCoreCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupCore *RollupCoreSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupCore.Contract.GetNode(&_RollupCore.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupCore *RollupCoreCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupCore.Contract.GetNode(&_RollupCore.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_RollupCore *RollupCoreCaller) GetNodeCreationBlockForLogLookup(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getNodeCreationBlockForLogLookup", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_RollupCore *RollupCoreSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _RollupCore.Contract.GetNodeCreationBlockForLogLookup(&_RollupCore.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _RollupCore.Contract.GetNodeCreationBlockForLogLookup(&_RollupCore.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupCore *RollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupCore *RollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupCore *RollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsStakedOnLatestConfirmed(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isStakedOnLatestConfirmed", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStakedOnLatestConfirmed(&_RollupCore.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStakedOnLatestConfirmed(&_RollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsZombie(&_RollupCore.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsZombie(&_RollupCore.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupCore *RollupCoreCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupCore *RollupCoreSession) LastStakeBlock() (uint64, error) {
	return _RollupCore.Contract.LastStakeBlock(&_RollupCore.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) LastStakeBlock() (uint64, error) {
	return _RollupCore.Contract.LastStakeBlock(&_RollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupCore *RollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupCore *RollupCoreSession) LatestConfirmed() (uint64, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) LatestConfirmed() (uint64, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupCore *RollupCoreCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupCore *RollupCoreSession) LatestNodeCreated() (uint64, error) {
	return _RollupCore.Contract.LatestNodeCreated(&_RollupCore.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) LatestNodeCreated() (uint64, error) {
	return _RollupCore.Contract.LatestNodeCreated(&_RollupCore.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupCore *RollupCoreCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupCore *RollupCoreSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupCore.Contract.LatestStakedNode(&_RollupCore.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupCore.Contract.LatestStakedNode(&_RollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupCore.Contract.NodeHasStaker(&_RollupCore.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupCore.Contract.NodeHasStaker(&_RollupCore.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCore *RollupCoreCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCore *RollupCoreSession) ValidatorUtils() (common.Address, error) {
	return _RollupCore.Contract.ValidatorUtils(&_RollupCore.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupCore.Contract.ValidatorUtils(&_RollupCore.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupCore *RollupCoreCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupCore *RollupCoreSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupCore.Contract.ZombieAddress(&_RollupCore.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupCore *RollupCoreCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupCore.Contract.ZombieAddress(&_RollupCore.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupCore *RollupCoreCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupCore *RollupCoreSession) ZombieCount() (*big.Int, error) {
	return _RollupCore.Contract.ZombieCount(&_RollupCore.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) ZombieCount() (*big.Int, error) {
	return _RollupCore.Contract.ZombieCount(&_RollupCore.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupCore *RollupCoreCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupCore *RollupCoreSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupCore.Contract.ZombieLatestStakedNode(&_RollupCore.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupCore.Contract.ZombieLatestStakedNode(&_RollupCore.CallOpts, zombieNum)
}

// RollupCoreNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the RollupCore contract.
type RollupCoreNodeConfirmedIterator struct {
	Event *RollupCoreNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreNodeConfirmed represents a NodeConfirmed event raised by the RollupCore contract.
type RollupCoreNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*RollupCoreNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreNodeConfirmedIterator{contract: _RollupCore.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *RollupCoreNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreNodeConfirmed)
				if err := _RollupCore.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) ParseNodeConfirmed(log types.Log) (*RollupCoreNodeConfirmed, error) {
	event := new(RollupCoreNodeConfirmed)
	if err := _RollupCore.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the RollupCore contract.
type RollupCoreNodeCreatedIterator struct {
	Event *RollupCoreNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreNodeCreated represents a NodeCreated event raised by the RollupCore contract.
type RollupCoreNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          Assertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupCore *RollupCoreFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*RollupCoreNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreNodeCreatedIterator{contract: _RollupCore.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupCore *RollupCoreFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *RollupCoreNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreNodeCreated)
				if err := _RollupCore.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupCore *RollupCoreFilterer) ParseNodeCreated(log types.Log) (*RollupCoreNodeCreated, error) {
	event := new(RollupCoreNodeCreated)
	if err := _RollupCore.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the RollupCore contract.
type RollupCoreNodeRejectedIterator struct {
	Event *RollupCoreNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreNodeRejected represents a NodeRejected event raised by the RollupCore contract.
type RollupCoreNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupCore *RollupCoreFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*RollupCoreNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreNodeRejectedIterator{contract: _RollupCore.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupCore *RollupCoreFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *RollupCoreNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreNodeRejected)
				if err := _RollupCore.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupCore *RollupCoreFilterer) ParseNodeRejected(log types.Log) (*RollupCoreNodeRejected, error) {
	event := new(RollupCoreNodeRejected)
	if err := _RollupCore.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCorePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupCore contract.
type RollupCorePausedIterator struct {
	Event *RollupCorePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCorePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCorePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCorePaused represents a Paused event raised by the RollupCore contract.
type RollupCorePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupCorePausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupCorePausedIterator{contract: _RollupCore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupCorePaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCorePaused)
				if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) ParsePaused(log types.Log) (*RollupCorePaused, error) {
	event := new(RollupCorePaused)
	if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupCore contract.
type RollupCoreRollupChallengeStartedIterator struct {
	Event *RollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupCore contract.
type RollupCoreRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupCore *RollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupChallengeStartedIterator{contract: _RollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupCore *RollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupChallengeStarted)
				if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupCore *RollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupCoreRollupChallengeStarted, error) {
	event := new(RollupCoreRollupChallengeStarted)
	if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupCore contract.
type RollupCoreRollupInitializedIterator struct {
	Event *RollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupInitialized represents a RollupInitialized event raised by the RollupCore contract.
type RollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupInitializedIterator{contract: _RollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupInitialized)
				if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) ParseRollupInitialized(log types.Log) (*RollupCoreRollupInitialized, error) {
	event := new(RollupCoreRollupInitialized)
	if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupCore contract.
type RollupCoreUnpausedIterator struct {
	Event *RollupCoreUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUnpaused represents a Unpaused event raised by the RollupCore contract.
type RollupCoreUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupCoreUnpausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupCoreUnpausedIterator{contract: _RollupCore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupCoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUnpaused)
				if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) ParseUnpaused(log types.Log) (*RollupCoreUnpaused, error) {
	event := new(RollupCoreUnpaused)
	if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupCore contract.
type RollupCoreUserStakeUpdatedIterator struct {
	Event *RollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the RollupCore contract.
type RollupCoreUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserStakeUpdatedIterator{contract: _RollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserStakeUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*RollupCoreUserStakeUpdated, error) {
	event := new(RollupCoreUserStakeUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserWithdrawableFundsUpdatedIterator{contract: _RollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserWithdrawableFundsUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(RollupCoreUserWithdrawableFundsUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorMetaData contains all meta data concerning the RollupCreator contract.
var RollupCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rollupAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inboxAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upgradeExecutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validatorUtils\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"name\":\"RollupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeCreator\",\"outputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManagerTemplate\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"extraChallengeTimeBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"delayBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"futureBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"delaySeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"futureSeconds\",\"type\":\"uint64\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"batchPoster\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxDataSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"deployFactoriesToL2\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGasForRetryables\",\"type\":\"uint256\"}],\"internalType\":\"structRollupCreator.RollupDeploymentParams\",\"name\":\"deployParams\",\"type\":\"tuple\"}],\"name\":\"createRollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2FactoriesDeployer\",\"outputs\":[{\"internalType\":\"contractDeployHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osp\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupAdminLogic\",\"outputs\":[{\"internalType\":\"contractIRollupAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupUserLogic\",\"outputs\":[{\"internalType\":\"contractIRollupUser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"_bridgeCreator\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"_osp\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeManager\",\"name\":\"_challengeManagerLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupAdmin\",\"name\":\"_rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"_rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"contractIUpgradeExecutor\",\"name\":\"_upgradeExecutorLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorWalletCreator\",\"type\":\"address\"},{\"internalType\":\"contractDeployHelper\",\"name\":\"_l2FactoriesDeployer\",\"type\":\"address\"}],\"name\":\"setTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeExecutorLogic\",\"outputs\":[{\"internalType\":\"contractIUpgradeExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// RollupCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCreatorMetaData.ABI instead.
var RollupCreatorABI = RollupCreatorMetaData.ABI

// RollupCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupCreatorMetaData.Bin instead.
var RollupCreatorBin = RollupCreatorMetaData.Bin

// DeployRollupCreator deploys a new Ethereum contract, binding an instance of RollupCreator to it.
func DeployRollupCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupCreator, error) {
	parsed, err := RollupCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// RollupCreator is an auto generated Go binding around an Ethereum contract.
type RollupCreator struct {
	RollupCreatorCaller     // Read-only binding to the contract
	RollupCreatorTransactor // Write-only binding to the contract
	RollupCreatorFilterer   // Log filterer for contract events
}

// RollupCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCreatorSession struct {
	Contract     *RollupCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCreatorCallerSession struct {
	Contract *RollupCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// RollupCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCreatorTransactorSession struct {
	Contract     *RollupCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// RollupCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCreatorRaw struct {
	Contract *RollupCreator // Generic contract binding to access the raw methods on
}

// RollupCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCreatorCallerRaw struct {
	Contract *RollupCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCreatorTransactorRaw struct {
	Contract *RollupCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCreator creates a new instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreator(address common.Address, backend bind.ContractBackend) (*RollupCreator, error) {
	contract, err := bindRollupCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// NewRollupCreatorCaller creates a new read-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorCaller(address common.Address, caller bind.ContractCaller) (*RollupCreatorCaller, error) {
	contract, err := bindRollupCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorCaller{contract: contract}, nil
}

// NewRollupCreatorTransactor creates a new write-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCreatorTransactor, error) {
	contract, err := bindRollupCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTransactor{contract: contract}, nil
}

// NewRollupCreatorFilterer creates a new log filterer instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCreatorFilterer, error) {
	contract, err := bindRollupCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorFilterer{contract: contract}, nil
}

// bindRollupCreator binds a generic wrapper to an already deployed contract.
func bindRollupCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.RollupCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transact(opts, method, params...)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) BridgeCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "bridgeCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ChallengeManagerTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "challengeManagerTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// L2FactoriesDeployer is a free data retrieval call binding the contract method 0xac0425bc.
//
// Solidity: function l2FactoriesDeployer() view returns(address)
func (_RollupCreator *RollupCreatorCaller) L2FactoriesDeployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "l2FactoriesDeployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2FactoriesDeployer is a free data retrieval call binding the contract method 0xac0425bc.
//
// Solidity: function l2FactoriesDeployer() view returns(address)
func (_RollupCreator *RollupCreatorSession) L2FactoriesDeployer() (common.Address, error) {
	return _RollupCreator.Contract.L2FactoriesDeployer(&_RollupCreator.CallOpts)
}

// L2FactoriesDeployer is a free data retrieval call binding the contract method 0xac0425bc.
//
// Solidity: function l2FactoriesDeployer() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) L2FactoriesDeployer() (common.Address, error) {
	return _RollupCreator.Contract.L2FactoriesDeployer(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Osp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "osp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupAdminLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupAdminLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupUserLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupUserLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// UpgradeExecutorLogic is a free data retrieval call binding the contract method 0x030cb85e.
//
// Solidity: function upgradeExecutorLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) UpgradeExecutorLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "upgradeExecutorLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UpgradeExecutorLogic is a free data retrieval call binding the contract method 0x030cb85e.
//
// Solidity: function upgradeExecutorLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) UpgradeExecutorLogic() (common.Address, error) {
	return _RollupCreator.Contract.UpgradeExecutorLogic(&_RollupCreator.CallOpts)
}

// UpgradeExecutorLogic is a free data retrieval call binding the contract method 0x030cb85e.
//
// Solidity: function upgradeExecutorLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) UpgradeExecutorLogic() (common.Address, error) {
	return _RollupCreator.Contract.UpgradeExecutorLogic(&_RollupCreator.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCreator *RollupCreatorSession) ValidatorUtils() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorUtils(&_RollupCreator.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorUtils(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x9dca3728.
//
// Solidity: function createRollup(((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)),address,address[],uint256,address,bool,uint256) deployParams) payable returns(address)
func (_RollupCreator *RollupCreatorTransactor) CreateRollup(opts *bind.TransactOpts, deployParams RollupCreatorRollupDeploymentParams) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "createRollup", deployParams)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x9dca3728.
//
// Solidity: function createRollup(((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)),address,address[],uint256,address,bool,uint256) deployParams) payable returns(address)
func (_RollupCreator *RollupCreatorSession) CreateRollup(deployParams RollupCreatorRollupDeploymentParams) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, deployParams)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x9dca3728.
//
// Solidity: function createRollup(((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)),address,address[],uint256,address,bool,uint256) deployParams) payable returns(address)
func (_RollupCreator *RollupCreatorTransactorSession) CreateRollup(deployParams RollupCreatorRollupDeploymentParams) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, deployParams)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xac9a97b4.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _upgradeExecutorLogic, address _validatorUtils, address _validatorWalletCreator, address _l2FactoriesDeployer) returns()
func (_RollupCreator *RollupCreatorTransactor) SetTemplates(opts *bind.TransactOpts, _bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _upgradeExecutorLogic common.Address, _validatorUtils common.Address, _validatorWalletCreator common.Address, _l2FactoriesDeployer common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "setTemplates", _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _upgradeExecutorLogic, _validatorUtils, _validatorWalletCreator, _l2FactoriesDeployer)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xac9a97b4.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _upgradeExecutorLogic, address _validatorUtils, address _validatorWalletCreator, address _l2FactoriesDeployer) returns()
func (_RollupCreator *RollupCreatorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _upgradeExecutorLogic common.Address, _validatorUtils common.Address, _validatorWalletCreator common.Address, _l2FactoriesDeployer common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _upgradeExecutorLogic, _validatorUtils, _validatorWalletCreator, _l2FactoriesDeployer)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xac9a97b4.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _upgradeExecutorLogic, address _validatorUtils, address _validatorWalletCreator, address _l2FactoriesDeployer) returns()
func (_RollupCreator *RollupCreatorTransactorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _upgradeExecutorLogic common.Address, _validatorUtils common.Address, _validatorWalletCreator common.Address, _l2FactoriesDeployer common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _upgradeExecutorLogic, _validatorUtils, _validatorWalletCreator, _l2FactoriesDeployer)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupCreator *RollupCreatorTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupCreator *RollupCreatorSession) Receive() (*types.Transaction, error) {
	return _RollupCreator.Contract.Receive(&_RollupCreator.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupCreator *RollupCreatorTransactorSession) Receive() (*types.Transaction, error) {
	return _RollupCreator.Contract.Receive(&_RollupCreator.TransactOpts)
}

// RollupCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferredIterator struct {
	Event *RollupCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RollupCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorOwnershipTransferredIterator{contract: _RollupCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RollupCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorOwnershipTransferred)
				if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*RollupCreatorOwnershipTransferred, error) {
	event := new(RollupCreatorOwnershipTransferred)
	if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorRollupCreatedIterator is returned from FilterRollupCreated and is used to iterate over the raw logs and unpacked data for RollupCreated events raised by the RollupCreator contract.
type RollupCreatorRollupCreatedIterator struct {
	Event *RollupCreatorRollupCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorRollupCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorRollupCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorRollupCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorRollupCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorRollupCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorRollupCreated represents a RollupCreated event raised by the RollupCreator contract.
type RollupCreatorRollupCreated struct {
	RollupAddress          common.Address
	NativeToken            common.Address
	InboxAddress           common.Address
	Outbox                 common.Address
	RollupEventInbox       common.Address
	ChallengeManager       common.Address
	AdminProxy             common.Address
	SequencerInbox         common.Address
	Bridge                 common.Address
	UpgradeExecutor        common.Address
	ValidatorUtils         common.Address
	ValidatorWalletCreator common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRollupCreated is a free log retrieval operation binding the contract event 0x481277de518d1f364b196166b90219b996fba76138a3dc84e7fe02540eb1cbdb.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address indexed nativeToken, address inboxAddress, address outbox, address rollupEventInbox, address challengeManager, address adminProxy, address sequencerInbox, address bridge, address upgradeExecutor, address validatorUtils, address validatorWalletCreator)
func (_RollupCreator *RollupCreatorFilterer) FilterRollupCreated(opts *bind.FilterOpts, rollupAddress []common.Address, nativeToken []common.Address) (*RollupCreatorRollupCreatedIterator, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}
	var nativeTokenRule []interface{}
	for _, nativeTokenItem := range nativeToken {
		nativeTokenRule = append(nativeTokenRule, nativeTokenItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "RollupCreated", rollupAddressRule, nativeTokenRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorRollupCreatedIterator{contract: _RollupCreator.contract, event: "RollupCreated", logs: logs, sub: sub}, nil
}

// WatchRollupCreated is a free log subscription operation binding the contract event 0x481277de518d1f364b196166b90219b996fba76138a3dc84e7fe02540eb1cbdb.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address indexed nativeToken, address inboxAddress, address outbox, address rollupEventInbox, address challengeManager, address adminProxy, address sequencerInbox, address bridge, address upgradeExecutor, address validatorUtils, address validatorWalletCreator)
func (_RollupCreator *RollupCreatorFilterer) WatchRollupCreated(opts *bind.WatchOpts, sink chan<- *RollupCreatorRollupCreated, rollupAddress []common.Address, nativeToken []common.Address) (event.Subscription, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}
	var nativeTokenRule []interface{}
	for _, nativeTokenItem := range nativeToken {
		nativeTokenRule = append(nativeTokenRule, nativeTokenItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "RollupCreated", rollupAddressRule, nativeTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorRollupCreated)
				if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupCreated is a log parse operation binding the contract event 0x481277de518d1f364b196166b90219b996fba76138a3dc84e7fe02540eb1cbdb.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address indexed nativeToken, address inboxAddress, address outbox, address rollupEventInbox, address challengeManager, address adminProxy, address sequencerInbox, address bridge, address upgradeExecutor, address validatorUtils, address validatorWalletCreator)
func (_RollupCreator *RollupCreatorFilterer) ParseRollupCreated(log types.Log) (*RollupCreatorRollupCreated, error) {
	event := new(RollupCreatorRollupCreated)
	if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdatedIterator struct {
	Event *RollupCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*RollupCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTemplatesUpdatedIterator{contract: _RollupCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *RollupCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorTemplatesUpdated)
				if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*RollupCreatorTemplatesUpdated, error) {
	event := new(RollupCreatorTemplatesUpdated)
	if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxMetaData contains all meta data concerning the RollupEventInbox contract.
var RollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollupNotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b5060805161094261003060003960006102ff01526109426000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80636ae71f121461005c578063c4d66de814610066578063cb23bcb514610079578063cf8d56d6146100a8578063e78cea92146100bb575b600080fd5b6100646100ce565b005b610064610074366004610760565b6102f4565b60015461008c906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100646100b6366004610784565b610482565b60005461008c906001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011c57600080fd5b505afa158015610130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101549190610800565b6001600160a01b0316336001600160a01b0316146102195760015460408051638da5cb5b60e01b8152905133926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156101b057600080fd5b505afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190610800565b604051631194af8760e11b81526001600160a01b039283166004820152911660248201526044015b60405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663cb23bcb56040518163ffffffff1660e01b815260040160206040518083038186803b15801561026857600080fd5b505afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610800565b6001549091506001600160a01b03808316911614156102d25760405163d054909f60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103825760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610210565b6000546001600160a01b0316156103ac57604051633bcd329760e21b815260040160405180910390fd5b6001600160a01b0381166103d357604051631ad0f74360e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040805163cb23bcb560e01b8152905163cb23bcb591600480820192602092909190829003018186803b15801561042757600080fd5b505afa15801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f9190610800565b600180546001600160a01b0319166001600160a01b039290921691909117905550565b6001546001600160a01b031633146104ca5760405162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b6044820152606401610210565b8061050c5760405162461bcd60e51b8152602060048201526012602482015271454d5054595f434841494e5f434f4e46494760701b6044820152606401610210565b600148610517610615565b1561059b57606c6001600160a01b031663f5d6ded76040518163ffffffff1660e01b815260040160206040518083038186803b15801561055657600080fd5b505afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e919061081d565b6105989082610836565b90505b600085838387876040516020016105b695949392919061085c565b604051602081830303815290604052905060006105d2826106ad565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b8360405161060491906108bd565b60405180910390a250505050505050565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b17905290516000918291829160649161065391906108f0565b600060405180830381855afa9150503d806000811461068e576040519150601f19603f3d011682016040523d82523d6000602084013e610693565b606091505b50915091508180156106a6575080516020145b9250505090565b6000805482516020840120604051638db5993b60e01b8152600b60048201526024810184905260448101919091526001600160a01b0390911690638db5993b90606401602060405180830381600087803b15801561070a57600080fd5b505af115801561071e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610742919061081d565b92915050565b6001600160a01b038116811461075d57600080fd5b50565b60006020828403121561077257600080fd5b813561077d81610748565b9392505050565b60008060006040848603121561079957600080fd5b83359250602084013567ffffffffffffffff808211156107b857600080fd5b818601915086601f8301126107cc57600080fd5b8135818111156107db57600080fd5b8760208285010111156107ed57600080fd5b6020830194508093505050509250925092565b60006020828403121561081257600080fd5b815161077d81610748565b60006020828403121561082f57600080fd5b5051919050565b6000821982111561085757634e487b7160e01b600052601160045260246000fd5b500190565b85815260ff60f81b8560f81b1660208201528360218201528183604183013760009101604101908152949350505050565b60005b838110156108a8578181015183820152602001610890565b838111156108b7576000848401525b50505050565b60208152600082518060208401526108dc81604085016020870161088d565b601f01601f19169190910160400192915050565b6000825161090281846020870161088d565b919091019291505056fea264697066735822122018051acbfc744fb96cc37d85db7a248f7fc7614764bd7e3a7349754c8f2a3b8164736f6c63430008090033",
}

// RollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupEventInboxMetaData.ABI instead.
var RollupEventInboxABI = RollupEventInboxMetaData.ABI

// RollupEventInboxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupEventInboxMetaData.Bin instead.
var RollupEventInboxBin = RollupEventInboxMetaData.Bin

// DeployRollupEventInbox deploys a new Ethereum contract, binding an instance of RollupEventInbox to it.
func DeployRollupEventInbox(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupEventInbox, error) {
	parsed, err := RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupEventInboxBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// RollupEventInbox is an auto generated Go binding around an Ethereum contract.
type RollupEventInbox struct {
	RollupEventInboxCaller     // Read-only binding to the contract
	RollupEventInboxTransactor // Write-only binding to the contract
	RollupEventInboxFilterer   // Log filterer for contract events
}

// RollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupEventInboxSession struct {
	Contract     *RollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupEventInboxCallerSession struct {
	Contract *RollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupEventInboxTransactorSession struct {
	Contract     *RollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupEventInboxRaw struct {
	Contract *RollupEventInbox // Generic contract binding to access the raw methods on
}

// RollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupEventInboxCallerRaw struct {
	Contract *RollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// RollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactorRaw struct {
	Contract *RollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupEventInbox creates a new instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInbox(address common.Address, backend bind.ContractBackend) (*RollupEventInbox, error) {
	contract, err := bindRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// NewRollupEventInboxCaller creates a new read-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*RollupEventInboxCaller, error) {
	contract, err := bindRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxCaller{contract: contract}, nil
}

// NewRollupEventInboxTransactor creates a new write-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupEventInboxTransactor, error) {
	contract, err := bindRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxTransactor{contract: contract}, nil
}

// NewRollupEventInboxFilterer creates a new log filterer instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupEventInboxFilterer, error) {
	contract, err := bindRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxFilterer{contract: contract}, nil
}

// bindRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.RollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _RollupEventInbox.Contract.UpdateRollupAddress(&_RollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _RollupEventInbox.Contract.UpdateRollupAddress(&_RollupEventInbox.TransactOpts)
}

// RollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredIterator struct {
	Event *RollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDelivered)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*RollupEventInboxInboxMessageDelivered, error) {
	event := new(RollupEventInboxInboxMessageDelivered)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *RollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*RollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupLibMetaData contains all meta data concerning the RollupLib contract.
var RollupLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b619bb414b8fadd0a6e518fd31591071347a151b7659008b79678a0b775030ed64736f6c63430008090033",
}

// RollupLibABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupLibMetaData.ABI instead.
var RollupLibABI = RollupLibMetaData.ABI

// RollupLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupLibMetaData.Bin instead.
var RollupLibBin = RollupLibMetaData.Bin

// DeployRollupLib deploys a new Ethereum contract, binding an instance of RollupLib to it.
func DeployRollupLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupLib, error) {
	parsed, err := RollupLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// RollupLib is an auto generated Go binding around an Ethereum contract.
type RollupLib struct {
	RollupLibCaller     // Read-only binding to the contract
	RollupLibTransactor // Write-only binding to the contract
	RollupLibFilterer   // Log filterer for contract events
}

// RollupLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupLibSession struct {
	Contract     *RollupLib        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupLibCallerSession struct {
	Contract *RollupLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// RollupLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupLibTransactorSession struct {
	Contract     *RollupLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// RollupLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupLibRaw struct {
	Contract *RollupLib // Generic contract binding to access the raw methods on
}

// RollupLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupLibCallerRaw struct {
	Contract *RollupLibCaller // Generic read-only contract binding to access the raw methods on
}

// RollupLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupLibTransactorRaw struct {
	Contract *RollupLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupLib creates a new instance of RollupLib, bound to a specific deployed contract.
func NewRollupLib(address common.Address, backend bind.ContractBackend) (*RollupLib, error) {
	contract, err := bindRollupLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// NewRollupLibCaller creates a new read-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibCaller(address common.Address, caller bind.ContractCaller) (*RollupLibCaller, error) {
	contract, err := bindRollupLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibCaller{contract: contract}, nil
}

// NewRollupLibTransactor creates a new write-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupLibTransactor, error) {
	contract, err := bindRollupLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibTransactor{contract: contract}, nil
}

// NewRollupLibFilterer creates a new log filterer instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupLibFilterer, error) {
	contract, err := bindRollupLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupLibFilterer{contract: contract}, nil
}

// bindRollupLib binds a generic wrapper to an already deployed contract.
func bindRollupLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.RollupLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transact(opts, method, params...)
}

// RollupProxyMetaData contains all meta data concerning the RollupProxy contract.
var RollupProxyMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"extraChallengeTimeBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"delayBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"futureBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"delaySeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"futureSeconds\",\"type\":\"uint64\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initializeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610e97806100206000396000f3fe6080604052600436106100225760003560e01c8063e970b3371461003957610031565b366100315761002f610059565b005b61002f610059565b34801561004557600080fd5b5061002f610054366004610a14565b61006b565b610069610064610182565b61024b565b565b6000610075610274565b6001600160a01b031614801561009b57506000610090610295565b6001600160a01b0316145b80156100b7575060006100ac6102ab565b6001600160a01b0316145b1561017a576101768160c001516327aa19bd60e01b84846040516024016100df929190610c51565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925260e08501518683015192516001600160a01b039093166024840152909163189acdbd60e31b9060440160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915260a08701516102c1565b5050565b610176610059565b600060043610156101c85760405162461bcd60e51b815260206004820152600b60248201526a4e4f5f46554e435f53494760a81b60448201526064015b60405180910390fd5b6000336101d3610274565b6001600160a01b031614156101ef576101ea610295565b6101f7565b6101f76102ab565b90506001600160a01b0381163b6102465760405162461bcd60e51b815260206004820152601360248201527215105491d15517d393d517d0d3d395149050d5606a1b60448201526064016101bf565b919050565b3660008037600080366000845af43d6000803e80801561026a573d6000f35b3d6000fd5b505050565b6000600080516020610ddb8339815191525b546001600160a01b0316919050565b6000600080516020610dfb833981519152610286565b6000600080516020610e42833981519152610286565b6102ec60017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104610d70565b600080516020610ddb8339815191521461030857610308610d95565b61033360017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610d70565b600080516020610dfb8339815191521461034f5761034f610d95565b61037a60017f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546e610d70565b600080516020610e428339815191521461039657610396610d95565b61039f816103be565b6103ab85856000610415565b6103b783836000610440565b5050505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103e7610274565b604080516001600160a01b03928316815291841660208301520160405180910390a161041281610449565b50565b61041e836104e0565b60008251118061042b5750805b1561026f5761043a8383610520565b50505050565b61041e8361054c565b6001600160a01b0381166104ae5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016101bf565b80600080516020610ddb8339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6104e98161058c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606105458383604051806060016040528060278152602001610e1b6027913961060e565b9392505050565b610555816106eb565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b6001600160a01b0381163b6105f95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016101bf565b80600080516020610dfb8339815191526104bf565b60606001600160a01b0384163b6106765760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101bf565b600080856001600160a01b0316856040516106919190610dab565b600060405180830381855af49150503d80600081146106cc576040519150601f19603f3d011682016040523d82523d6000602084013e6106d1565b606091505b50915091506106e1828286610777565b9695505050505050565b6001600160a01b0381163b6107625760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e74604482015276185d1a5bdb881a5cc81b9bdd08184818dbdb9d1c9858dd604a1b60648201526084016101bf565b80600080516020610e428339815191526104bf565b60608315610786575081610545565b8251156107965782518084602001fd5b8160405162461bcd60e51b81526004016101bf9190610dc7565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b03811182821017156107e9576107e96107b0565b60405290565b60405161016081016001600160401b03811182821017156107e9576107e96107b0565b80356001600160401b038116811461024657600080fd5b80356001600160a01b038116811461024657600080fd5b600082601f83011261085157600080fd5b81356001600160401b038082111561086b5761086b6107b0565b604051601f8301601f19908116603f01168101908282118183101715610893576108936107b0565b816040528381528660208588010111156108ac57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000608082840312156108de57600080fd5b604051608081018181106001600160401b0382111715610900576109006107b0565b60405290508061090f83610812565b815261091d60208401610812565b602082015261092e60408401610812565b604082015261093f60608401610812565b60608201525092915050565b6000610140828403121561095e57600080fd5b6109666107c6565b905061097182610829565b815261097f60208301610829565b602082015261099060408301610829565b60408201526109a160608301610829565b60608201526109b260808301610829565b60808201526109c360a08301610829565b60a08201526109d460c08301610829565b60c08201526109e560e08301610829565b60e08201526101006109f8818401610829565b90820152610120610a0a838201610829565b9082015292915050565b6000806101608385031215610a2857600080fd5b82356001600160401b0380821115610a3f57600080fd5b908401906101c08287031215610a5457600080fd5b610a5c6107ef565b610a6583610812565b8152610a7360208401610812565b6020820152610a8460408401610829565b60408201526060830135606082015260808301356080820152610aa960a08401610829565b60a0820152610aba60c08401610829565b60c082015260e083013560e08201526101008084013583811115610add57600080fd5b610ae989828701610840565b8284015250506101209150610aff828401610812565b828201526101409150610b14878385016108cc565b82820152809450505050610b2b846020850161094b565b90509250929050565b6001600160a01b03169052565b60005b83811015610b5c578181015183820152602001610b44565b8381111561043a5750506000910152565b60008151808452610b85816020860160208601610b41565b601f01601f19169290920160200192915050565b610ba4828251610b34565b6020810151610bb66020840182610b34565b506040810151610bc96040840182610b34565b506060810151610bdc6060840182610b34565b506080810151610bef6080840182610b34565b5060a0810151610c0260a0840182610b34565b5060c0810151610c1560c0840182610b34565b5060e0810151610c2860e0840182610b34565b5061010080820151610c3c82850182610b34565b50506101208082015161043a82850182610b34565b6000610160808352610c6e81840186516001600160401b03169052565b5060208401516001600160401b03166101808301526040840151610c966101a0840182610b34565b5060608401516101c0818185015260808601516101e085015260a08601519150610cc4610200850183610b34565b60c08601519150610cd9610220850183610b34565b60e086015161024085015261010086015191508061026085015250610d02610320840182610b6d565b9050610120850151610d206102808501826001600160401b03169052565b5061014085015180516001600160401b039081166102a0860152602082015181166102c0860152604082015181166102e08601526060820151166103008501525090506105456020830184610b99565b600082821015610d9057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60008251610dbd818460208701610b41565b9190910192915050565b6020815260006105456020830184610b6d56feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65642b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546da264697066735822122021fffb16548bb117105a587c8b10cd0e0c5019b41f1efed33e0f7502928883f464736f6c63430008090033",
}

// RollupProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupProxyMetaData.ABI instead.
var RollupProxyABI = RollupProxyMetaData.ABI

// RollupProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupProxyMetaData.Bin instead.
var RollupProxyBin = RollupProxyMetaData.Bin

// DeployRollupProxy deploys a new Ethereum contract, binding an instance of RollupProxy to it.
func DeployRollupProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupProxy, error) {
	parsed, err := RollupProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// RollupProxy is an auto generated Go binding around an Ethereum contract.
type RollupProxy struct {
	RollupProxyCaller     // Read-only binding to the contract
	RollupProxyTransactor // Write-only binding to the contract
	RollupProxyFilterer   // Log filterer for contract events
}

// RollupProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupProxySession struct {
	Contract     *RollupProxy      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupProxyCallerSession struct {
	Contract *RollupProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// RollupProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupProxyTransactorSession struct {
	Contract     *RollupProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// RollupProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupProxyRaw struct {
	Contract *RollupProxy // Generic contract binding to access the raw methods on
}

// RollupProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupProxyCallerRaw struct {
	Contract *RollupProxyCaller // Generic read-only contract binding to access the raw methods on
}

// RollupProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupProxyTransactorRaw struct {
	Contract *RollupProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupProxy creates a new instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxy(address common.Address, backend bind.ContractBackend) (*RollupProxy, error) {
	contract, err := bindRollupProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// NewRollupProxyCaller creates a new read-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyCaller(address common.Address, caller bind.ContractCaller) (*RollupProxyCaller, error) {
	contract, err := bindRollupProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyCaller{contract: contract}, nil
}

// NewRollupProxyTransactor creates a new write-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupProxyTransactor, error) {
	contract, err := bindRollupProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyTransactor{contract: contract}, nil
}

// NewRollupProxyFilterer creates a new log filterer instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupProxyFilterer, error) {
	contract, err := bindRollupProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupProxyFilterer{contract: contract}, nil
}

// bindRollupProxy binds a generic wrapper to an already deployed contract.
func bindRollupProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupProxyMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.RollupProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transact(opts, method, params...)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0xe970b337.
//
// Solidity: function initializeProxy((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxyTransactor) InitializeProxy(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.contract.Transact(opts, "initializeProxy", config, connectedContracts)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0xe970b337.
//
// Solidity: function initializeProxy((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxySession) InitializeProxy(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.Contract.InitializeProxy(&_RollupProxy.TransactOpts, config, connectedContracts)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0xe970b337.
//
// Solidity: function initializeProxy((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint64,uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxyTransactorSession) InitializeProxy(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.Contract.InitializeProxy(&_RollupProxy.TransactOpts, config, connectedContracts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxySession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// RollupProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupProxy contract.
type RollupProxyAdminChangedIterator struct {
	Event *RollupProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyAdminChanged represents a AdminChanged event raised by the RollupProxy contract.
type RollupProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupProxyAdminChangedIterator, error) {

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupProxyAdminChangedIterator{contract: _RollupProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyAdminChanged)
				if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) ParseAdminChanged(log types.Log) (*RollupProxyAdminChanged, error) {
	event := new(RollupProxyAdminChanged)
	if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupProxy contract.
type RollupProxyBeaconUpgradedIterator struct {
	Event *RollupProxyBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyBeaconUpgraded represents a BeaconUpgraded event raised by the RollupProxy contract.
type RollupProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyBeaconUpgradedIterator{contract: _RollupProxy.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyBeaconUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) ParseBeaconUpgraded(log types.Log) (*RollupProxyBeaconUpgraded, error) {
	event := new(RollupProxyBeaconUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupProxy contract.
type RollupProxyUpgradedIterator struct {
	Event *RollupProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgraded represents a Upgraded event raised by the RollupProxy contract.
type RollupProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedIterator{contract: _RollupProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgraded(log types.Log) (*RollupProxyUpgraded, error) {
	event := new(RollupProxyUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupProxy contract.
type RollupProxyUpgradedSecondaryIterator struct {
	Event *RollupProxyUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgradedSecondary represents a UpgradedSecondary event raised by the RollupProxy contract.
type RollupProxyUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedSecondaryIterator{contract: _RollupProxy.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgradedSecondary)
				if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgradedSecondary(log types.Log) (*RollupProxyUpgradedSecondary, error) {
	event := new(RollupProxyUpgradedSecondary)
	if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicMetaData contains all meta data concerning the RollupUserLogic contract.
var RollupUserLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VALIDATOR_AFK_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winningStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"losingStaker\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedBlocks\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNodeCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakedOnLatestConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"newStakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structAssertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e0604052620000196200003a60201b62002f0d1760201c565b15156080523060a0524660c0523480156200003357600080fd5b5062000115565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b1790529051600091829182916064916200007a9190620000d7565b600060405180830381855afa9150503d8060008114620000b7576040519150601f19603f3d011682016040523d82523d6000602084013e620000bc565b606091505b5091509150818015620000d0575080516020145b9250505090565b6000825160005b81811015620000fa5760208186018101518583015201620000de565b818111156200010a576000828501525b509190910192915050565b60805160a05160c051615f976200015a6000396000612a6d0152600081816112d001528181612adc0152612b61015260008181612e550152614e030152615f976000f3fe60806040526004361061037a5760003560e01c80637427be51116101d3578063c4d66de811610103578063e8bd49221161009b578063e8bd492214610b7c578063edfd03ed14610c11578063ee35f32714610c31578063ef40a67014610c51578063f065de3f14610c71578063f33e1fac14610c91578063f63a434a14610cb1578063facd743b14610cd1578063fb0e722b14610d0157600080fd5b8063c4d66de814610a7f578063cd205fda14610a9f578063ce11e6ab14610abf578063ced01cfb14610adf578063d01e660214610af2578063d735e21d14610b12578063dcd030aa14610b27578063dff6978714610b47578063e78cea9214610b5c57600080fd5b806391c657e81161017657806391c657e81461087857806392c8134c146108985780639a8a0592146108c5578063a23c44b1146108db578063aa38a6e7146109ea578063aa65af4814610a0a578063b0ebedc714610a2a578063bc45e0ae14610a4a578063c2c2e68e14610a6a57600080fd5b80637427be511461079657806376e7e23b146107b6578063771b2f97146107cc5780637ba9534a146107f35780637e2d2155146108085780638640ce5f146108285780638da5cb5b1461084d5780638ee1a1261461086257600080fd5b806351ed6a30116102ae57806363721d6b1161025157806363721d6b1461069857806365f7f80d146106ad57806367425daf146106cb57806369fd251c146106e05780636b94c33b146107005780636d08d0a2146107205780636ddd3744146107405780636f57644e1461076057806371ef232c1461078057600080fd5b806351ed6a30146105b657806352d1902d146105d657806354ce8961146105eb5780635c617e941461060b5780635c975abb1461062b5780635eb405d51461064357806361373919146106635780636177fd181461067857600080fd5b80632b2af0ab116103215780632b2af0ab146104a15780632e7acfa6146104c15780632f30cabd146104f95780633e96576e1461052f57806345c5b2c71461054f57806345e38b64146105625780634774e576146105785780634ceccfe51461058b5780634d26732d146105a157600080fd5b8063014cc92c1461037f578063023a96fe146103bc5780630357aa49146103dc57806312ab3d3b146103fe57806318baaab9146104285780631aeb55a01461043d5780631b1689e91461045d5780631e83d30f14610481575b600080fd5b34801561038b57600080fd5b50606f5461039f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103c857600080fd5b50606e5461039f906001600160a01b031681565b3480156103e857600080fd5b506103fc6103f7366004615380565b610d21565b005b34801561040a57600080fd5b50607e546104189060ff1681565b60405190151581526020016103b3565b34801561043457600080fd5b506103fc610df4565b34801561044957600080fd5b506103fc6104583660046153d7565b610e6e565b34801561046957600080fd5b50610473607d5481565b6040519081526020016103b3565b34801561048d57600080fd5b506103fc61049c366004615403565b61102e565b3480156104ad57600080fd5b506103fc6104bc366004615403565b611146565b3480156104cd57600080fd5b506065546104e1906001600160401b031681565b6040516001600160401b0390911681526020016103b3565b34801561050557600080fd5b5061047361051436600461541c565b6001600160a01b03166000908152607b602052604090205490565b34801561053b57600080fd5b506104e161054a36600461541c565b6111ea565b6103fc61055d36600461541c565b611218565b34801561056e57600080fd5b5061047360735481565b6103fc610586366004615439565b611281565b34801561059757600080fd5b5061047361b2fa81565b3480156105ad57600080fd5b50610473611295565b3480156105c257600080fd5b5060725461039f906001600160a01b031681565b3480156105e257600080fd5b506104736112c3565b3480156105f757600080fd5b506103fc610606366004615439565b611388565b34801561061757600080fd5b50610473610626366004615476565b6115eb565b34801561063757600080fd5b5060335460ff16610418565b34801561064f57600080fd5b506103fc61065e366004615493565b61163f565b34801561066f57600080fd5b50610473611962565b34801561068457600080fd5b5061041861069336600461541c565b611aed565b3480156106a457600080fd5b50607a54610473565b3480156106b957600080fd5b506075546001600160401b03166104e1565b3480156106d757600080fd5b506103fc611b15565b3480156106ec57600080fd5b506104e16106fb36600461541c565b611b9f565b34801561070c57600080fd5b506103fc61071b36600461541c565b611bcd565b34801561072c57600080fd5b5061047361073b366004615476565b611f05565b34801561074c57600080fd5b5061039f61075b366004615476565b611f88565b34801561076c57600080fd5b506103fc61077b3660046154c6565b611fc1565b34801561078c57600080fd5b50610473607c5481565b3480156107a257600080fd5b506103fc6107b136600461541c565b6125f3565b3480156107c257600080fd5b5061047360675481565b3480156107d857600080fd5b506065546104e190600160401b90046001600160401b031681565b3480156107ff57600080fd5b506104e161274b565b34801561081457600080fd5b506103fc610823366004615493565b612761565b34801561083457600080fd5b50607554600160c01b90046001600160401b03166104e1565b34801561085957600080fd5b5061039f6128c5565b34801561086e57600080fd5b5061047360685481565b34801561088457600080fd5b5061041861089336600461541c565b6128d4565b3480156108a457600080fd5b506108b86108b3366004615476565b612938565b6040516103b39190615566565b3480156108d157600080fd5b5061047360665481565b3480156108e757600080fd5b506109956108f636600461541c565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0316600090815260796020908152604091829020825160a081018452815481526001909101546001600160401b0380821693830193909352600160401b8104831693820193909352600160801b83049091166060820152600160c01b90910460ff161515608082015290565b6040516103b39190600060a0820190508251825260208301516001600160401b038082166020850152806040860151166040850152806060860151166060850152505060808301511515608083015292915050565b3480156109f657600080fd5b50606d5461039f906001600160a01b031681565b348015610a1657600080fd5b50610418610a25366004615662565b6129f0565b348015610a3657600080fd5b50610473610a4536600461569b565b612a27565b348015610a5657600080fd5b5060705461039f906001600160a01b031681565b348015610a7657600080fd5b506103fc612a47565b348015610a8b57600080fd5b506103fc610a9a36600461541c565b612ad1565b348015610aab57600080fd5b506072546001600160a01b03161515610418565b348015610acb57600080fd5b50606b5461039f906001600160a01b031681565b6103fc610aed3660046153d7565b612c91565b348015610afe57600080fd5b5061039f610b0d366004615403565b612ca8565b348015610b1e57600080fd5b506104e1612cbd565b348015610b3357600080fd5b50610418610b4236600461541c565b612cd3565b348015610b5357600080fd5b506078546104e1565b348015610b6857600080fd5b50606a5461039f906001600160a01b031681565b348015610b8857600080fd5b50610bd9610b9736600461541c565b607960205260009081526040902080546001909101546001600160401b0380821691600160401b8104821691600160801b82041690600160c01b900460ff1685565b604080519586526001600160401b0394851660208701529284169285019290925290911660608301521515608082015260a0016103b3565b348015610c1d57600080fd5b506103fc610c2c366004615403565b612d16565b348015610c3d57600080fd5b50606c5461039f906001600160a01b031681565b348015610c5d57600080fd5b50610473610c6c36600461541c565b612dff565b348015610c7d57600080fd5b5060715461039f906001600160a01b031681565b348015610c9d57600080fd5b506104e1610cac366004615403565b612e1a565b348015610cbd57600080fd5b50610473610ccc366004615476565b612e51565b348015610cdd57600080fd5b50610418610cec36600461541c565b60746020526000908152604090205460ff1681565b348015610d0d57600080fd5b5060695461039f906001600160a01b031681565b60335460ff1615610d4d5760405162461bcd60e51b8152600401610d44906156d2565b60405180910390fd5b606e546001600160a01b03163314610d965760405162461bcd60e51b815260206004820152600c60248201526b2ba927a723afa9a2a72222a960a11b6044820152606401610d44565b610da08282612fa5565b6001600160401b03168314610de55760405162461bcd60e51b815260206004820152600b60248201526a1393d517d25397d0d2105360aa1b6044820152606401610d44565b610def8282613073565b505050565b607e5460ff1615610e175760405162461bcd60e51b8152600401610d44906156fc565b610e1f613129565b610e5f5760405162461bcd60e51b815260206004820152601160248201527056414c494441544f525f4e4f545f41464b60781b6044820152606401610d44565b607e805460ff19166001179055565b3360009081526074602052604090205460ff1680610e8e5750607e5460ff165b610eaa5760405162461bcd60e51b8152600401610d4490615728565b60335460ff1615610ecd5760405162461bcd60e51b8152600401610d44906156d2565b610ed633612cd3565b610ef25760405162461bcd60e51b8152600401610d449061574f565b610efa612cbd565b6001600160401b0316826001600160401b031610158015610f345750610f1e61274b565b6001600160401b0316826001600160401b031611155b610f785760405162461bcd60e51b81526020600482015260156024820152744e4f44455f4e554d5f4f55545f4f465f52414e474560581b6044820152606401610d44565b6000610f8383613233565b905081816005015414610fc55760405162461bcd60e51b815260206004820152600a6024820152694e4f44455f52454f524760b01b6044820152606401610d44565b60038101546001600160401b0316610fdc336111ea565b6001600160401b0316146110245760405162461bcd60e51b815260206004820152600f60248201526e2727aa2fa9aa20a5a2a22fa82922ab60891b6044820152606401610d44565b610def338461324d565b3360009081526074602052604090205460ff168061104e5750607e5460ff165b61106a5760405162461bcd60e51b8152600401610d4490615728565b60335460ff1615806110ff5750606a546040805163cb23bcb560e01b8152905130926001600160a01b03169163cb23bcb5916004808301926020929190829003018186803b1580156110bb57600080fd5b505afa1580156110cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f39190615773565b6001600160a01b031614155b61111b5760405162461bcd60e51b8152600401610d4490615790565b6111243361329e565b600061112e611295565b90508082101561113c578091505b610def338361330e565b61114e612cbd565b6001600160401b03168110156111985760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d11150d2511151608a1b6044820152606401610d44565b6111a061274b565b6001600160401b03168111156111e75760405162461bcd60e51b815260206004820152600c60248201526b1113d154d39517d1561254d560a21b6044820152606401610d44565b50565b6001600160a01b0316600090815260796020526040902060010154600160401b90046001600160401b031690565b3360009081526074602052604090205460ff16806112385750607e5460ff165b6112545760405162461bcd60e51b8152600401610d4490615728565b60335460ff16156112775760405162461bcd60e51b8152600401610d44906156d2565b6111e781346133c1565b61128a34613433565b610def838383611388565b6000806112a0612cbd565b90506112bd43826112af61274b565b6001600160401b0316613555565b91505090565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113635760405162461bcd60e51b815260206004820152603b60248201527f555550534e6f745570677261646561626c653a206d757374206e6f742062652060448201527f63616c6c6564207468726f7567682064656c656761746563616c6c00000000006064820152608401610d44565b507f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d90565b3360009081526074602052604090205460ff16806113a85750607e5460ff165b6113c45760405162461bcd60e51b8152600401610d4490615728565b60335460ff16156113e75760405162461bcd60e51b8152600401610d44906156d2565b6113f033612cd3565b61140c5760405162461bcd60e51b8152600401610d449061574f565b6000611417336111ea565b9050600061142482612938565b610140015161143c906001600160401b0316436157d1565b905060735481101561147d5760405162461bcd60e51b815260206004820152600a60248201526954494d455f44454c544160b01b6044820152606401610d44565b60026114916101408701610120880161580d565b60038111156114a2576114a26157e8565b14806114d05750826114c46114bf36889003880160a08901615929565b6137bd565b6001600160401b031610155b6115085760405162461bcd60e51b81526020600482015260096024820152681513d3d7d4d350531360ba1b6044820152606401610d44565b600061151c61016087016101408801615476565b6001600160401b0316116115645760405162461bcd60e51b815260206004820152600f60248201526e22a6a82a2cafa0a9a9a2a92a24a7a760891b6044820152606401610d44565b600161157660a087016080880161580d565b6003811115611587576115876157e8565b146115c65760405162461bcd60e51b815260206004820152600f60248201526e4241445f505245565f53544154555360881b6044820152606401610d44565b506115d3848284866137d2565b506115e5336115e061274b565b61324d565b50505050565b6000806115f7607a5490565b90506000805b828110156116375761161285610a2583612ca8565b15611625578161162181615945565b9250505b8061162f81615945565b9150506115fd565b509392505050565b3360009081526074602052604090205460ff168061165f5750607e5460ff165b61167b5760405162461bcd60e51b8152600401610d4490615728565b60335460ff161561169e5760405162461bcd60e51b8152600401610d44906156d2565b6116a6611b15565b60006116b0612cbd565b905060006116bd82613233565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e08701529182048316610100860152810482166101208501529190910416610140820152600582015461016082015290915061176990613dbd565b60755460038201546001600160401b0390811691161461178b5761178b615960565b60038101546000906117a5906001600160401b0316613233565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e08701529182048316610100860152810482166101208501529190910416610140820152600582015461016082015290915061185190613e0c565b61185b6000612d16565b6000611866846115eb565b60038401549091506000908290611885906001600160401b0316611f05565b61188f91906157d1565b6003850154909150600160c01b90046001600160401b031682106118e25760405162461bcd60e51b815260206004820152600a6024820152694e4f5f5354414b45525360b01b6044820152606401610d44565b6003840154611902908290600160c01b90046001600160401b0316615976565b60048401546001600160401b03161461194e5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d0531317d4d51052d15160921b6044820152606401610d44565b611959858888613e5c565b50505050505050565b3360009081526074602052604081205460ff16806119825750607e5460ff165b61199e5760405162461bcd60e51b8152600401610d4490615728565b60335460ff161580611a335750606a546040805163cb23bcb560e01b8152905130926001600160a01b03169163cb23bcb5916004808301926020929190829003018186803b1580156119ef57600080fd5b505afa158015611a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a279190615773565b6001600160a01b031614155b611a4f5760405162461bcd60e51b8152600401610d4490615790565b6000611a5a33613fab565b604051909150600090339083908381818185875af1925050503d8060008114611a9f576040519150601f19603f3d011682016040523d82523d6000602084013e611aa4565b606091505b5050905080611ae75760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610d44565b50905090565b6001600160a01b0316600090815260796020526040902060010154600160c01b900460ff1690565b6000611b1f612cbd565b6001600160401b03169050611b3c6075546001600160401b031690565b6001600160401b031681118015611b635750611b5661274b565b6001600160401b03168111155b6111e75760405162461bcd60e51b815260206004820152600d60248201526c1393d7d553949154d3d3159151609a1b6044820152606401610d44565b6001600160a01b0316600090815260796020526040902060010154600160801b90046001600160401b031690565b3360009081526074602052604090205460ff1680611bed5750607e5460ff165b611c095760405162461bcd60e51b8152600401610d4490615728565b60335460ff1615611c2c5760405162461bcd60e51b8152600401610d44906156d2565b611c34611b15565b6000611c486075546001600160401b031690565b90506000611c54612cbd565b90506000611c6182613233565b60038101549091506001600160401b0384811691161415611ec357611c8584612cd3565b611ca15760405162461bcd60e51b8152600401610d449061574f565b611cbb611cad856111ea565b6001600160401b0316611146565b611cc582856129f0565b15611d055760405162461bcd60e51b815260206004820152601060248201526f14d51052d15117d3d397d5105491d15560821b6044820152606401610d44565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e087015291820483166101008601528104821661012085015291909104166101408201526005820154610160820152611dae90613dbd565b611e60611dba84613233565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e08701529182048316610100860152810482166101208501529190910416610140820152600590910154610160820152613e0c565b611e6a6000612d16565b611e73826115eb565b6003820154600160c01b90046001600160401b031614611ec35760405162461bcd60e51b815260206004820152600b60248201526a4841535f5354414b45525360a81b6044820152606401610d44565b611ecb61402c565b6040516001600160401b038316907feaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad464090600090a250505050565b600080611f11607a5490565b90506000805b82811015611637576000611f2a82614073565b80549091506001600160401b03878116600160a01b9092041614801590611f6257508054611f629087906001600160a01b03166129f0565b15611f755782611f7181615945565b9350505b5080611f8081615945565b915050611f17565b60006078826001600160401b031681548110611fa657611fa661598e565b6000918252602090912001546001600160a01b031692915050565b3360009081526074602052604090205460ff1680611fe15750607e5460ff165b611ffd5760405162461bcd60e51b8152600401610d4490615728565b60335460ff16156120205760405162461bcd60e51b8152600401610d44906156d2565b6120306040880160208901615476565b6001600160401b03166120466020890189615476565b6001600160401b03161061208a5760405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afa7a92222a960a91b6044820152606401610d44565b61209261274b565b6001600160401b03166120ab6040890160208a01615476565b6001600160401b031611156120f15760405162461bcd60e51b815260206004820152600c60248201526b1393d517d41493d413d4d15160a21b6044820152606401610d44565b6120fe6020880188615476565b6001600160401b03166121196075546001600160401b031690565b6001600160401b0316106121635760405162461bcd60e51b81526020600482015260116024820152701053149150511657d0d3d3919254935151607a1b6044820152606401610d44565b600061218388825b60200201602081019061217e9190615476565b613233565b9050600061219289600161216b565b600380820154908401549192506001600160401b039182169116146121e55760405162461bcd60e51b81526020600482015260096024820152682224a3232fa82922ab60b91b6044820152606401610d44565b6122048a60005b6020020160208101906121ff919061541c565b61329e565b61220f8a60016121ec565b61223661221f60208b018b615476565b8b60005b602002016020810190610a25919061541c565b6122775760405162461bcd60e51b815260206004820152601260248201527114d51052d1548c57d393d517d4d51052d15160721b6044820152606401610d44565b61229261228a60408b0160208c01615476565b8b6001612223565b6122d35760405162461bcd60e51b815260206004820152601260248201527114d51052d1548c97d393d517d4d51052d15160721b6044820152606401610d44565b6040805180820182526123549161234491908b90600290839083908082843760009201829052506040805180820190915292508c9150600290835b8282101561233a5761232b60808302850136819003810190615929565b8152602001906001019061230e565b5050505089614099565b85358560005b6020020135614143565b8260010154146123935760405162461bcd60e51b815260206004820152600a6024820152694348414c5f484153483160b01b6044820152606401610d44565b6123a485602086013585600161234a565b8160010154146123e35760405162461bcd60e51b815260206004820152600a60248201526921a420a62fa420a9a41960b11b6044820152606401610d44565b60655460038301546000916001600160401b03600160401b91829004811692612411928935929104166157d1565b6003850154612428906001600160401b0316613233565b600401546124469190600160401b90046001600160401b0316615976565b6124509190615976565b9050602085013581101561248b5761248361246e60208d018d61541c565b61247e60408e0160208f0161541c565b613073565b5050506125e9565b60006124cb8c8b8b8b89600c6124a28d358a6157d1565b6124ac91906159a4565b600c6124bc60208f01358b6157d1565b6124c691906159a4565b614181565b905061254e6124dd60208e018e61541c565b8d60016020020160208101906124f3919061541c565b6001600160a01b03918216600090815260796020526040808220600190810180546001600160401b038916600160801b0267ffffffffffffffff60801b19918216811790925594909516835291200180549091169091179055565b6001600160401b0381167f6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd87361258660208f018f61541c565b8e600160200201602081019061259c919061541c565b8e60006020020160208101906125b29190615476565b604080516001600160a01b0394851681529390921660208401526001600160401b03169082015260600160405180910390a2505050505b5050505050505050565b3360009081526074602052604090205460ff16806126135750607e5460ff165b61262f5760405162461bcd60e51b8152600401610d4490615728565b60335460ff1615806126c45750606a546040805163cb23bcb560e01b8152905130926001600160a01b03169163cb23bcb5916004808301926020929190829003018186803b15801561268057600080fd5b505afa158015612694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b89190615773565b6001600160a01b031614155b6126e05760405162461bcd60e51b8152600401610d4490615790565b6075546001600160401b03166126f5826111ea565b6001600160401b031611156127395760405162461bcd60e51b815260206004820152600a6024820152691513d3d7d49150d1539560b21b6044820152606401610d44565b6127428161329e565b6111e781614240565b607554600160801b90046001600160401b031690565b3360009081526074602052604090205460ff16806127815750607e5460ff165b61279d5760405162461bcd60e51b8152600401610d4490615728565b60335460ff16156127c05760405162461bcd60e51b8152600401610d44906156d2565b607a5482106128025760405162461bcd60e51b815260206004820152600e60248201526d4e4f5f535543485f5a4f4d42494560901b6044820152606401610d44565b600061280d83612ca8565b9050600061281a84612e1a565b90506000806128316075546001600160401b031690565b6001600160401b031690505b80836001600160401b03161015801561285557508482105b1561289457600061286584613233565b905061287184866142f0565b60038101546001600160401b031693508261288b81615945565b9350505061283d565b80836001600160401b031610156128b3576128ae8661443a565b6128bd565b6128bd8684614500565b505050505050565b60006128cf614549565b905090565b6000805b607a5481101561292f57607a81815481106128f5576128f561598e565b6000918252602090912001546001600160a01b038481169116141561291d5750600192915050565b8061292781615945565b9150506128d8565b50600092915050565b612940615246565b61294982613233565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082015260059091015461016082015292915050565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6000612a3d8484846001600160401b0316613555565b90505b9392505050565b607e5460ff1615612a6a5760405162461bcd60e51b8152600401610d44906156fc565b467f00000000000000000000000000000000000000000000000000000000000000001415610e5f5760405162461bcd60e51b815260206004820152601460248201527310d210525397d25117d393d517d0d2105391d15160621b6044820152606401610d44565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415612b5f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610d44565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612b9161457c565b6001600160a01b031614612bfc5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610d44565b6001600160a01b03811615612c465760405162461bcd60e51b815260206004820152601060248201526f1393d7d513d2d15397d0531313d5d15160821b6044820152606401610d44565b6072546001600160a01b0316156111e75760405162461bcd60e51b815260206004820152600f60248201526e046414345545f4e4f545f455243323608c1b6044820152606401610d44565b612c9a34613433565b612ca48282610e6e565b5050565b6000607a8281548110611fa657611fa661598e565b607554600160401b90046001600160401b031690565b6001600160a01b038116600090815260796020526040812060010154600160c01b900460ff168015612a215750607554612a21906001600160401b0316836129f0565b3360009081526074602052604090205460ff1680612d365750607e5460ff165b612d525760405162461bcd60e51b8152600401610d4490615728565b60335460ff1615612d755760405162461bcd60e51b8152600401610d44906156d2565b6000612d80607a5490565b90506000612d966075546001600160401b031690565b6001600160401b03169050825b828110156115e5575b81612db682612e1a565b6001600160401b03161015612ded57612dce8161443a565b82612dd8816159c3565b935050828110612de85750505050565b612dac565b80612df781615945565b915050612da3565b6001600160a01b031660009081526079602052604090205490565b6000607a8281548110612e2f57612e2f61598e565b600091825260209091200154600160a01b90046001600160401b031692915050565b60007f000000000000000000000000000000000000000000000000000000000000000015612eaf576001600160401b0382166000908152607f602052604090205480612a215760405162461bcd60e51b8152600401610d44906159da565b6000612eba83613233565b6003810154909150600160401b90046001600160401b0316612eee5760405162461bcd60e51b8152600401610d44906159da565b60040154600160c01b90046001600160401b031692915050565b919050565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b179052905160009182918291606491612f4b91906159fb565b600060405180830381855afa9150503d8060008114612f86576040519150601f19603f3d011682016040523d82523d6000602084013e612f8b565b606091505b5091509150818015612f9e575080516020145b9250505090565b6001600160a01b03828116600090815260796020526040808220928416825281206001830154919291600160801b90046001600160401b0316806130155760405162461bcd60e51b81526020600482015260076024820152661393d7d0d2105360ca1b6044820152606401610d44565b60018201546001600160401b03828116600160801b909204161461306a5760405162461bcd60e51b815260206004820152600c60248201526b1112519197d25397d0d2105360a21b6044820152606401610d44565b95945050505050565b600061307e82612dff565b9050600061308b84612dff565b9050808211156130ac5761309f838261330e565b6130a990836157d1565b91505b60006130b9600284615a4c565b90506130c585826145a4565b6130cf81846157d1565b9250613103856001600160a01b03166000908152607960205260409020600101805467ffffffffffffffff60801b19169055565b607154613119906001600160a01b031684614609565b613122846146a5565b5050505050565b60008061313761217e61274b565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e08701529182048316610100860152810482166101208501529190910416610140820181905260059092015461016082015291506131e857600091505090565b606554610140820151439161b2fa9161320a916001600160401b031690615a60565b6001600160401b031661321d9190615976565b101561322b57600191505090565b600091505090565b6001600160401b0316600090815260766020526040902090565b6001600160a01b038216600090815260796020526040902061326f828461474b565b60010180546001600160401b03909216600160401b0267ffffffffffffffff60401b1990921691909117905550565b6132a781611aed565b6132c35760405162461bcd60e51b8152600401610d449061574f565b60006132ce82611b9f565b6001600160401b0316146111e75760405162461bcd60e51b8152602060048201526007602482015266125397d0d2105360ca1b6044820152606401610d44565b6001600160a01b038216600090815260796020526040812080548084111561336b5760405162461bcd60e51b815260206004820152601060248201526f544f4f5f4c4954544c455f5354414b4560801b6044820152606401610d44565b600061337785836157d1565b85845590506133868682614609565b60408051838152602081018790526001600160a01b03881691600080516020615f42833981519152910160405180910390a295945050505050565b3360009081526074602052604090205460ff16806133e15750607e5460ff165b6133fd5760405162461bcd60e51b8152600401610d4490615728565b60335460ff16156134205760405162461bcd60e51b8152600401610d44906156d2565b6134298261329e565b612ca482826145a4565b3360009081526074602052604090205460ff16806134535750607e5460ff165b61346f5760405162461bcd60e51b8152600401610d4490615728565b60335460ff16156134925760405162461bcd60e51b8152600401610d44906156d2565b61349b33611aed565b156134b85760405162461bcd60e51b8152600401610d4490615a8b565b6134c1336128d4565b156135015760405162461bcd60e51b815260206004820152601060248201526f5354414b45525f49535f5a4f4d42494560801b6044820152606401610d44565b613509611295565b81101561354b5760405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b6044820152606401610d44565b6111e73382614911565b600081613563600185615ab3565b6001600160401b0316141561357b5750606754612a40565b600061358684613233565b60030154600160401b90046001600160401b03169050808510156135ae575050606754612a40565b6000604051806101400160405280600162ffffff1681526020016201e05b62ffffff1681526020016201f7d162ffffff1681526020016201389162ffffff168152602001620329e162ffffff1681526020016201be4362ffffff1681526020016204cb8c62ffffff1681526020016201fbc462ffffff16815260200162036d3262ffffff1681526020016202797362ffffff1681525090506000604051806101400160405280600162ffffff1681526020016201c03062ffffff1681526020016201b69962ffffff16815260200161fde262ffffff168152602001620265c662ffffff16815260200162013b8e62ffffff168152602001620329e162ffffff1681526020016201389162ffffff1681526020016201f7d162ffffff1681526020016201537562ffffff168152509050600083886136eb91906157d1565b6065549091506000906001600160401b031661370883600a6159a4565b6137129190615a4c565b90506000613721600a83615a4c565b61372c906002615bbf565b905060008561373c600a85615bcb565b600a811061374c5761374c61598e565b60200201516137609062ffffff16836159a4565b9050600085613770600a86615bcb565b600a81106137805761378061598e565b60200201516137949062ffffff1683615a4c565b90508061379f575060015b806067546137ad91906159a4565b9c9b505050505050505050505050565b6020810151600090815b602002015192915050565b600060016137e86101408701610120880161580d565b60038111156137f9576137f96157e8565b1480613827575060026138146101408701610120880161580d565b6003811115613825576138256157e8565b145b6138665760405162461bcd60e51b815260206004820152601060248201526f4241445f41465445525f53544154555360801b6044820152606401610d44565b61386e6152aa565b61387785612938565b6060820152606a54604080516221048360e21b815290516001600160a01b03909216916284120c91600480820192602092909190829003018186803b1580156138bf57600080fd5b505afa1580156138d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138f79190615bdf565b81526060810151516139098786614a6c565b146139485760405162461bcd60e51b815260206004820152600f60248201526e0a0a48aacbea6a882a88abe9082a69608b1b6044820152606401610d44565b600061395f6114bf36899003890160a08a01615929565b905060006139756114bf368a90038a018a615929565b9050806001600160401b0316826001600160401b031610156139cb5760405162461bcd60e51b815260206004820152600f60248201526e494e424f585f4241434b574152445360881b6044820152606401610d44565b806001600160401b0316826001600160401b03161415613a71576139fc6139f7368a90038a018a615929565b614ac6565b6001600160401b0316613a1a6139f7368b90038b0160a08c01615929565b6001600160401b03161015613a715760405162461bcd60e51b815260206004820152601a60248201527f494e424f585f504f535f494e5f4d53475f4241434b57415244530000000000006044820152606401610d44565b6002613a856101408a016101208b0161580d565b6003811115613a9657613a966157e8565b1480613abf57506000613ab46139f7368b90038b0160a08c01615929565b6001600160401b0316115b15613ad25781613ace81615bf8565b9250505b82516001600160401b0383161115613b1d5760405162461bcd60e51b815260206004820152600e60248201526d12539093d617d41054d517d1539160921b6044820152606401610d44565b6001600160401b03821615613bc557606a546001600160a01b03166316bf5579613b48600185615ab3565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b158015613b8757600080fd5b505afa158015613b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbf9190615bdf565b60e08401525b50613bdf9050613bda36889003880188615c5e565b614ad5565b6040820152606554613bfa906001600160401b031643615a60565b6001600160401b0390811660c0830152606082015161012001511615801560a0830152613c4157613c3381606001516101200151613233565b600501546080820152613c51565b6060810151610160015160808201525b613c708160a00151826080015183604001518460e00151606854614b74565b915082821480613c7e575082155b613cc15760405162461bcd60e51b81526020600482015260146024820152730aa9c8ab0a08a86a88a88be9c9e888abe9082a6960631b6044820152606401610d44565b613d09613cd58760a0018360000151614a6c565b613ce6836040015143606854614143565b613cfd613cf8368b90038b018b615c5e565b614be1565b888560c0015187614c0b565b60208201526000613d1861274b565b613d23906001615a60565b90506000613d3087613233565b9050613d3c8183614c5f565b613d498360200151614cd0565b50508181606001516101600151613d5e61274b565b6001600160401b03167f4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d09684604001518a8660e001516068548860000151604051613dac959493929190615d59565b60405180910390a450949350505050565b80608001516001600160401b03164310156111e75760405162461bcd60e51b815260206004820152600f60248201526e4245464f52455f444541444c494e4560881b6044820152606401610d44565b8060a001516001600160401b03164310156111e75760405162461bcd60e51b815260206004820152601060248201526f10d212531117d513d3d7d49150d1539560821b6044820152606401610d44565b6000613e6784613233565b9050613e738383614ebe565b816002015414613eb45760405162461bcd60e51b815260206004820152600c60248201526b434f4e4649524d5f4441544160a01b6044820152606401610d44565b606b54604051630502677360e51b815260048101849052602481018590526001600160a01b039091169063a04cee6090604401600060405180830381600087803b158015613f0157600080fd5b505af1158015613f15573d6000803e3d6000fd5b50506075805467ffffffffffffffff19166001600160401b03881617905550613f419050846001615a60565b6075805467ffffffffffffffff60401b1916600160401b6001600160401b03938416021790556040805185815260208101859052918616917f22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c91015b60405180910390a250505050565b6001600160a01b0381166000908152607b60205260408120805490829055607c80548291908490613fdd9084906157d1565b909155505060408051828152600060208201526001600160a01b038516917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a292915050565b60758054600160401b90046001600160401b031690600861404c83615bf8565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050565b6000607a82815481106140885761408861598e565b906000526020600020019050919050565b604080516002808252606082018352600092839291906020830190803683370190505085519091506140db906140d68660005b6020020151614eda565b614f4e565b816000815181106140ee576140ee61598e565b602090810291909101015261410f85600160200201516140d68660016140cc565b816001815181106141225761412261598e565b60200260200101818152505061306a6000846001600160401b031683615072565b6040805160208101859052908101839052606081018290526000906080015b6040516020818303038152906040528051906020012090509392505050565b606e546000906001600160a01b03166314eab5e785358989896141a760208f018f61541c565b8e60016020020160208101906141bd919061541c565b8a8a6040518963ffffffff1660e01b81526004016141e2989796959493929190615dbb565b602060405180830381600087803b1580156141fc57600080fd5b505af1158015614210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142349190615e6b565b98975050505050505050565b6001600160a01b03811660009081526079602052604081209061426b6075546001600160401b031690565b905061427781846129f0565b156142ac5760018201546001600160401b03828116600160401b90920416146142a2576142a2615960565b6142ac81846142f0565b81546142b88482614609565b6142c184615089565b60408051828152600060208201526001600160a01b03861691600080516020615f428339815191529101613f9d565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff1661433c5760405162461bcd60e51b8152600401610d449061574f565b6001600160401b03821660009081526077602090815260408083206001600160a01b03851684529091528120805460ff1916905561437983613233565b600381018054919250600160c01b9091046001600160401b031690601861439f83615e88565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505060006001600160401b0316836001600160401b03161115610def5760038101546143f6906001600160401b0316613233565b60040180546001600160401b031690600061441083615e88565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050505050565b607a805461444a906001906157d1565b8154811061445a5761445a61598e565b90600052602060002001607a82815481106144775761447761598e565b600091825260209091208254910180546001600160a01b039092166001600160a01b031983168117825592546001600160e01b0319909216909217600160a01b918290046001600160401b0316909102179055607a8054806144db576144db615eab565b600082815260209020810160001990810180546001600160e01b031916905501905550565b80607a83815481106145145761451461598e565b9060005260206000200160000160146101000a8154816001600160401b0302191690836001600160401b031602179055505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d61456d565b6001600160a01b0382166000908152607960205260408120805490916145ca8483615976565b80845560408051848152602081018390529192506001600160a01b03871691600080516020615f42833981519152910160405180910390a25050505050565b6001600160a01b0382166000908152607b60205260408120549061462d8383615976565b6001600160a01b0385166000908152607b60205260408120829055607c8054929350859290919061465f908490615976565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae29101613f9d565b6001600160a01b03808216600081815260796020908152604080832081518083019092529381526001808501546001600160401b03600160401b9091048116938301938452607a8054928301815590945290517ff0440771a29e57e18c66727944770b82cc77924aef333c927ce6bdd2cdb3ae0390910180549251909316600160a01b026001600160e01b031990921694169390931792909217909155612ca482615089565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff16156147985760405162461bcd60e51b8152600401610d4490615a8b565b6001600160401b03821660009081526077602090815260408083206001600160a01b03851684529091528120805460ff191660011790556147d883613233565b6003810154909150600160401b90046001600160401b031661480c5760405162461bcd60e51b8152600401610d44906159da565b6003810154600160c01b90046001600160401b031661482c816001615a60565b6003830180546001600160c01b0316600160c01b6001600160401b03938416021790558416156115e5576003820154600090614870906001600160401b0316613233565b6004810180549192506001600160401b0390911690600061489083615bf8565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050816001600160401b03166000141561312257606554613122906148e1906001600160401b031643615a60565b60038301805467ffffffffffffffff60801b1916600160801b6001600160401b0390931692909202919091179055565b6078805460018082019092557f8dc6fb69531d98d70dc0420e638d2dfd04e09e1ec783ede9aac77da9c5a0dac4810180546001600160a01b0319166001600160a01b0386169081179091556040805160a0810182528581526001600160401b038085166020808401918252607580548416858701908152600060608701818152608088018c81528a835260798652898320985189559551978c0180549351915196519888166001600160801b031990941693909317600160401b918816919091021768ffffffffffffffffff60801b1916600160801b9587169590950260ff60c01b191694909417600160c01b9615158702179055805484168352607782528583208784528252858320805460ff191690991790985587546001600160c01b031643909316909302919091179095558151948552840185905291929091600080516020615f42833981519152910160405180910390a2505050565b6000614a85614a8036859003850185615929565b614eda565b82614a9660a086016080870161580d565b604051602001614aa893929190615ec1565b60405160208183030381529060405280519060200120905092915050565b602081015160009060016137c7565b6000614adf6152fb565b82516020015181906003811115614af857614af86157e8565b90816003811115614b0b57614b0b6157e8565b905250602083810151810151908201906003811115614b2c57614b2c6157e8565b90816003811115614b3f57614b3f6157e8565b905250614b4a615319565b835151815260208085015151908201526040840151614b6c9083908390614099565b949350505050565b60008086614b83576000614b86565b60015b6040516001600160f81b031960f883901b1660208201526021810188905260418101879052606181018690526081810185905290915060a1016040516020818303038152906040528051906020012091505095945050505050565b6000612a21614bf783602001516000015161522f565b602084015151614c069061523a565b614ebe565b614c13615246565b614c1b615246565b96875250602086019490945260408501929092526001600160401b0390811660608501529081166080840181905260a0840152431661014083015261016082015290565b6004820154600160401b90046001600160401b0316614ca05760048201805467ffffffffffffffff60401b1916600160401b436001600160401b0316021790555b600490910180546001600160401b03909216600160801b0267ffffffffffffffff60801b19909216919091179055565b60758054600160801b90046001600160401b0316906010614cf083615bf8565b825461010092830a6001600160401b03818102199092169282160291909117909255607554600160801b908190048316600090815260766020908152604091829020875181559087015160018201559086015160028201556060860151600382018054608089015160a08a015160c08b01519489166001600160801b031993841617600160401b928a168302176001600160801b03908116918a1688026001600160c01b0390811692909217600160c01b968b1687021790945560e08b0151600487018054998d01516101208e01516101408f0151938d169b9096169a909a17998b16909302989098179093169188169095029091161793909416909302919091179055610160830151600590910155507f0000000000000000000000000000000000000000000000000000000000000000156111e75760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b158015614e6157600080fd5b505afa158015614e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e999190615bdf565b607554600160801b90046001600160401b03166000908152607f602052604090205550565b6040805160208101849052908101829052600090606001614aa8565b8051805160209182015192820151805190830151604080516c23b637b130b61039ba30ba329d60991b81870152602d810194909452604d8401959095526001600160c01b031960c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b60006001836003811115614f6457614f646157e8565b1415614faa576040516b213637b1b59039ba30ba329d60a11b6020820152602c8101839052604c015b604051602081830303815290604052805190602001209050612a21565b6002836003811115614fbe57614fbe6157e8565b1415614ff45760405174213637b1b59039ba30ba32961032b93937b932b21d60591b602082015260358101839052605501614f8d565b6003836003811115615008576150086157e8565b14156150375760405174213637b1b59039ba30ba3296103a37b7903330b91d60591b6020820152603501614f8d565b60405162461bcd60e51b815260206004820152601060248201526f4241445f424c4f434b5f53544154555360801b6044820152606401610d44565b600083838360405160200161416293929190615eff565b6001600160a01b03811660009081526079602052604090206001810154600160c01b900460ff166150cc5760405162461bcd60e51b8152600401610d449061574f565b600180820154607880546001600160401b039092169290916150ee91906157d1565b815481106150fe576150fe61598e565b600091825260209091200154607880546001600160a01b03909216916001600160401b0384169081106151335761513361598e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080607960006078846001600160401b0316815481106151825761518261598e565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600101805467ffffffffffffffff19166001600160401b039290921691909117905560788054806151da576151da615eab565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152607990935250506040812090815560010180546001600160c81b0319169055565b8051600090816137c7565b805160009060016137c7565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b604051806101000160405280600081526020016152c5615246565b8152600060208201526040016152d9615246565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b615330615346565b8152602001906001900390816153285790505090565b60405180604001604052806153596152fb565b81526020016153666152fb565b905290565b6001600160a01b03811681146111e757600080fd5b60008060006060848603121561539557600080fd5b8335925060208401356153a78161536b565b915060408401356153b78161536b565b809150509250925092565b6001600160401b03811681146111e757600080fd5b600080604083850312156153ea57600080fd5b82356153f5816153c2565b946020939093013593505050565b60006020828403121561541557600080fd5b5035919050565b60006020828403121561542e57600080fd5b8135612a408161536b565b60008060008385036101a081121561545057600080fd5b6101608082121561546057600080fd5b9496948701359550505061018085013592915050565b60006020828403121561548857600080fd5b8135612a40816153c2565b600080604083850312156154a657600080fd5b50508035926020909101359150565b8060408101831015612a2157600080fd5b600080600080600080600080610280898b0312156154e357600080fd5b6154ed8a8a6154b5565b97506154fc8a60408b016154b5565b965061550b8a60808b016154b5565b95506101c089018a81111561551f57600080fd5b60c08a0195503561552f816153c2565b93506101e089013592506155478a6102008b016154b5565b91506155578a6102408b016154b5565b90509295985092959890939650565b60006101808201905082518252602083015160208301526040830151604083015260608301516155a160608401826001600160401b03169052565b5060808301516155bc60808401826001600160401b03169052565b5060a08301516155d760a08401826001600160401b03169052565b5060c08301516155f260c08401826001600160401b03169052565b5060e083015161560d60e08401826001600160401b03169052565b50610100838101516001600160401b038116848301525050610120838101516001600160401b038116848301525050610140838101516001600160401b03811684830152505061016092830151919092015290565b6000806040838503121561567557600080fd5b8235615680816153c2565b915060208301356156908161536b565b809150509250929050565b6000806000606084860312156156b057600080fd5b8335925060208401356156c2816153c2565b915060408401356153b7816153c2565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526012908201527115d2125511531254d517d11254d05093115160721b604082015260600190565b6020808252600d908201526c2727aa2fab20a624a220aa27a960991b604082015260600190565b6020808252600a90820152691393d517d4d51052d15160b21b604082015260600190565b60006020828403121561578557600080fd5b8151612a408161536b565b6020808252601190820152705041555345445f414e445f41435449564560781b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156157e3576157e36157bb565b500390565b634e487b7160e01b600052602160045260246000fd5b803560048110612f0857600080fd5b60006020828403121561581f57600080fd5b612a40826157fe565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561586057615860615828565b60405290565b60006080828403121561587857600080fd5b61588061583e565b905082601f83011261589157600080fd5b61589961583e565b8060408401858111156158ab57600080fd5b845b818110156158c55780358452602093840193016158ad565b5081845285605f8601126158d857600080fd5b6158e061583e565b925082915060808501868111156158f657600080fd5b8082101561591b578135615909816153c2565b845260209384019391909101906158f6565b505060208301525092915050565b60006080828403121561593b57600080fd5b612a408383615866565b6000600019821415615959576159596157bb565b5060010190565b634e487b7160e01b600052600160045260246000fd5b60008219821115615989576159896157bb565b500190565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156159be576159be6157bb565b500290565b6000816159d2576159d26157bb565b506000190190565b6020808252600790820152664e4f5f4e4f444560c81b604082015260600190565b6000825160005b81811015615a1c5760208186018101518583015201615a02565b81811115615a2b576000828501525b509190910192915050565b634e487b7160e01b600052601260045260246000fd5b600082615a5b57615a5b615a36565b500490565b60006001600160401b03808316818516808303821115615a8257615a826157bb565b01949350505050565b6020808252600e908201526d1053149150511657d4d51052d15160921b604082015260600190565b60006001600160401b0383811690831681811015615ad357615ad36157bb565b039392505050565b600181815b80851115615b16578160001904821115615afc57615afc6157bb565b80851615615b0957918102915b93841c9390800290615ae0565b509250929050565b600082615b2d57506001612a21565b81615b3a57506000612a21565b8160018114615b505760028114615b5a57615b76565b6001915050612a21565b60ff841115615b6b57615b6b6157bb565b50506001821b612a21565b5060208310610133831016604e8410600b8410161715615b99575081810a612a21565b615ba38383615adb565b8060001904821115615bb757615bb76157bb565b029392505050565b6000612a408383615b1e565b600082615bda57615bda615a36565b500690565b600060208284031215615bf157600080fd5b5051919050565b60006001600160401b0380831681811415615c1557615c156157bb565b6001019392505050565b600060a08284031215615c3157600080fd5b615c3961583e565b9050615c458383615866565b8152615c53608083016157fe565b602082015292915050565b60006101608284031215615c7157600080fd5b604051606081018181106001600160401b0382111715615c9357615c93615828565b604052615ca08484615c1f565b8152615caf8460a08501615c1f565b6020820152610140830135615cc3816153c2565b60408201529392505050565b604081833760006040838101828152908301915b6002811015613122578235615cf7816153c2565b6001600160401b0316825260209283019290910190600101615ce3565b60048110615d3257634e487b7160e01b600052602160045260246000fd5b9052565b615d408282615ccf565b615d4c608082016157fe565b610def6080840182615d14565b8581526101e08101615d6e6020830187615d36565b615d7e60c0830160a08801615d36565b610140860135615d8d816153c2565b6001600160401b03166101608301526101808201949094526101a08101929092526101c09091015292915050565b888152610200810160208083018a60005b6002811015615df757615de783615de2846157fe565b615d14565b9183019190830190600101615dcc565b50505050606082018860005b6002811015615e2957615e168383615ccf565b6080928301929190910190600101615e03565b5050506001600160401b03969096166101608201526001600160a01b03948516610180820152929093166101a08301526101c08201526101e001529392505050565b600060208284031215615e7d57600080fd5b8151612a40816153c2565b60006001600160401b03821680615ea157615ea16157bb565b6000190192915050565b634e487b7160e01b600052603160045260246000fd5b838152826020820152600060048310615eea57634e487b7160e01b600052602160045260246000fd5b5060f89190911b604082015260410192915050565b83815260006020848184015260408301845182860160005b82811015615f3357815184529284019290840190600101615f17565b50919897505050505050505056feebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6a2646970667358221220e041c152c893f4733c63515c64315efabcbb690128d7676a2bc0d8dd7e99643664736f6c63430008090033",
}

// RollupUserLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupUserLogicMetaData.ABI instead.
var RollupUserLogicABI = RollupUserLogicMetaData.ABI

// RollupUserLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupUserLogicMetaData.Bin instead.
var RollupUserLogicBin = RollupUserLogicMetaData.Bin

// DeployRollupUserLogic deploys a new Ethereum contract, binding an instance of RollupUserLogic to it.
func DeployRollupUserLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupUserLogic, error) {
	parsed, err := RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupUserLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// RollupUserLogic is an auto generated Go binding around an Ethereum contract.
type RollupUserLogic struct {
	RollupUserLogicCaller     // Read-only binding to the contract
	RollupUserLogicTransactor // Write-only binding to the contract
	RollupUserLogicFilterer   // Log filterer for contract events
}

// RollupUserLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupUserLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupUserLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupUserLogicSession struct {
	Contract     *RollupUserLogic  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupUserLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupUserLogicCallerSession struct {
	Contract *RollupUserLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// RollupUserLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupUserLogicTransactorSession struct {
	Contract     *RollupUserLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// RollupUserLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupUserLogicRaw struct {
	Contract *RollupUserLogic // Generic contract binding to access the raw methods on
}

// RollupUserLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupUserLogicCallerRaw struct {
	Contract *RollupUserLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupUserLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactorRaw struct {
	Contract *RollupUserLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupUserLogic creates a new instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogic(address common.Address, backend bind.ContractBackend) (*RollupUserLogic, error) {
	contract, err := bindRollupUserLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// NewRollupUserLogicCaller creates a new read-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupUserLogicCaller, error) {
	contract, err := bindRollupUserLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicCaller{contract: contract}, nil
}

// NewRollupUserLogicTransactor creates a new write-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupUserLogicTransactor, error) {
	contract, err := bindRollupUserLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicTransactor{contract: contract}, nil
}

// NewRollupUserLogicFilterer creates a new log filterer instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupUserLogicFilterer, error) {
	contract, err := bindRollupUserLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicFilterer{contract: contract}, nil
}

// bindRollupUserLogic binds a generic wrapper to an already deployed contract.
func bindRollupUserLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.RollupUserLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transact(opts, method, params...)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) VALIDATORAFKBLOCKS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "VALIDATOR_AFK_BLOCKS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_RollupUserLogic.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_RollupUserLogic.CallOpts)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupUserLogic *RollupUserLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked     *big.Int
		Index            uint64
		LatestStakedNode uint64
		CurrentChallenge uint64
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.LatestStakedNode = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupUserLogic *RollupUserLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.CountStakedZombies(&_RollupUserLogic.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.CountStakedZombies(&_RollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.CountZombiesStakedOnChildren(&_RollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.CountZombiesStakedOnChildren(&_RollupUserLogic.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupUserLogic.Contract.CurrentChallenge(&_RollupUserLogic.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupUserLogic.Contract.CurrentChallenge(&_RollupUserLogic.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) CurrentRequiredStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.CurrentRequiredStake(&_RollupUserLogic.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.CurrentRequiredStake(&_RollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_RollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_RollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupUserLogic.Contract.FirstUnresolvedNode(&_RollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupUserLogic.Contract.FirstUnresolvedNode(&_RollupUserLogic.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupUserLogic *RollupUserLogicCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupUserLogic *RollupUserLogicSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupUserLogic.Contract.GetNode(&_RollupUserLogic.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupUserLogic.Contract.GetNode(&_RollupUserLogic.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) GetNodeCreationBlockForLogLookup(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getNodeCreationBlockForLogLookup", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetNodeCreationBlockForLogLookup(&_RollupUserLogic.CallOpts, nodeNum)
}

// GetNodeCreationBlockForLogLookup is a free data retrieval call binding the contract method 0xf63a434a.
//
// Solidity: function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetNodeCreationBlockForLogLookup(nodeNum uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetNodeCreationBlockForLogLookup(&_RollupUserLogic.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupUserLogic *RollupUserLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupUserLogic *RollupUserLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) Initialize(opts *bind.CallOpts, _stakeToken common.Address) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "initialize", _stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsERC20Enabled() (bool, error) {
	return _RollupUserLogic.Contract.IsERC20Enabled(&_RollupUserLogic.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsERC20Enabled() (bool, error) {
	return _RollupUserLogic.Contract.IsERC20Enabled(&_RollupUserLogic.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsStakedOnLatestConfirmed(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isStakedOnLatestConfirmed", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_RollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_RollupUserLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsZombie(&_RollupUserLogic.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsZombie(&_RollupUserLogic.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) LastStakeBlock() (uint64, error) {
	return _RollupUserLogic.Contract.LastStakeBlock(&_RollupUserLogic.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) LastStakeBlock() (uint64, error) {
	return _RollupUserLogic.Contract.LastStakeBlock(&_RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) LatestConfirmed() (uint64, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestConfirmed() (uint64, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) LatestNodeCreated() (uint64, error) {
	return _RollupUserLogic.Contract.LatestNodeCreated(&_RollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestNodeCreated() (uint64, error) {
	return _RollupUserLogic.Contract.LatestNodeCreated(&_RollupUserLogic.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupUserLogic.Contract.LatestStakedNode(&_RollupUserLogic.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupUserLogic.Contract.LatestStakedNode(&_RollupUserLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.NodeHasStaker(&_RollupUserLogic.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.NodeHasStaker(&_RollupUserLogic.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_RollupUserLogic *RollupUserLogicSession) RequireUnresolved(nodeNum *big.Int) error {
	return _RollupUserLogic.Contract.RequireUnresolved(&_RollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _RollupUserLogic.Contract.RequireUnresolved(&_RollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_RollupUserLogic *RollupUserLogicCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_RollupUserLogic *RollupUserLogicSession) RequireUnresolvedExists() error {
	return _RollupUserLogic.Contract.RequireUnresolvedExists(&_RollupUserLogic.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) RequireUnresolvedExists() error {
	return _RollupUserLogic.Contract.RequireUnresolvedExists(&_RollupUserLogic.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.RequiredStake(&_RollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.RequiredStake(&_RollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorUtils() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorUtils(&_RollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorUtils(&_RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupUserLogic.Contract.ZombieAddress(&_RollupUserLogic.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupUserLogic.Contract.ZombieAddress(&_RollupUserLogic.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) ZombieCount() (*big.Int, error) {
	return _RollupUserLogic.Contract.ZombieCount(&_RollupUserLogic.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) ZombieCount() (*big.Int, error) {
	return _RollupUserLogic.Contract.ZombieCount(&_RollupUserLogic.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupUserLogic.Contract.ZombieLatestStakedNode(&_RollupUserLogic.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupUserLogic.Contract.ZombieLatestStakedNode(&_RollupUserLogic.CallOpts, zombieNum)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "addToDeposit", stakerAddress)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_RollupUserLogic *RollupUserLogicSession) AddToDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) AddToDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) CompleteChallenge(opts *bind.TransactOpts, challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "completeChallenge", challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_RollupUserLogic *RollupUserLogicSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.CompleteChallenge(&_RollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.CompleteChallenge(&_RollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupUserLogic *RollupUserLogicSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmNextNode(&_RollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmNextNode(&_RollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_RollupUserLogic *RollupUserLogicSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.CreateChallenge(&_RollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.CreateChallenge(&_RollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStakeOnExistingNode", nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnExistingNode(&_RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnExistingNode(&_RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStakeOnNewNode(opts *bind.TransactOpts, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewNode(&_RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewNode(&_RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RejectNextNode(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RejectNextNode(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveOldZombies(&_RollupUserLogic.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveOldZombies(&_RollupUserLogic.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveZombie(&_RollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveZombie(&_RollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnExistingNode(&_RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnExistingNode(&_RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) StakeOnNewNode(opts *bind.TransactOpts, assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_RollupUserLogic *RollupUserLogicSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewNode(&_RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) StakeOnNewNode(assertion Assertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewNode(&_RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// RollupUserLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupUserLogic contract.
type RollupUserLogicAdminChangedIterator struct {
	Event *RollupUserLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAdminChanged represents a AdminChanged event raised by the RollupUserLogic contract.
type RollupUserLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupUserLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAdminChangedIterator{contract: _RollupUserLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAdminChanged)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAdminChanged(log types.Log) (*RollupUserLogicAdminChanged, error) {
	event := new(RollupUserLogicAdminChanged)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgradedIterator struct {
	Event *RollupUserLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupUserLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicBeaconUpgradedIterator{contract: _RollupUserLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicBeaconUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupUserLogicBeaconUpgraded, error) {
	event := new(RollupUserLogicBeaconUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the RollupUserLogic contract.
type RollupUserLogicNodeConfirmedIterator struct {
	Event *RollupUserLogicNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicNodeConfirmed represents a NodeConfirmed event raised by the RollupUserLogic contract.
type RollupUserLogicNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*RollupUserLogicNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicNodeConfirmedIterator{contract: _RollupUserLogic.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *RollupUserLogicNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicNodeConfirmed)
				if err := _RollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseNodeConfirmed(log types.Log) (*RollupUserLogicNodeConfirmed, error) {
	event := new(RollupUserLogicNodeConfirmed)
	if err := _RollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the RollupUserLogic contract.
type RollupUserLogicNodeCreatedIterator struct {
	Event *RollupUserLogicNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicNodeCreated represents a NodeCreated event raised by the RollupUserLogic contract.
type RollupUserLogicNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          Assertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*RollupUserLogicNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicNodeCreatedIterator{contract: _RollupUserLogic.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicNodeCreated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseNodeCreated(log types.Log) (*RollupUserLogicNodeCreated, error) {
	event := new(RollupUserLogicNodeCreated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the RollupUserLogic contract.
type RollupUserLogicNodeRejectedIterator struct {
	Event *RollupUserLogicNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicNodeRejected represents a NodeRejected event raised by the RollupUserLogic contract.
type RollupUserLogicNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*RollupUserLogicNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicNodeRejectedIterator{contract: _RollupUserLogic.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *RollupUserLogicNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicNodeRejected)
				if err := _RollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseNodeRejected(log types.Log) (*RollupUserLogicNodeRejected, error) {
	event := new(RollupUserLogicNodeRejected)
	if err := _RollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupUserLogic contract.
type RollupUserLogicPausedIterator struct {
	Event *RollupUserLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicPaused represents a Paused event raised by the RollupUserLogic contract.
type RollupUserLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupUserLogicPausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicPausedIterator{contract: _RollupUserLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicPaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParsePaused(log types.Log) (*RollupUserLogicPaused, error) {
	event := new(RollupUserLogicPaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStartedIterator struct {
	Event *RollupUserLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupUserLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupChallengeStartedIterator{contract: _RollupUserLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupChallengeStarted)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupUserLogicRollupChallengeStarted, error) {
	event := new(RollupUserLogicRollupChallengeStarted)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitializedIterator struct {
	Event *RollupUserLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupInitialized represents a RollupInitialized event raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupUserLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupInitializedIterator{contract: _RollupUserLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupInitialized)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupUserLogicRollupInitialized, error) {
	event := new(RollupUserLogicRollupInitialized)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupUserLogic contract.
type RollupUserLogicUnpausedIterator struct {
	Event *RollupUserLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUnpaused represents a Unpaused event raised by the RollupUserLogic contract.
type RollupUserLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupUserLogicUnpausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUnpausedIterator{contract: _RollupUserLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUnpaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUnpaused(log types.Log) (*RollupUserLogicUnpaused, error) {
	event := new(RollupUserLogicUnpaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedIterator struct {
	Event *RollupUserLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgraded represents a Upgraded event raised by the RollupUserLogic contract.
type RollupUserLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedIterator{contract: _RollupUserLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgraded(log types.Log) (*RollupUserLogicUpgraded, error) {
	event := new(RollupUserLogicUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondaryIterator struct {
	Event *RollupUserLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedSecondaryIterator{contract: _RollupUserLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgradedSecondary)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupUserLogicUpgradedSecondary, error) {
	event := new(RollupUserLogicUpgradedSecondary)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdatedIterator struct {
	Event *RollupUserLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupUserLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserStakeUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserStakeUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupUserLogicUserStakeUpdated, error) {
	event := new(RollupUserLogicUserStakeUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupUserLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupUserLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserWithdrawableFundsUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupUserLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupUserLogicUserWithdrawableFundsUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorUtilsMetaData contains all meta data concerning the ValidatorUtils contract.
var ValidatorUtilsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"areUnresolvedNodesLinear\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupUserAbs\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"checkDecidableNextNode\",\"outputs\":[{\"internalType\":\"enumValidatorUtils.ConfirmType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"node1\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"node2\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxDepth\",\"type\":\"uint256\"}],\"name\":\"findNodeConflict\",\"outputs\":[{\"components\":[{\"internalType\":\"enumValidatorUtils.NodeConflictType\",\"name\":\"ty\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"node1\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"node2\",\"type\":\"uint64\"}],\"internalType\":\"structValidatorUtils.NodeConflict\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxDepth\",\"type\":\"uint256\"}],\"name\":\"findStakerConflict\",\"outputs\":[{\"components\":[{\"internalType\":\"enumValidatorUtils.NodeConflictType\",\"name\":\"ty\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"node1\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"node2\",\"type\":\"uint64\"}],\"internalType\":\"structValidatorUtils.NodeConflict\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"hasMore\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStaked\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"refundableStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupUserAbs\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"requireConfirmable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"requireRejectable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakedNodes\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"timedOutChallenges\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"},{\"internalType\":\"bool\",\"name\":\"hasMore\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506125bf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80637464ae06116100715780637464ae06146101415780637988ad371461016157806382f50e2d14610181578063aea2f06e14610194578063c308eaaf146101b7578063f36e18cc146101d757600080fd5b806301d9717d146100ae5780630a46c1b5146100d85780631fc43bb6146100f85780633400b5fa1461010d578063712293401461012e575b600080fd5b6100c16100bc366004611efd565b6101f8565b6040516100cf929190611f36565b60405180910390f35b6100eb6100e6366004612043565b6103ec565b6040516100cf919061207d565b61010b610106366004612043565b6104b1565b005b61012061011b3660046120ac565b610973565b6040516100cf92919061213b565b61010b61013c366004612043565b610c83565b61015461014f366004612043565b610fe9565b6040516100cf9190612198565b61017461016f3660046121ab565b611340565b6040516100cf91906121fc565b61017461018f366004612240565b611477565b6101a76101a2366004612043565b611884565b60405190151581526020016100cf565b6101ca6101c5366004611efd565b611a6a565b6040516100cf9190612281565b6101ea6101e53660046120ac565b611c79565b6040516100cf929190612294565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101829052604051631f4b2bb760e11b81526000906001600160a01b03861690633e96576e906102879087906004016122a7565b60206040518083038186803b15801561029f57600080fd5b505afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d791906122c6565b90506001600160401b03811661035b57846001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032057600080fd5b505afa158015610334573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035891906122c6565b90505b6040516324b204d360e21b81526001600160401b03821660048201526000906001600160a01b038716906392c8134c906024016101806040518083038186803b1580156103a757600080fd5b505afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190612330565b9196919550909350505050565b604051630fe21ddb60e11b81526000903090631fc43bb6906104129085906004016122a7565b60006040518083038186803b15801561042a57600080fd5b505afa92505050801561043b575060015b6104445761044c565b506001919050565b6040516301c48a4d60e61b8152309063712293409061046f9085906004016122a7565b60006040518083038186803b15801561048757600080fd5b505afa925050508015610498575060015b6104a457506000919050565b506002919050565b919050565b806001600160a01b03166367425daf6040518163ffffffff1660e01b815260040160006040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506000816001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057591906122c6565b6001600160401b03169050600081116105c25760405162461bcd60e51b815260206004820152600a6024820152694e4f5f5354414b45525360b01b60448201526064015b60405180910390fd5b6000826001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063591906122c6565b6040516324b204d360e21b81526001600160401b03821660048201529091506000906001600160a01b038516906392c8134c906024016101806040518083038186803b15801561068457600080fd5b505afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc9190612330565b90506106c781611e68565b836001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561070057600080fd5b505afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073891906122c6565b6001600160401b031681606001516001600160401b03161461075c5761075c612402565b60608101516040516324b204d360e21b81526001600160401b0390911660048201526000906001600160a01b038616906392c8134c906024016101806040518083038186803b1580156107ae57600080fd5b505afa1580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e69190612330565b90506107f181611e98565b6040516317185fa560e21b81526001600160401b03841660048201526000906001600160a01b03871690635c617e949060240160206040518083038186803b15801561083c57600080fd5b505afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190612418565b6060840151604051633684685160e11b81526001600160401b0390911660048201526001600160a01b03881690636d08d0a29060240160206040518083038186803b1580156108c257600080fd5b505afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190612418565b6109049190612447565b9050808360c001516001600160401b031661091f919061245e565b8260e001516001600160401b03161461096b5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d0531317d4d51052d15160921b60448201526064016105b9565b505050505050565b60606000806000610985878787611c79565b91509150600082516001600160401b038111156109a4576109a46122e3565b6040519080825280602002602001820160405280156109cd578160200160208202803683370190505b509050600080896001600160a01b031663023a96fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0c57600080fd5b505afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190612476565b905060005b8551811015610c73576000868281518110610a6657610a66612493565b6020026020010151905060008c6001600160a01b03166369fd251c836040518263ffffffff1660e01b8152600401610a9e91906122a7565b60206040518083038186803b158015610ab657600080fd5b505afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee91906122c6565b90506001600160401b03811615801590610b835750604051639ede42b960e01b81526001600160401b03821660048201526001600160a01b03851690639ede42b99060240160206040518083038186803b158015610b4b57600080fd5b505afa158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8391906124a9565b8015610c1a57506040516323a9ef2360e01b81526001600160401b03821660048201526001600160a01b0380841691908616906323a9ef239060240160206040518083038186803b158015610bd757600080fd5b505afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190612476565b6001600160a01b0316145b15610c5e57808686610c2b816124cb565b975081518110610c3d57610c3d612493565b60200260200101906001600160401b031690816001600160401b0316815250505b50508080610c6b906124cb565b915050610a49565b5050815297909650945050505050565b806001600160a01b03166367425daf6040518163ffffffff1660e01b815260040160006040518083038186803b158015610cbc57600080fd5b505afa158015610cd0573d6000803e3d6000fd5b505050506000816001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0f57600080fd5b505afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4791906122c6565b6040516324b204d360e21b81526001600160401b03821660048201529091506000906001600160a01b038416906392c8134c906024016101806040518083038186803b158015610d9657600080fd5b505afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190612330565b9050826001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4191906122c6565b6001600160401b031681606001516001600160401b03161415610fe45780608001516001600160401b0316431015610e8b5760405162461bcd60e51b81526004016105b9906124e6565b60608101516040516324b204d360e21b81526001600160401b039091166004820152610f1b906001600160a01b038516906392c8134c906024016101806040518083038186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f169190612330565b611e98565b6040516317185fa560e21b81526001600160401b03831660048201526001600160a01b03841690635c617e949060240160206040518083038186803b158015610f6357600080fd5b505afa158015610f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9b9190612418565b8160c001516001600160401b031614610fe45760405162461bcd60e51b815260206004820152600b60248201526a4841535f5354414b45525360a81b60448201526064016105b9565b505050565b60606000826001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b15801561102657600080fd5b505afa15801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e91906122c6565b6001600160401b031690506000816001600160401b03811115611083576110836122e3565b6040519080825280602002602001820160405280156110ac578160200160208202803683370190505b5090506000846001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ea57600080fd5b505afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112291906122c6565b6001600160401b031690506000805b84816001600160401b0316101561133557604051631b774dd160e21b81526001600160401b03821660048201526000906001600160a01b03891690636ddd37449060240160206040518083038186803b15801561118d57600080fd5b505afa1580156111a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c59190612476565b90506000886001600160a01b0316633e96576e836040518263ffffffff1660e01b81526004016111f591906122a7565b60206040518083038186803b15801561120d57600080fd5b505afa158015611221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124591906122c6565b6001600160401b031690508481111580156112e25750604051631a7f494760e21b81526001600160a01b038a16906369fd251c906112879085906004016122a7565b60206040518083038186803b15801561129f57600080fd5b505afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d791906122c6565b6001600160401b0316155b1561132057818685815181106112fa576112fa612493565b6001600160a01b03909216602092830291909101909101528361131c816124cb565b9450505b5050808061132d9061250f565b915050611131565b508252509392505050565b6040805160608101825260008082526020820181905291810191909152604051631f4b2bb760e11b81526000906001600160a01b03871690633e96576e9061138c9088906004016122a7565b60206040518083038186803b1580156113a457600080fd5b505afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc91906122c6565b90506000866001600160a01b0316633e96576e866040518263ffffffff1660e01b815260040161140c91906122a7565b60206040518083038186803b15801561142457600080fd5b505afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c91906122c6565b905061146a87838387611477565b925050505b949350505050565b60408051606081018252600080825260208201819052918101919091526000856001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114cf57600080fd5b505afa1580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150791906122c6565b6040516324b204d360e21b81526001600160401b03871660048201529091506000906001600160a01b038816906392c8134c906024016101806040518083038186803b15801561155657600080fd5b505afa15801561156a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158e9190612330565b606001516040516324b204d360e21b81526001600160401b03871660048201529091506000906001600160a01b038916906392c8134c906024016101806040518083038186803b1580156115e157600080fd5b505afa1580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190612330565b60600151905060005b8581101561185857866001600160401b0316886001600160401b0316141561167f5760408051606081019091528060005b8152602001896001600160401b03168152602001886001600160401b031681525094505050505061146f565b816001600160401b0316836001600160401b031614156116ac576040805160608101909152806001611653565b836001600160401b0316836001600160401b03161080156116de5750836001600160401b0316826001600160401b0316105b1561170e5760408051606081019091528060028152600060208201819052604090910152945061146f9350505050565b816001600160401b0316836001600160401b031610156117b9576040516324b204d360e21b81526001600160401b038316600482015291965086916001600160a01b038a16906392c8134c906024016101806040518083038186803b15801561177657600080fd5b505afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae9190612330565b606001519150611846565b6040516324b204d360e21b81526001600160401b038416600482015292975087926001600160a01b038a16906392c8134c906024016101806040518083038186803b15801561180757600080fd5b505afa15801561181b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183f9190612330565b6060015192505b80611850816124cb565b915050611622565b506040805160608101909152806003815260006020820181905260409091015298975050505050505050565b600080826001600160a01b0316637ba9534a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118c057600080fd5b505afa1580156118d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f891906122c6565b6001600160401b031690506000836001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197691906122c6565b90505b81816001600160401b031611611a60576000816001600160401b0316118015611a3f57506119a8600182612536565b6040516324b204d360e21b81526001600160401b03838116600483015291909116906001600160a01b038616906392c8134c906024016101806040518083038186803b1580156119f757600080fd5b505afa158015611a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2f9190612330565b606001516001600160401b031614155b15611a4e575060009392505050565b80611a588161250f565b915050611979565b5060019392505050565b60408051620186a08082526230d420820190925260609160009190602082016230d40080368337019050509050600080856001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ad357600080fd5b505afa158015611ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0b91906122c6565b90505b856001600160a01b0316637ba9534a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4757600080fd5b505afa158015611b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7f91906122c6565b6001600160401b0316816001600160401b031611611c6f5760405163154cb5e960e31b81526001600160401b03821660048201526001600160a01b03868116602483015287169063aa65af489060440160206040518083038186803b158015611be757600080fd5b505afa158015611bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1f91906124a9565b15611c5d5780838381518110611c3757611c37612493565b6001600160401b039092166020928302919091019091015281611c59816124cb565b9250505b80611c678161250f565b915050611b0e565b5081529392505050565b6060600080856001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb757600080fd5b505afa158015611ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cef91906122c6565b6001600160401b0316905080611d05858761255e565b6001600160401b031611611d2d57611d1d848661255e565b6001600160401b03169050600191505b6000816001600160401b03811115611d4757611d476122e3565b604051908082528060200260200182016040528015611d70578160200160208202803683370190505b50905060005b82816001600160401b03161015611e5c576001600160a01b038816636ddd3744611da0838a61255e565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b158015611ddf57600080fd5b505afa158015611df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e179190612476565b82826001600160401b031681518110611e3257611e32612493565b6001600160a01b039092166020928302919091019091015280611e548161250f565b915050611d76565b50925050935093915050565b80608001516001600160401b0316431015611e955760405162461bcd60e51b81526004016105b9906124e6565b50565b8060a001516001600160401b0316431015611e955760405162461bcd60e51b815260206004820152601060248201526f10d212531117d513d3d7d49150d1539560821b60448201526064016105b9565b6001600160a01b0381168114611e9557600080fd5b60008060408385031215611f1057600080fd5b8235611f1b81611ee8565b91506020830135611f2b81611ee8565b809150509250929050565b60006101a0820190506001600160401b03841682528251602083015260208301516040830152604083015160608301526060830151611f8060808401826001600160401b03169052565b5060808301516001600160401b03811660a08401525060a08301516001600160401b03811660c08401525060c08301516001600160401b03811660e08401525060e0830151610100611fdc818501836001600160401b03169052565b8401519050610120611ff8848201836001600160401b03169052565b8401519050610140612014848201836001600160401b03169052565b8401519050610160612030848201836001600160401b03169052565b8085015161018085015250509392505050565b60006020828403121561205557600080fd5b813561206081611ee8565b9392505050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061209157612091612067565b91905290565b6001600160401b0381168114611e9557600080fd5b6000806000606084860312156120c157600080fd5b83356120cc81611ee8565b925060208401356120dc81612097565b915060408401356120ec81612097565b809150509250925092565b600081518084526020808501945080840160005b838110156121305781516001600160401b03168752958201959082019060010161210b565b509495945050505050565b60408152600061214e60408301856120f7565b905082151560208301529392505050565b600081518084526020808501945080840160005b838110156121305781516001600160a01b031687529582019590820190600101612173565b602081526000612060602083018461215f565b600080600080608085870312156121c157600080fd5b84356121cc81611ee8565b935060208501356121dc81611ee8565b925060408501356121ec81611ee8565b9396929550929360600135925050565b815160608201906004811061221357612213612067565b8083525060208301516001600160401b038082166020850152806040860151166040850152505092915050565b6000806000806080858703121561225657600080fd5b843561226181611ee8565b9350602085013561227181612097565b925060408501356121ec81612097565b60208152600061206060208301846120f7565b60408152600061214e604083018561215f565b6001600160a01b0391909116815260200190565b80516104ac81612097565b6000602082840312156122d857600080fd5b815161206081612097565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b038111828210171561232a57634e487b7160e01b600052604160045260246000fd5b60405290565b6000610180828403121561234357600080fd5b61234b6122f9565b82518152602083015160208201526040830151604082015261236f606084016122bb565b6060820152612380608084016122bb565b608082015261239160a084016122bb565b60a08201526123a260c084016122bb565b60c08201526123b360e084016122bb565b60e08201526101006123c68185016122bb565b908201526101206123d88482016122bb565b908201526101406123ea8482016122bb565b90820152610160928301519281019290925250919050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561242a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561245957612459612431565b500390565b6000821982111561247157612471612431565b500190565b60006020828403121561248857600080fd5b815161206081611ee8565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156124bb57600080fd5b8151801515811461206057600080fd5b60006000198214156124df576124df612431565b5060010190565b6020808252600f908201526e4245464f52455f444541444c494e4560881b604082015260600190565b60006001600160401b038083168181141561252c5761252c612431565b6001019392505050565b60006001600160401b038381169083168181101561255657612556612431565b039392505050565b60006001600160401b0380831681851680830382111561258057612580612431565b0194935050505056fea2646970667358221220551a33080ae1a6632fda44dfa4cf8ac797d482afb110027c3d2daa656848504464736f6c63430008090033",
}

// ValidatorUtilsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorUtilsMetaData.ABI instead.
var ValidatorUtilsABI = ValidatorUtilsMetaData.ABI

// ValidatorUtilsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorUtilsMetaData.Bin instead.
var ValidatorUtilsBin = ValidatorUtilsMetaData.Bin

// DeployValidatorUtils deploys a new Ethereum contract, binding an instance of ValidatorUtils to it.
func DeployValidatorUtils(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorUtils, error) {
	parsed, err := ValidatorUtilsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorUtilsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorUtils{ValidatorUtilsCaller: ValidatorUtilsCaller{contract: contract}, ValidatorUtilsTransactor: ValidatorUtilsTransactor{contract: contract}, ValidatorUtilsFilterer: ValidatorUtilsFilterer{contract: contract}}, nil
}

// ValidatorUtils is an auto generated Go binding around an Ethereum contract.
type ValidatorUtils struct {
	ValidatorUtilsCaller     // Read-only binding to the contract
	ValidatorUtilsTransactor // Write-only binding to the contract
	ValidatorUtilsFilterer   // Log filterer for contract events
}

// ValidatorUtilsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorUtilsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorUtilsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorUtilsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorUtilsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorUtilsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorUtilsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorUtilsSession struct {
	Contract     *ValidatorUtils   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorUtilsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorUtilsCallerSession struct {
	Contract *ValidatorUtilsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// ValidatorUtilsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorUtilsTransactorSession struct {
	Contract     *ValidatorUtilsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ValidatorUtilsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorUtilsRaw struct {
	Contract *ValidatorUtils // Generic contract binding to access the raw methods on
}

// ValidatorUtilsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorUtilsCallerRaw struct {
	Contract *ValidatorUtilsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorUtilsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorUtilsTransactorRaw struct {
	Contract *ValidatorUtilsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorUtils creates a new instance of ValidatorUtils, bound to a specific deployed contract.
func NewValidatorUtils(address common.Address, backend bind.ContractBackend) (*ValidatorUtils, error) {
	contract, err := bindValidatorUtils(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorUtils{ValidatorUtilsCaller: ValidatorUtilsCaller{contract: contract}, ValidatorUtilsTransactor: ValidatorUtilsTransactor{contract: contract}, ValidatorUtilsFilterer: ValidatorUtilsFilterer{contract: contract}}, nil
}

// NewValidatorUtilsCaller creates a new read-only instance of ValidatorUtils, bound to a specific deployed contract.
func NewValidatorUtilsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorUtilsCaller, error) {
	contract, err := bindValidatorUtils(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorUtilsCaller{contract: contract}, nil
}

// NewValidatorUtilsTransactor creates a new write-only instance of ValidatorUtils, bound to a specific deployed contract.
func NewValidatorUtilsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorUtilsTransactor, error) {
	contract, err := bindValidatorUtils(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorUtilsTransactor{contract: contract}, nil
}

// NewValidatorUtilsFilterer creates a new log filterer instance of ValidatorUtils, bound to a specific deployed contract.
func NewValidatorUtilsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorUtilsFilterer, error) {
	contract, err := bindValidatorUtils(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorUtilsFilterer{contract: contract}, nil
}

// bindValidatorUtils binds a generic wrapper to an already deployed contract.
func bindValidatorUtils(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorUtilsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorUtils *ValidatorUtilsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorUtils.Contract.ValidatorUtilsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorUtils *ValidatorUtilsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorUtils.Contract.ValidatorUtilsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorUtils *ValidatorUtilsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorUtils.Contract.ValidatorUtilsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorUtils *ValidatorUtilsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorUtils.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorUtils *ValidatorUtilsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorUtils.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorUtils *ValidatorUtilsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorUtils.Contract.contract.Transact(opts, method, params...)
}

// AreUnresolvedNodesLinear is a free data retrieval call binding the contract method 0xaea2f06e.
//
// Solidity: function areUnresolvedNodesLinear(address rollup) view returns(bool)
func (_ValidatorUtils *ValidatorUtilsCaller) AreUnresolvedNodesLinear(opts *bind.CallOpts, rollup common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "areUnresolvedNodesLinear", rollup)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AreUnresolvedNodesLinear is a free data retrieval call binding the contract method 0xaea2f06e.
//
// Solidity: function areUnresolvedNodesLinear(address rollup) view returns(bool)
func (_ValidatorUtils *ValidatorUtilsSession) AreUnresolvedNodesLinear(rollup common.Address) (bool, error) {
	return _ValidatorUtils.Contract.AreUnresolvedNodesLinear(&_ValidatorUtils.CallOpts, rollup)
}

// AreUnresolvedNodesLinear is a free data retrieval call binding the contract method 0xaea2f06e.
//
// Solidity: function areUnresolvedNodesLinear(address rollup) view returns(bool)
func (_ValidatorUtils *ValidatorUtilsCallerSession) AreUnresolvedNodesLinear(rollup common.Address) (bool, error) {
	return _ValidatorUtils.Contract.AreUnresolvedNodesLinear(&_ValidatorUtils.CallOpts, rollup)
}

// CheckDecidableNextNode is a free data retrieval call binding the contract method 0x0a46c1b5.
//
// Solidity: function checkDecidableNextNode(address rollup) view returns(uint8)
func (_ValidatorUtils *ValidatorUtilsCaller) CheckDecidableNextNode(opts *bind.CallOpts, rollup common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "checkDecidableNextNode", rollup)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckDecidableNextNode is a free data retrieval call binding the contract method 0x0a46c1b5.
//
// Solidity: function checkDecidableNextNode(address rollup) view returns(uint8)
func (_ValidatorUtils *ValidatorUtilsSession) CheckDecidableNextNode(rollup common.Address) (uint8, error) {
	return _ValidatorUtils.Contract.CheckDecidableNextNode(&_ValidatorUtils.CallOpts, rollup)
}

// CheckDecidableNextNode is a free data retrieval call binding the contract method 0x0a46c1b5.
//
// Solidity: function checkDecidableNextNode(address rollup) view returns(uint8)
func (_ValidatorUtils *ValidatorUtilsCallerSession) CheckDecidableNextNode(rollup common.Address) (uint8, error) {
	return _ValidatorUtils.Contract.CheckDecidableNextNode(&_ValidatorUtils.CallOpts, rollup)
}

// FindNodeConflict is a free data retrieval call binding the contract method 0x82f50e2d.
//
// Solidity: function findNodeConflict(address rollup, uint64 node1, uint64 node2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsCaller) FindNodeConflict(opts *bind.CallOpts, rollup common.Address, node1 uint64, node2 uint64, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "findNodeConflict", rollup, node1, node2, maxDepth)

	if err != nil {
		return *new(ValidatorUtilsNodeConflict), err
	}

	out0 := *abi.ConvertType(out[0], new(ValidatorUtilsNodeConflict)).(*ValidatorUtilsNodeConflict)

	return out0, err

}

// FindNodeConflict is a free data retrieval call binding the contract method 0x82f50e2d.
//
// Solidity: function findNodeConflict(address rollup, uint64 node1, uint64 node2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsSession) FindNodeConflict(rollup common.Address, node1 uint64, node2 uint64, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	return _ValidatorUtils.Contract.FindNodeConflict(&_ValidatorUtils.CallOpts, rollup, node1, node2, maxDepth)
}

// FindNodeConflict is a free data retrieval call binding the contract method 0x82f50e2d.
//
// Solidity: function findNodeConflict(address rollup, uint64 node1, uint64 node2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsCallerSession) FindNodeConflict(rollup common.Address, node1 uint64, node2 uint64, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	return _ValidatorUtils.Contract.FindNodeConflict(&_ValidatorUtils.CallOpts, rollup, node1, node2, maxDepth)
}

// FindStakerConflict is a free data retrieval call binding the contract method 0x7988ad37.
//
// Solidity: function findStakerConflict(address rollup, address staker1, address staker2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsCaller) FindStakerConflict(opts *bind.CallOpts, rollup common.Address, staker1 common.Address, staker2 common.Address, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "findStakerConflict", rollup, staker1, staker2, maxDepth)

	if err != nil {
		return *new(ValidatorUtilsNodeConflict), err
	}

	out0 := *abi.ConvertType(out[0], new(ValidatorUtilsNodeConflict)).(*ValidatorUtilsNodeConflict)

	return out0, err

}

// FindStakerConflict is a free data retrieval call binding the contract method 0x7988ad37.
//
// Solidity: function findStakerConflict(address rollup, address staker1, address staker2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsSession) FindStakerConflict(rollup common.Address, staker1 common.Address, staker2 common.Address, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	return _ValidatorUtils.Contract.FindStakerConflict(&_ValidatorUtils.CallOpts, rollup, staker1, staker2, maxDepth)
}

// FindStakerConflict is a free data retrieval call binding the contract method 0x7988ad37.
//
// Solidity: function findStakerConflict(address rollup, address staker1, address staker2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsCallerSession) FindStakerConflict(rollup common.Address, staker1 common.Address, staker2 common.Address, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	return _ValidatorUtils.Contract.FindStakerConflict(&_ValidatorUtils.CallOpts, rollup, staker1, staker2, maxDepth)
}

// GetStakers is a free data retrieval call binding the contract method 0xf36e18cc.
//
// Solidity: function getStakers(address rollup, uint64 startIndex, uint64 max) view returns(address[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsCaller) GetStakers(opts *bind.CallOpts, rollup common.Address, startIndex uint64, max uint64) ([]common.Address, bool, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "getStakers", rollup, startIndex, max)

	if err != nil {
		return *new([]common.Address), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// GetStakers is a free data retrieval call binding the contract method 0xf36e18cc.
//
// Solidity: function getStakers(address rollup, uint64 startIndex, uint64 max) view returns(address[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsSession) GetStakers(rollup common.Address, startIndex uint64, max uint64) ([]common.Address, bool, error) {
	return _ValidatorUtils.Contract.GetStakers(&_ValidatorUtils.CallOpts, rollup, startIndex, max)
}

// GetStakers is a free data retrieval call binding the contract method 0xf36e18cc.
//
// Solidity: function getStakers(address rollup, uint64 startIndex, uint64 max) view returns(address[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsCallerSession) GetStakers(rollup common.Address, startIndex uint64, max uint64) ([]common.Address, bool, error) {
	return _ValidatorUtils.Contract.GetStakers(&_ValidatorUtils.CallOpts, rollup, startIndex, max)
}

// LatestStaked is a free data retrieval call binding the contract method 0x01d9717d.
//
// Solidity: function latestStaked(address rollup, address staker) view returns(uint64, (bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ValidatorUtils *ValidatorUtilsCaller) LatestStaked(opts *bind.CallOpts, rollup common.Address, staker common.Address) (uint64, Node, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "latestStaked", rollup, staker)

	if err != nil {
		return *new(uint64), *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)
	out1 := *abi.ConvertType(out[1], new(Node)).(*Node)

	return out0, out1, err

}

// LatestStaked is a free data retrieval call binding the contract method 0x01d9717d.
//
// Solidity: function latestStaked(address rollup, address staker) view returns(uint64, (bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ValidatorUtils *ValidatorUtilsSession) LatestStaked(rollup common.Address, staker common.Address) (uint64, Node, error) {
	return _ValidatorUtils.Contract.LatestStaked(&_ValidatorUtils.CallOpts, rollup, staker)
}

// LatestStaked is a free data retrieval call binding the contract method 0x01d9717d.
//
// Solidity: function latestStaked(address rollup, address staker) view returns(uint64, (bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ValidatorUtils *ValidatorUtilsCallerSession) LatestStaked(rollup common.Address, staker common.Address) (uint64, Node, error) {
	return _ValidatorUtils.Contract.LatestStaked(&_ValidatorUtils.CallOpts, rollup, staker)
}

// RefundableStakers is a free data retrieval call binding the contract method 0x7464ae06.
//
// Solidity: function refundableStakers(address rollup) view returns(address[])
func (_ValidatorUtils *ValidatorUtilsCaller) RefundableStakers(opts *bind.CallOpts, rollup common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "refundableStakers", rollup)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// RefundableStakers is a free data retrieval call binding the contract method 0x7464ae06.
//
// Solidity: function refundableStakers(address rollup) view returns(address[])
func (_ValidatorUtils *ValidatorUtilsSession) RefundableStakers(rollup common.Address) ([]common.Address, error) {
	return _ValidatorUtils.Contract.RefundableStakers(&_ValidatorUtils.CallOpts, rollup)
}

// RefundableStakers is a free data retrieval call binding the contract method 0x7464ae06.
//
// Solidity: function refundableStakers(address rollup) view returns(address[])
func (_ValidatorUtils *ValidatorUtilsCallerSession) RefundableStakers(rollup common.Address) ([]common.Address, error) {
	return _ValidatorUtils.Contract.RefundableStakers(&_ValidatorUtils.CallOpts, rollup)
}

// RequireConfirmable is a free data retrieval call binding the contract method 0x1fc43bb6.
//
// Solidity: function requireConfirmable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsCaller) RequireConfirmable(opts *bind.CallOpts, rollup common.Address) error {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "requireConfirmable", rollup)

	if err != nil {
		return err
	}

	return err

}

// RequireConfirmable is a free data retrieval call binding the contract method 0x1fc43bb6.
//
// Solidity: function requireConfirmable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsSession) RequireConfirmable(rollup common.Address) error {
	return _ValidatorUtils.Contract.RequireConfirmable(&_ValidatorUtils.CallOpts, rollup)
}

// RequireConfirmable is a free data retrieval call binding the contract method 0x1fc43bb6.
//
// Solidity: function requireConfirmable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsCallerSession) RequireConfirmable(rollup common.Address) error {
	return _ValidatorUtils.Contract.RequireConfirmable(&_ValidatorUtils.CallOpts, rollup)
}

// RequireRejectable is a free data retrieval call binding the contract method 0x71229340.
//
// Solidity: function requireRejectable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsCaller) RequireRejectable(opts *bind.CallOpts, rollup common.Address) error {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "requireRejectable", rollup)

	if err != nil {
		return err
	}

	return err

}

// RequireRejectable is a free data retrieval call binding the contract method 0x71229340.
//
// Solidity: function requireRejectable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsSession) RequireRejectable(rollup common.Address) error {
	return _ValidatorUtils.Contract.RequireRejectable(&_ValidatorUtils.CallOpts, rollup)
}

// RequireRejectable is a free data retrieval call binding the contract method 0x71229340.
//
// Solidity: function requireRejectable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsCallerSession) RequireRejectable(rollup common.Address) error {
	return _ValidatorUtils.Contract.RequireRejectable(&_ValidatorUtils.CallOpts, rollup)
}

// StakedNodes is a free data retrieval call binding the contract method 0xc308eaaf.
//
// Solidity: function stakedNodes(address rollup, address staker) view returns(uint64[])
func (_ValidatorUtils *ValidatorUtilsCaller) StakedNodes(opts *bind.CallOpts, rollup common.Address, staker common.Address) ([]uint64, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "stakedNodes", rollup, staker)

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

// StakedNodes is a free data retrieval call binding the contract method 0xc308eaaf.
//
// Solidity: function stakedNodes(address rollup, address staker) view returns(uint64[])
func (_ValidatorUtils *ValidatorUtilsSession) StakedNodes(rollup common.Address, staker common.Address) ([]uint64, error) {
	return _ValidatorUtils.Contract.StakedNodes(&_ValidatorUtils.CallOpts, rollup, staker)
}

// StakedNodes is a free data retrieval call binding the contract method 0xc308eaaf.
//
// Solidity: function stakedNodes(address rollup, address staker) view returns(uint64[])
func (_ValidatorUtils *ValidatorUtilsCallerSession) StakedNodes(rollup common.Address, staker common.Address) ([]uint64, error) {
	return _ValidatorUtils.Contract.StakedNodes(&_ValidatorUtils.CallOpts, rollup, staker)
}

// TimedOutChallenges is a free data retrieval call binding the contract method 0x3400b5fa.
//
// Solidity: function timedOutChallenges(address rollup, uint64 startIndex, uint64 max) view returns(uint64[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsCaller) TimedOutChallenges(opts *bind.CallOpts, rollup common.Address, startIndex uint64, max uint64) ([]uint64, bool, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "timedOutChallenges", rollup, startIndex, max)

	if err != nil {
		return *new([]uint64), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// TimedOutChallenges is a free data retrieval call binding the contract method 0x3400b5fa.
//
// Solidity: function timedOutChallenges(address rollup, uint64 startIndex, uint64 max) view returns(uint64[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsSession) TimedOutChallenges(rollup common.Address, startIndex uint64, max uint64) ([]uint64, bool, error) {
	return _ValidatorUtils.Contract.TimedOutChallenges(&_ValidatorUtils.CallOpts, rollup, startIndex, max)
}

// TimedOutChallenges is a free data retrieval call binding the contract method 0x3400b5fa.
//
// Solidity: function timedOutChallenges(address rollup, uint64 startIndex, uint64 max) view returns(uint64[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsCallerSession) TimedOutChallenges(rollup common.Address, startIndex uint64, max uint64) ([]uint64, bool, error) {
	return _ValidatorUtils.Contract.TimedOutChallenges(&_ValidatorUtils.CallOpts, rollup, startIndex, max)
}

// ValidatorWalletMetaData contains all meta data concerning the ValidatorWallet contract.
var ValidatorWalletMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"BadArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"NotExecutorOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"OnlyOwnerDestination\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"WithdrawEthFail\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AllowedExecutorDestinationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExecutor\",\"type\":\"bool\"}],\"name\":\"ExecutorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedExecutorDestinations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransactionWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactionsWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isSet\",\"type\":\"bool[]\"}],\"name\":\"setAllowedExecutorDestinations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newExecutors\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isExecutor\",\"type\":\"bool[]\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"challenges\",\"type\":\"uint64[]\"}],\"name\":\"timeoutChallenges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeManager\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"challenges\",\"type\":\"uint64[]\"}],\"name\":\"timeoutChallengesWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"validateExecuteTransaction\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60c0604052306080526202000060a05234801561001b57600080fd5b5060805160a051611fd561004f6000396000818161056401528181611150015261151d01526000610a650152611fd56000f3fe6080604052600436106100d75760003560e01c80639ac2a0111161007a5780639ac2a011146101e75780639be7bbd214610217578063a158657c14610237578063af1b9a0714610257578063c179f1d914610277578063ce1d571f1461028a578063d327821a1461029d578063f2fde38b146102bd57600080fd5b8063097da1f8146100e35780630a2435f8146100f8578063193c8edd146101185780633a7c721a1461015d578063715018a61461017d57806372f458661461019257806377a24f36146101a55780638da5cb5b146101c557600080fd5b366100de57005b600080fd5b6100f66100f13660046117a3565b6102dd565b005b34801561010457600080fd5b506100f6610113366004611856565b61064d565b34801561012457600080fd5b506101486101333660046118c1565b60666020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561016957600080fd5b506100f6610178366004611856565b6107f2565b34801561018957600080fd5b506100f6610963565b6100f66101a03660046118e5565b61099e565b3480156101b157600080fd5b506100f66101c036600461197e565b6109b6565b3480156101d157600080fd5b506101da610c5b565b60405161015491906119d6565b3480156101f357600080fd5b506101486102023660046118c1565b60656020526000908152604090205460ff1681565b34801561022357600080fd5b506100f66102323660046118c1565b610c6a565b34801561024357600080fd5b506100f66102523660046119ea565b610ce6565b34801561026357600080fd5b506100f6610272366004611a1a565b610d90565b6100f6610285366004611a6e565b610d9d565b6100f6610298366004611b1a565b61123b565b3480156102a957600080fd5b506100f66102b836600461197e565b61124f565b3480156102c957600080fd5b506100f66102d83660046118c1565b611601565b3360009081526065602052604090205460ff1615801561030d575033610301610c5b565b6001600160a01b031614155b1561033757335b60405163f26aea8b60e01b815260040161032e91906119d6565b60405180910390fd5b846000805a9050851561036b576001600160a01b0385163b61036b5760405162461bcd60e51b815260040161032e90611b76565b61037485610c6a565b6000856001600160a01b0316858989604051610391929190611b9f565b60006040518083038185875af1925050503d80600081146103ce576040519150601f19603f3d011682016040523d82523d6000602084013e6103d3565b606091505b50509050806103e9576040513d806000833e8082fd5b506001600160a01b0383161561064357366000602061040983601f611bc5565b6104139190611bdd565b9050610200610423600283611ce5565b61042d9190611bdd565b610438826006611cf4565b6104429190611bc5565b61044c9084611bc5565b925033321461045e57600091506105b3565b6001600160a01b038416156105b357836001600160a01b031663e83a2d826040518163ffffffff1660e01b815260040160006040518083038186803b1580156104a657600080fd5b505afa9250505080156104db57506040513d6000823e601f3d908101601f191682016040526104d89190810190611d29565b60015b6104e4576105b3565b8051156105b1576000856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b815260040160206040518083038186803b15801561052657600080fd5b505afa15801561053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055e9190611de6565b905048817f0000000000000000000000000000000000000000000000000000000000000000845161058f9190611cf4565b6105999190611cf4565b6105a39190611bdd565b6105ad9086611bc5565b9450505b505b846001600160a01b031663e3db8a49335a6105ce9087611dff565b856040518463ffffffff1660e01b81526004016105ed93929190611e16565b602060405180830381600087803b15801561060757600080fd5b505af115801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f9190611e45565b5050505b5050505050505050565b33610656610c5b565b6001600160a01b03161461067c5760405162461bcd60e51b815260040161032e90611e62565b8281146106a65760405163088253c360e11b8152600481018490526024810182905260440161032e565b60005b6001600160401b0381168411156107eb578282826001600160401b03168181106106d5576106d5611e97565b90506020020160208101906106ea9190611ead565b606560008787856001600160401b031681811061070957610709611e97565b905060200201602081019061071e91906118c1565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905584846001600160401b03831681811061076157610761611e97565b905060200201602081019061077691906118c1565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea28484846001600160401b03168181106107bb576107bb611e97565b90506020020160208101906107d09190611ead565b604051901515815260200160405180910390a26001016106a9565b5050505050565b336107fb610c5b565b6001600160a01b0316146108215760405162461bcd60e51b815260040161032e90611e62565b82811461084b5760405163088253c360e11b8152600481018490526024810182905260440161032e565b60005b838110156107eb5782828281811061086857610868611e97565b905060200201602081019061087d9190611ead565b6066600087878581811061089357610893611e97565b90506020020160208101906108a891906118c1565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558484828181106108e2576108e2611e97565b90506020020160208101906108f791906118c1565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a484848481811061093357610933611e97565b90506020020160208101906109489190611ead565b604051901515815260200160405180910390a260010161084e565b3361096c610c5b565b6001600160a01b0316146109925760405162461bcd60e51b815260040161032e90611e62565b61099c600061169a565b565b6109ae6000878787878787610d9d565b505050505050565b600054610100900460ff166109d15760005460ff16156109d5565b303b155b610a385760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161032e565b600054610100900460ff16158015610a5a576000805461ffff19166101011790555b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ae85760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161032e565b610af06116ec565b610af984611601565b6001600160a01b038516600081815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a260005b6001600160401b038116831115610c42576001606660008686856001600160401b0316818110610b8857610b88611e97565b9050602002016020810190610b9d91906118c1565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905583836001600160401b038316818110610be057610be0611e97565b9050602002016020810190610bf591906118c1565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610c32911515815260200190565b60405180910390a2600101610b56565b5080156107eb576000805461ff00191690555050505050565b6033546001600160a01b031690565b6001600160a01b03811660009081526066602052604090205460ff16158015610ca3575033610c97610c5b565b6001600160a01b031614155b15610ce357610cb0610c5b565b6040516320fe37c560e11b81526001600160a01b039182166004820152336024820152908216604482015260640161032e565b50565b33610cef610c5b565b6001600160a01b031614610d155760405162461bcd60e51b815260040161032e90611e62565b6000816001600160a01b03168360405160006040518083038185875af1925050503d8060008114610d62576040519150601f19603f3d011682016040523d82523d6000602084013e610d67565b606091505b5050905080610d8b5781604051630fdb769360e31b815260040161032e91906119d6565b505050565b610d8b600084848461124f565b3360009081526065602052604090205460ff16158015610dcd575033610dc1610c5b565b6001600160a01b031614155b15610dd85733610314565b866000805a905087868114610e0a5760405163088253c360e11b8152600481018290526024810188905260440161032e565b808514610e345760405163088253c360e11b8152600481018290526024810186905260440161032e565b60005b81811015610fd45760008b8b83818110610e5357610e53611e97565b9050602002810190610e659190611eca565b90501115610ec257610ea6898983818110610e8257610e82611e97565b9050602002016020810190610e9791906118c1565b6001600160a01b03163b151590565b610ec25760405162461bcd60e51b815260040161032e90611b76565b610eec898983818110610ed757610ed7611e97565b905060200201602081019061023291906118c1565b6000898983818110610f0057610f00611e97565b9050602002016020810190610f1591906118c1565b6001600160a01b0316888884818110610f3057610f30611e97565b905060200201358d8d85818110610f4957610f49611e97565b9050602002810190610f5b9190611eca565b604051610f69929190611b9f565b60006040518083038185875af1925050503d8060008114610fa6576040519150601f19603f3d011682016040523d82523d6000602084013e610fab565b606091505b5050905080610fc1576040513d806000833e8082fd5b5080610fcc81611f10565b915050610e37565b50506001600160a01b0383161561122f573660006020610ff583601f611bc5565b610fff9190611bdd565b905061020061100f600283611ce5565b6110199190611bdd565b611024826006611cf4565b61102e9190611bc5565b6110389084611bc5565b925033321461104a576000915061119f565b6001600160a01b0384161561119f57836001600160a01b031663e83a2d826040518163ffffffff1660e01b815260040160006040518083038186803b15801561109257600080fd5b505afa9250505080156110c757506040513d6000823e601f3d908101601f191682016040526110c49190810190611d29565b60015b6110d05761119f565b80511561119d576000856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b815260040160206040518083038186803b15801561111257600080fd5b505afa158015611126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a9190611de6565b905048817f0000000000000000000000000000000000000000000000000000000000000000845161117b9190611cf4565b6111859190611cf4565b61118f9190611bdd565b6111999086611bc5565b9450505b505b846001600160a01b031663e3db8a49335a6111ba9087611dff565b856040518463ffffffff1660e01b81526004016111d993929190611e16565b602060405180830381600087803b1580156111f357600080fd5b505af1158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122b9190611e45565b5050505b50505050505050505050565b6112496000858585856102dd565b50505050565b3360009081526065602052604090205460ff1615801561127f575033611273610c5b565b6001600160a01b031614155b1561128a5733610314565b836000805a90508360005b818110156113a157876001600160a01b0316631b45c86a8888848181106112be576112be611e97565b90506020020160208101906112d39190611f2b565b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401600060405180830381600087803b15801561131457600080fd5b505af1925050508015611325575060015b61138f573d808015611353576040519150601f19603f3d011682016040523d82523d6000602084013e611358565b606091505b50805161138d5760405162461bcd60e51b815260206004820152600360248201526247415360e81b604482015260640161032e565b505b8061139981611f10565b915050611295565b50506001600160a01b038316156115f85736600060206113c283601f611bc5565b6113cc9190611bdd565b90506102006113dc600283611ce5565b6113e69190611bdd565b6113f1826006611cf4565b6113fb9190611bc5565b6114059084611bc5565b9250333214611417576000915061156c565b6001600160a01b0384161561156c57836001600160a01b031663e83a2d826040518163ffffffff1660e01b815260040160006040518083038186803b15801561145f57600080fd5b505afa92505050801561149457506040513d6000823e601f3d908101601f191682016040526114919190810190611d29565b60015b61149d5761156c565b80511561156a576000856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b815260040160206040518083038186803b1580156114df57600080fd5b505afa1580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115179190611de6565b905048817f000000000000000000000000000000000000000000000000000000000000000084516115489190611cf4565b6115529190611cf4565b61155c9190611bdd565b6115669086611bc5565b9450505b505b846001600160a01b031663e3db8a49335a6115879087611dff565b856040518463ffffffff1660e01b81526004016115a693929190611e16565b602060405180830381600087803b1580156115c057600080fd5b505af11580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122f9190611e45565b50505050505050565b3361160a610c5b565b6001600160a01b0316146116305760405162461bcd60e51b815260040161032e90611e62565b6001600160a01b0381166116955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032e565b610ce3815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166117135760405162461bcd60e51b815260040161032e90611f54565b61099c600054610100900460ff1661173d5760405162461bcd60e51b815260040161032e90611f54565b61099c3361169a565b6001600160a01b0381168114610ce357600080fd5b60008083601f84011261176d57600080fd5b5081356001600160401b0381111561178457600080fd5b60208301915083602082850101111561179c57600080fd5b9250929050565b6000806000806000608086880312156117bb57600080fd5b85356117c681611746565b945060208601356001600160401b038111156117e157600080fd5b6117ed8882890161175b565b909550935050604086013561180181611746565b949793965091946060013592915050565b60008083601f84011261182457600080fd5b5081356001600160401b0381111561183b57600080fd5b6020830191508360208260051b850101111561179c57600080fd5b6000806000806040858703121561186c57600080fd5b84356001600160401b038082111561188357600080fd5b61188f88838901611812565b909650945060208701359150808211156118a857600080fd5b506118b587828801611812565b95989497509550505050565b6000602082840312156118d357600080fd5b81356118de81611746565b9392505050565b600080600080600080606087890312156118fe57600080fd5b86356001600160401b038082111561191557600080fd5b6119218a838b01611812565b9098509650602089013591508082111561193a57600080fd5b6119468a838b01611812565b9096509450604089013591508082111561195f57600080fd5b5061196c89828a01611812565b979a9699509497509295939492505050565b6000806000806060858703121561199457600080fd5b843561199f81611746565b935060208501356119af81611746565b925060408501356001600160401b038111156119ca57600080fd5b6118b587828801611812565b6001600160a01b0391909116815260200190565b600080604083850312156119fd57600080fd5b823591506020830135611a0f81611746565b809150509250929050565b600080600060408486031215611a2f57600080fd5b8335611a3a81611746565b925060208401356001600160401b03811115611a5557600080fd5b611a6186828701611812565b9497909650939450505050565b60008060008060008060006080888a031215611a8957600080fd5b8735611a9481611746565b965060208801356001600160401b0380821115611ab057600080fd5b611abc8b838c01611812565b909850965060408a0135915080821115611ad557600080fd5b611ae18b838c01611812565b909650945060608a0135915080821115611afa57600080fd5b50611b078a828b01611812565b989b979a50959850939692959293505050565b60008060008060608587031215611b3057600080fd5b84356001600160401b03811115611b4657600080fd5b611b528782880161175b565b9095509350506020850135611b6681611746565b9396929550929360400135925050565b6020808252600f908201526e2727afa1a7a222afa0aa2fa0a2222960891b604082015260600190565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611bd857611bd8611baf565b500190565b600082611bfa57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115611c3a578160001904821115611c2057611c20611baf565b80851615611c2d57918102915b93841c9390800290611c04565b509250929050565b600082611c5157506001611cdf565b81611c5e57506000611cdf565b8160018114611c745760028114611c7e57611c9a565b6001915050611cdf565b60ff841115611c8f57611c8f611baf565b50506001821b611cdf565b5060208310610133831016604e8410600b8410161715611cbd575081810a611cdf565b611cc78383611bff565b8060001904821115611cdb57611cdb611baf565b0290505b92915050565b60006118de60ff841683611c42565b6000816000190483118215151615611d0e57611d0e611baf565b500290565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215611d3c57600080fd5b82516001600160401b0380821115611d5357600080fd5b818501915085601f830112611d6757600080fd5b815181811115611d7957611d79611d13565b8060051b604051601f19603f83011681018181108582111715611d9e57611d9e611d13565b604052918252848201925083810185019188831115611dbc57600080fd5b938501935b82851015611dda57845184529385019392850192611dc1565b98975050505050505050565b600060208284031215611df857600080fd5b5051919050565b600082821015611e1157611e11611baf565b500390565b6001600160a01b039390931683526020830191909152604082015260600190565b8015158114610ce357600080fd5b600060208284031215611e5757600080fd5b81516118de81611e37565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611ebf57600080fd5b81356118de81611e37565b6000808335601e19843603018112611ee157600080fd5b8301803591506001600160401b03821115611efb57600080fd5b60200191503681900382131561179c57600080fd5b6000600019821415611f2457611f24611baf565b5060010190565b600060208284031215611f3d57600080fd5b81356001600160401b03811681146118de57600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220831b2e894c7d822d10b997c814fc271309f5357dd488cce1bfe00f8fe1d37d6c64736f6c63430008090033",
}

// ValidatorWalletABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletMetaData.ABI instead.
var ValidatorWalletABI = ValidatorWalletMetaData.ABI

// ValidatorWalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletMetaData.Bin instead.
var ValidatorWalletBin = ValidatorWalletMetaData.Bin

// DeployValidatorWallet deploys a new Ethereum contract, binding an instance of ValidatorWallet to it.
func DeployValidatorWallet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWallet, error) {
	parsed, err := ValidatorWalletMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// ValidatorWallet is an auto generated Go binding around an Ethereum contract.
type ValidatorWallet struct {
	ValidatorWalletCaller     // Read-only binding to the contract
	ValidatorWalletTransactor // Write-only binding to the contract
	ValidatorWalletFilterer   // Log filterer for contract events
}

// ValidatorWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletSession struct {
	Contract     *ValidatorWallet  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCallerSession struct {
	Contract *ValidatorWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ValidatorWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletTransactorSession struct {
	Contract     *ValidatorWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidatorWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletRaw struct {
	Contract *ValidatorWallet // Generic contract binding to access the raw methods on
}

// ValidatorWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCallerRaw struct {
	Contract *ValidatorWalletCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactorRaw struct {
	Contract *ValidatorWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWallet creates a new instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWallet(address common.Address, backend bind.ContractBackend) (*ValidatorWallet, error) {
	contract, err := bindValidatorWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// NewValidatorWalletCaller creates a new read-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCaller, error) {
	contract, err := bindValidatorWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCaller{contract: contract}, nil
}

// NewValidatorWalletTransactor creates a new write-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletTransactor, error) {
	contract, err := bindValidatorWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletTransactor{contract: contract}, nil
}

// NewValidatorWalletFilterer creates a new log filterer instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletFilterer, error) {
	contract, err := bindValidatorWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletFilterer{contract: contract}, nil
}

// bindValidatorWallet binds a generic wrapper to an already deployed contract.
func bindValidatorWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorWalletMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.ValidatorWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transact(opts, method, params...)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) AllowedExecutorDestinations(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "allowedExecutorDestinations", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) Executors(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "executors", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCallerSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCaller) ValidateExecuteTransaction(opts *bind.CallOpts, destination common.Address) error {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "validateExecuteTransaction", destination)

	if err != nil {
		return err
	}

	return err

}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCallerSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransaction(opts *bind.TransactOpts, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransaction", data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactions(opts *bind.TransactOpts, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactions", data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionsWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionsWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Initialize(opts *bind.TransactOpts, _executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "initialize", _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetAllowedExecutorDestinations(opts *bind.TransactOpts, destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setAllowedExecutorDestinations", destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetExecutor(opts *bind.TransactOpts, newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setExecutor", newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TimeoutChallenges(opts *bind.TransactOpts, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "timeoutChallenges", manager, challenges)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletSession) TimeoutChallenges(manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallenges(&_ValidatorWallet.TransactOpts, manager, challenges)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TimeoutChallenges(manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallenges(&_ValidatorWallet.TransactOpts, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TimeoutChallengesWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "timeoutChallengesWithGasRefunder", gasRefunder, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletSession) TimeoutChallengesWithGasRefunder(gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallengesWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TimeoutChallengesWithGasRefunder(gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallengesWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, manager, challenges)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) WithdrawEth(opts *bind.TransactOpts, amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "withdrawEth", amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// ValidatorWalletAllowedExecutorDestinationsUpdatedIterator is returned from FilterAllowedExecutorDestinationsUpdated and is used to iterate over the raw logs and unpacked data for AllowedExecutorDestinationsUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdatedIterator struct {
	Event *ValidatorWalletAllowedExecutorDestinationsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletAllowedExecutorDestinationsUpdated represents a AllowedExecutorDestinationsUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdated struct {
	Destination common.Address
	IsSet       bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAllowedExecutorDestinationsUpdated is a free log retrieval operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterAllowedExecutorDestinationsUpdated(opts *bind.FilterOpts, destination []common.Address) (*ValidatorWalletAllowedExecutorDestinationsUpdatedIterator, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletAllowedExecutorDestinationsUpdatedIterator{contract: _ValidatorWallet.contract, event: "AllowedExecutorDestinationsUpdated", logs: logs, sub: sub}, nil
}

// WatchAllowedExecutorDestinationsUpdated is a free log subscription operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchAllowedExecutorDestinationsUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletAllowedExecutorDestinationsUpdated, destination []common.Address) (event.Subscription, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowedExecutorDestinationsUpdated is a log parse operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseAllowedExecutorDestinationsUpdated(log types.Log) (*ValidatorWalletAllowedExecutorDestinationsUpdated, error) {
	event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletExecutorUpdatedIterator is returned from FilterExecutorUpdated and is used to iterate over the raw logs and unpacked data for ExecutorUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdatedIterator struct {
	Event *ValidatorWalletExecutorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletExecutorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletExecutorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletExecutorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletExecutorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletExecutorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletExecutorUpdated represents a ExecutorUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdated struct {
	Executor   common.Address
	IsExecutor bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecutorUpdated is a free log retrieval operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterExecutorUpdated(opts *bind.FilterOpts, executor []common.Address) (*ValidatorWalletExecutorUpdatedIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletExecutorUpdatedIterator{contract: _ValidatorWallet.contract, event: "ExecutorUpdated", logs: logs, sub: sub}, nil
}

// WatchExecutorUpdated is a free log subscription operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchExecutorUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletExecutorUpdated, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletExecutorUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutorUpdated is a log parse operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseExecutorUpdated(log types.Log) (*ValidatorWalletExecutorUpdated, error) {
	event := new(ValidatorWalletExecutorUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferredIterator struct {
	Event *ValidatorWalletOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletOwnershipTransferredIterator{contract: _ValidatorWallet.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletOwnershipTransferred)
				if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletOwnershipTransferred, error) {
	event := new(ValidatorWalletOwnershipTransferred)
	if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorMetaData contains all meta data concerning the ValidatorWalletCreator contract.
var ValidatorWalletCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"setTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ValidatorWalletCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletCreatorMetaData.ABI instead.
var ValidatorWalletCreatorABI = ValidatorWalletCreatorMetaData.ABI

// ValidatorWalletCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletCreatorMetaData.Bin instead.
var ValidatorWalletCreatorBin = ValidatorWalletCreatorMetaData.Bin

// DeployValidatorWalletCreator deploys a new Ethereum contract, binding an instance of ValidatorWalletCreator to it.
func DeployValidatorWalletCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWalletCreator, error) {
	parsed, err := ValidatorWalletCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// ValidatorWalletCreator is an auto generated Go binding around an Ethereum contract.
type ValidatorWalletCreator struct {
	ValidatorWalletCreatorCaller     // Read-only binding to the contract
	ValidatorWalletCreatorTransactor // Write-only binding to the contract
	ValidatorWalletCreatorFilterer   // Log filterer for contract events
}

// ValidatorWalletCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletCreatorSession struct {
	Contract     *ValidatorWalletCreator // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCreatorCallerSession struct {
	Contract *ValidatorWalletCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ValidatorWalletCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletCreatorTransactorSession struct {
	Contract     *ValidatorWalletCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletCreatorRaw struct {
	Contract *ValidatorWalletCreator // Generic contract binding to access the raw methods on
}

// ValidatorWalletCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCallerRaw struct {
	Contract *ValidatorWalletCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactorRaw struct {
	Contract *ValidatorWalletCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWalletCreator creates a new instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreator(address common.Address, backend bind.ContractBackend) (*ValidatorWalletCreator, error) {
	contract, err := bindValidatorWalletCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// NewValidatorWalletCreatorCaller creates a new read-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCreatorCaller, error) {
	contract, err := bindValidatorWalletCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorCaller{contract: contract}, nil
}

// NewValidatorWalletCreatorTransactor creates a new write-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletCreatorTransactor, error) {
	contract, err := bindValidatorWalletCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTransactor{contract: contract}, nil
}

// NewValidatorWalletCreatorFilterer creates a new log filterer instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletCreatorFilterer, error) {
	contract, err := bindValidatorWalletCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorFilterer{contract: contract}, nil
}

// bindValidatorWalletCreator binds a generic wrapper to an already deployed contract.
func bindValidatorWalletCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorWalletCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Template(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "template")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) CreateWallet(opts *bind.TransactOpts, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "createWallet", initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) SetTemplate(opts *bind.TransactOpts, _template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "setTemplate", _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// ValidatorWalletCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferredIterator struct {
	Event *ValidatorWalletCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorOwnershipTransferredIterator{contract: _ValidatorWalletCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorOwnershipTransferred)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletCreatorOwnershipTransferred, error) {
	event := new(ValidatorWalletCreatorOwnershipTransferred)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorTemplateUpdatedIterator is returned from FilterTemplateUpdated and is used to iterate over the raw logs and unpacked data for TemplateUpdated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdatedIterator struct {
	Event *ValidatorWalletCreatorTemplateUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorTemplateUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorTemplateUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorTemplateUpdated represents a TemplateUpdated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplateUpdated is a free log retrieval operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterTemplateUpdated(opts *bind.FilterOpts) (*ValidatorWalletCreatorTemplateUpdatedIterator, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTemplateUpdatedIterator{contract: _ValidatorWalletCreator.contract, event: "TemplateUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplateUpdated is a free log subscription operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchTemplateUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorTemplateUpdated) (event.Subscription, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorTemplateUpdated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplateUpdated is a log parse operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseTemplateUpdated(log types.Log) (*ValidatorWalletCreatorTemplateUpdated, error) {
	event := new(ValidatorWalletCreatorTemplateUpdated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorWalletCreatedIterator is returned from FilterWalletCreated and is used to iterate over the raw logs and unpacked data for WalletCreated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreatedIterator struct {
	Event *ValidatorWalletCreatorWalletCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorWalletCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorWalletCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorWalletCreated represents a WalletCreated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreated struct {
	WalletAddress   common.Address
	ExecutorAddress common.Address
	OwnerAddress    common.Address
	AdminProxy      common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWalletCreated is a free log retrieval operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterWalletCreated(opts *bind.FilterOpts, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (*ValidatorWalletCreatorWalletCreatedIterator, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorWalletCreatedIterator{contract: _ValidatorWalletCreator.contract, event: "WalletCreated", logs: logs, sub: sub}, nil
}

// WatchWalletCreated is a free log subscription operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchWalletCreated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorWalletCreated, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (event.Subscription, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorWalletCreated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWalletCreated is a log parse operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseWalletCreated(log types.Log) (*ValidatorWalletCreatorWalletCreated, error) {
	event := new(ValidatorWalletCreatorWalletCreated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
