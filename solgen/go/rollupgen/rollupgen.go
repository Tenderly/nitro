// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rollupgen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/tenderly/nitro/go-ethereum"
	"github.com/tenderly/nitro/go-ethereum/accounts/abi"
	"github.com/tenderly/nitro/go-ethereum/accounts/abi/bind"
	"github.com/tenderly/nitro/go-ethereum/common"
	"github.com/tenderly/nitro/go-ethereum/core/types"
	"github.com/tenderly/nitro/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Config is an auto generated low-level Go binding around an user-defined struct.
type Config struct {
	ConfirmPeriodBlocks            uint64
	ExtraChallengeTimeBlocks       uint64
	StakeToken                     common.Address
	BaseStake                      *big.Int
	WasmModuleRoot                 [32]byte
	Owner                          common.Address
	LoserStakeEscrow               common.Address
	ChainId                        *big.Int
	GenesisBlockNum                uint64
	SequencerInboxMaxTimeVariation ISequencerInboxMaxTimeVariation
}

// ContractDependencies is an auto generated low-level Go binding around an user-defined struct.
type ContractDependencies struct {
	Bridge                 common.Address
	SequencerInbox         common.Address
	Inbox                  common.Address
	Outbox                 common.Address
	RollupEventInbox       common.Address
	ChallengeManager       common.Address
	RollupAdminLogic       common.Address
	RollupUserLogic        common.Address
	ValidatorUtils         common.Address
	ValidatorWalletCreator common.Address
}

// GlobalState is an auto generated low-level Go binding around an user-defined struct.
type GlobalState struct {
	Bytes32Vals [2][32]byte
	U64Vals     [2]uint64
}

// IRollupCoreStaker is an auto generated low-level Go binding around an user-defined struct.
type IRollupCoreStaker struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}

// ISequencerInboxMaxTimeVariation is an auto generated low-level Go binding around an user-defined struct.
type ISequencerInboxMaxTimeVariation struct {
	DelayBlocks   *big.Int
	FutureBlocks  *big.Int
	DelaySeconds  *big.Int
	FutureSeconds *big.Int
}

// Node is an auto generated low-level Go binding around an user-defined struct.
type Node struct {
	StateHash                   [32]byte
	ChallengeHash               [32]byte
	ConfirmData                 [32]byte
	PrevNum                     uint64
	DeadlineBlock               uint64
	NoChildConfirmedBeforeBlock uint64
	StakerCount                 uint64
	ChildStakerCount            uint64
	FirstChildBlock             uint64
	LatestChildNumber           uint64
	CreatedAtBlock              uint64
	NodeHash                    [32]byte
}

// RollupLibAssertion is an auto generated low-level Go binding around an user-defined struct.
type RollupLibAssertion struct {
	BeforeState RollupLibExecutionState
	AfterState  RollupLibExecutionState
	NumBlocks   uint64
}

// RollupLibExecutionState is an auto generated low-level Go binding around an user-defined struct.
type RollupLibExecutionState struct {
	GlobalState   GlobalState
	MachineStatus uint8
}

// ValidatorUtilsNodeConflict is an auto generated low-level Go binding around an user-defined struct.
type ValidatorUtilsNodeConflict struct {
	Ty    uint8
	Node1 uint64
	Node2 uint64
}

// AbsRollupUserLogicMetaData contains all meta data concerning the AbsRollupUserLogic contract.
var AbsRollupUserLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VALIDATOR_AFK_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winningStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"losingStaker\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedBlocks\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakedOnLatestConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// AbsRollupUserLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use AbsRollupUserLogicMetaData.ABI instead.
var AbsRollupUserLogicABI = AbsRollupUserLogicMetaData.ABI

// AbsRollupUserLogic is an auto generated Go binding around an Ethereum contract.
type AbsRollupUserLogic struct {
	AbsRollupUserLogicCaller     // Read-only binding to the contract
	AbsRollupUserLogicTransactor // Write-only binding to the contract
	AbsRollupUserLogicFilterer   // Log filterer for contract events
}

// AbsRollupUserLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type AbsRollupUserLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupUserLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AbsRollupUserLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupUserLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AbsRollupUserLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupUserLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AbsRollupUserLogicSession struct {
	Contract     *AbsRollupUserLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// AbsRollupUserLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AbsRollupUserLogicCallerSession struct {
	Contract *AbsRollupUserLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// AbsRollupUserLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AbsRollupUserLogicTransactorSession struct {
	Contract     *AbsRollupUserLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// AbsRollupUserLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type AbsRollupUserLogicRaw struct {
	Contract *AbsRollupUserLogic // Generic contract binding to access the raw methods on
}

// AbsRollupUserLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AbsRollupUserLogicCallerRaw struct {
	Contract *AbsRollupUserLogicCaller // Generic read-only contract binding to access the raw methods on
}

// AbsRollupUserLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AbsRollupUserLogicTransactorRaw struct {
	Contract *AbsRollupUserLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAbsRollupUserLogic creates a new instance of AbsRollupUserLogic, bound to a specific deployed contract.
func NewAbsRollupUserLogic(address common.Address, backend bind.ContractBackend) (*AbsRollupUserLogic, error) {
	contract, err := bindAbsRollupUserLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogic{AbsRollupUserLogicCaller: AbsRollupUserLogicCaller{contract: contract}, AbsRollupUserLogicTransactor: AbsRollupUserLogicTransactor{contract: contract}, AbsRollupUserLogicFilterer: AbsRollupUserLogicFilterer{contract: contract}}, nil
}

// NewAbsRollupUserLogicCaller creates a new read-only instance of AbsRollupUserLogic, bound to a specific deployed contract.
func NewAbsRollupUserLogicCaller(address common.Address, caller bind.ContractCaller) (*AbsRollupUserLogicCaller, error) {
	contract, err := bindAbsRollupUserLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicCaller{contract: contract}, nil
}

// NewAbsRollupUserLogicTransactor creates a new write-only instance of AbsRollupUserLogic, bound to a specific deployed contract.
func NewAbsRollupUserLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*AbsRollupUserLogicTransactor, error) {
	contract, err := bindAbsRollupUserLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicTransactor{contract: contract}, nil
}

// NewAbsRollupUserLogicFilterer creates a new log filterer instance of AbsRollupUserLogic, bound to a specific deployed contract.
func NewAbsRollupUserLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*AbsRollupUserLogicFilterer, error) {
	contract, err := bindAbsRollupUserLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicFilterer{contract: contract}, nil
}

// bindAbsRollupUserLogic binds a generic wrapper to an already deployed contract.
func bindAbsRollupUserLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AbsRollupUserLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AbsRollupUserLogic *AbsRollupUserLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AbsRollupUserLogic.Contract.AbsRollupUserLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AbsRollupUserLogic *AbsRollupUserLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.AbsRollupUserLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AbsRollupUserLogic *AbsRollupUserLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.AbsRollupUserLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AbsRollupUserLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.contract.Transact(opts, method, params...)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) VALIDATORAFKBLOCKS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "VALIDATOR_AFK_BLOCKS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_AbsRollupUserLogic.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_AbsRollupUserLogic.CallOpts)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked     *big.Int
		Index            uint64
		LatestStakedNode uint64
		CurrentChallenge uint64
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.LatestStakedNode = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _AbsRollupUserLogic.Contract.StakerMap(&_AbsRollupUserLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _AbsRollupUserLogic.Contract.StakerMap(&_AbsRollupUserLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.AmountStaked(&_AbsRollupUserLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.AmountStaked(&_AbsRollupUserLogic.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) BaseStake() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.BaseStake(&_AbsRollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) BaseStake() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.BaseStake(&_AbsRollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Bridge() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Bridge(&_AbsRollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Bridge() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Bridge(&_AbsRollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ChainId() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.ChainId(&_AbsRollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ChainId() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.ChainId(&_AbsRollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ChallengeManager() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ChallengeManager(&_AbsRollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ChallengeManager(&_AbsRollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _AbsRollupUserLogic.Contract.ConfirmPeriodBlocks(&_AbsRollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _AbsRollupUserLogic.Contract.ConfirmPeriodBlocks(&_AbsRollupUserLogic.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CountStakedZombies(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CountStakedZombies(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CountZombiesStakedOnChildren(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CountZombiesStakedOnChildren(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _AbsRollupUserLogic.Contract.CurrentChallenge(&_AbsRollupUserLogic.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _AbsRollupUserLogic.Contract.CurrentChallenge(&_AbsRollupUserLogic.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CurrentRequiredStake() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CurrentRequiredStake(&_AbsRollupUserLogic.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.CurrentRequiredStake(&_AbsRollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _AbsRollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_AbsRollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _AbsRollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_AbsRollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) FirstUnresolvedNode() (uint64, error) {
	return _AbsRollupUserLogic.Contract.FirstUnresolvedNode(&_AbsRollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _AbsRollupUserLogic.Contract.FirstUnresolvedNode(&_AbsRollupUserLogic.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) GetNode(nodeNum uint64) (Node, error) {
	return _AbsRollupUserLogic.Contract.GetNode(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _AbsRollupUserLogic.Contract.GetNode(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _AbsRollupUserLogic.Contract.GetStaker(&_AbsRollupUserLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _AbsRollupUserLogic.Contract.GetStaker(&_AbsRollupUserLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _AbsRollupUserLogic.Contract.GetStakerAddress(&_AbsRollupUserLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _AbsRollupUserLogic.Contract.GetStakerAddress(&_AbsRollupUserLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Inbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Inbox(&_AbsRollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Inbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Inbox(&_AbsRollupUserLogic.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Initialize(stakeToken common.Address) error {
	return _AbsRollupUserLogic.Contract.Initialize(&_AbsRollupUserLogic.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Initialize(stakeToken common.Address) error {
	return _AbsRollupUserLogic.Contract.Initialize(&_AbsRollupUserLogic.CallOpts, stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) IsERC20Enabled() (bool, error) {
	return _AbsRollupUserLogic.Contract.IsERC20Enabled(&_AbsRollupUserLogic.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) IsERC20Enabled() (bool, error) {
	return _AbsRollupUserLogic.Contract.IsERC20Enabled(&_AbsRollupUserLogic.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsStaked(&_AbsRollupUserLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsStaked(&_AbsRollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) IsStakedOnLatestConfirmed(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "isStakedOnLatestConfirmed", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_AbsRollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_AbsRollupUserLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsValidator(&_AbsRollupUserLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsValidator(&_AbsRollupUserLogic.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) IsZombie(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsZombie(&_AbsRollupUserLogic.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.IsZombie(&_AbsRollupUserLogic.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) LastStakeBlock() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LastStakeBlock(&_AbsRollupUserLogic.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) LastStakeBlock() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LastStakeBlock(&_AbsRollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) LatestConfirmed() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestConfirmed(&_AbsRollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) LatestConfirmed() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestConfirmed(&_AbsRollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) LatestNodeCreated() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestNodeCreated(&_AbsRollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) LatestNodeCreated() (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestNodeCreated(&_AbsRollupUserLogic.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestStakedNode(&_AbsRollupUserLogic.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _AbsRollupUserLogic.Contract.LatestStakedNode(&_AbsRollupUserLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.LoserStakeEscrow(&_AbsRollupUserLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.LoserStakeEscrow(&_AbsRollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.MinimumAssertionPeriod(&_AbsRollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.MinimumAssertionPeriod(&_AbsRollupUserLogic.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.NodeHasStaker(&_AbsRollupUserLogic.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _AbsRollupUserLogic.Contract.NodeHasStaker(&_AbsRollupUserLogic.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Outbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Outbox(&_AbsRollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Outbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Outbox(&_AbsRollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Owner() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Owner(&_AbsRollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Owner() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.Owner(&_AbsRollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) Paused() (bool, error) {
	return _AbsRollupUserLogic.Contract.Paused(&_AbsRollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) Paused() (bool, error) {
	return _AbsRollupUserLogic.Contract.Paused(&_AbsRollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ProxiableUUID() ([32]byte, error) {
	return _AbsRollupUserLogic.Contract.ProxiableUUID(&_AbsRollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _AbsRollupUserLogic.Contract.ProxiableUUID(&_AbsRollupUserLogic.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RequireUnresolved(nodeNum *big.Int) error {
	return _AbsRollupUserLogic.Contract.RequireUnresolved(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _AbsRollupUserLogic.Contract.RequireUnresolved(&_AbsRollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RequireUnresolvedExists() error {
	return _AbsRollupUserLogic.Contract.RequireUnresolvedExists(&_AbsRollupUserLogic.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) RequireUnresolvedExists() error {
	return _AbsRollupUserLogic.Contract.RequireUnresolvedExists(&_AbsRollupUserLogic.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.RequiredStake(&_AbsRollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.RequiredStake(&_AbsRollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.RollupDeploymentBlock(&_AbsRollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.RollupDeploymentBlock(&_AbsRollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RollupEventInbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.RollupEventInbox(&_AbsRollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.RollupEventInbox(&_AbsRollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) SequencerInbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.SequencerInbox(&_AbsRollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.SequencerInbox(&_AbsRollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) StakeToken() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.StakeToken(&_AbsRollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) StakeToken() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.StakeToken(&_AbsRollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) StakerCount() (uint64, error) {
	return _AbsRollupUserLogic.Contract.StakerCount(&_AbsRollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) StakerCount() (uint64, error) {
	return _AbsRollupUserLogic.Contract.StakerCount(&_AbsRollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.TotalWithdrawableFunds(&_AbsRollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.TotalWithdrawableFunds(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ValidatorUtils() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ValidatorUtils(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ValidatorUtils() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ValidatorUtils(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ValidatorWalletCreator(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ValidatorWalletCreator(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _AbsRollupUserLogic.Contract.ValidatorWhitelistDisabled(&_AbsRollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _AbsRollupUserLogic.Contract.ValidatorWhitelistDisabled(&_AbsRollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _AbsRollupUserLogic.Contract.WasmModuleRoot(&_AbsRollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _AbsRollupUserLogic.Contract.WasmModuleRoot(&_AbsRollupUserLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.WithdrawableFunds(&_AbsRollupUserLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.WithdrawableFunds(&_AbsRollupUserLogic.CallOpts, user)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ZombieAddress(&_AbsRollupUserLogic.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _AbsRollupUserLogic.Contract.ZombieAddress(&_AbsRollupUserLogic.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ZombieCount() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.ZombieCount(&_AbsRollupUserLogic.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ZombieCount() (*big.Int, error) {
	return _AbsRollupUserLogic.Contract.ZombieCount(&_AbsRollupUserLogic.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _AbsRollupUserLogic.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _AbsRollupUserLogic.Contract.ZombieLatestStakedNode(&_AbsRollupUserLogic.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_AbsRollupUserLogic *AbsRollupUserLogicCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _AbsRollupUserLogic.Contract.ZombieLatestStakedNode(&_AbsRollupUserLogic.CallOpts, zombieNum)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) CompleteChallenge(opts *bind.TransactOpts, challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "completeChallenge", challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.CompleteChallenge(&_AbsRollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.CompleteChallenge(&_AbsRollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ConfirmNextNode(&_AbsRollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ConfirmNextNode(&_AbsRollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.CreateChallenge(&_AbsRollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.CreateChallenge(&_AbsRollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ReduceDeposit(&_AbsRollupUserLogic.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ReduceDeposit(&_AbsRollupUserLogic.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RejectNextNode(&_AbsRollupUserLogic.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RejectNextNode(&_AbsRollupUserLogic.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveOldZombies(&_AbsRollupUserLogic.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveOldZombies(&_AbsRollupUserLogic.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveWhitelistAfterFork(&_AbsRollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveWhitelistAfterFork(&_AbsRollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_AbsRollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_AbsRollupUserLogic.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveZombie(&_AbsRollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.RemoveZombie(&_AbsRollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ReturnOldDeposit(&_AbsRollupUserLogic.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.ReturnOldDeposit(&_AbsRollupUserLogic.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.StakeOnExistingNode(&_AbsRollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.StakeOnExistingNode(&_AbsRollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) StakeOnNewNode(opts *bind.TransactOpts, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.StakeOnNewNode(&_AbsRollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.StakeOnNewNode(&_AbsRollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupUserLogic.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.WithdrawStakerFunds(&_AbsRollupUserLogic.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_AbsRollupUserLogic *AbsRollupUserLogicTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _AbsRollupUserLogic.Contract.WithdrawStakerFunds(&_AbsRollupUserLogic.TransactOpts)
}

// AbsRollupUserLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicAdminChangedIterator struct {
	Event *AbsRollupUserLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicAdminChanged represents a AdminChanged event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*AbsRollupUserLogicAdminChangedIterator, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicAdminChangedIterator{contract: _AbsRollupUserLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicAdminChanged)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseAdminChanged(log types.Log) (*AbsRollupUserLogicAdminChanged, error) {
	event := new(AbsRollupUserLogicAdminChanged)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicBeaconUpgradedIterator struct {
	Event *AbsRollupUserLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicBeaconUpgraded represents a BeaconUpgraded event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*AbsRollupUserLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicBeaconUpgradedIterator{contract: _AbsRollupUserLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicBeaconUpgraded)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseBeaconUpgraded(log types.Log) (*AbsRollupUserLogicBeaconUpgraded, error) {
	event := new(AbsRollupUserLogicBeaconUpgraded)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeConfirmedIterator struct {
	Event *AbsRollupUserLogicNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicNodeConfirmed represents a NodeConfirmed event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*AbsRollupUserLogicNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicNodeConfirmedIterator{contract: _AbsRollupUserLogic.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicNodeConfirmed)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseNodeConfirmed(log types.Log) (*AbsRollupUserLogicNodeConfirmed, error) {
	event := new(AbsRollupUserLogicNodeConfirmed)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeCreatedIterator struct {
	Event *AbsRollupUserLogicNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicNodeCreated represents a NodeCreated event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          RollupLibAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*AbsRollupUserLogicNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicNodeCreatedIterator{contract: _AbsRollupUserLogic.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicNodeCreated)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseNodeCreated(log types.Log) (*AbsRollupUserLogicNodeCreated, error) {
	event := new(AbsRollupUserLogicNodeCreated)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeRejectedIterator struct {
	Event *AbsRollupUserLogicNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicNodeRejected represents a NodeRejected event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*AbsRollupUserLogicNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicNodeRejectedIterator{contract: _AbsRollupUserLogic.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicNodeRejected)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseNodeRejected(log types.Log) (*AbsRollupUserLogicNodeRejected, error) {
	event := new(AbsRollupUserLogicNodeRejected)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicPausedIterator struct {
	Event *AbsRollupUserLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicPaused represents a Paused event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*AbsRollupUserLogicPausedIterator, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicPausedIterator{contract: _AbsRollupUserLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicPaused) (event.Subscription, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicPaused)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParsePaused(log types.Log) (*AbsRollupUserLogicPaused, error) {
	event := new(AbsRollupUserLogicPaused)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicRollupChallengeStartedIterator struct {
	Event *AbsRollupUserLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*AbsRollupUserLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicRollupChallengeStartedIterator{contract: _AbsRollupUserLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicRollupChallengeStarted)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*AbsRollupUserLogicRollupChallengeStarted, error) {
	event := new(AbsRollupUserLogicRollupChallengeStarted)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicRollupInitializedIterator struct {
	Event *AbsRollupUserLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicRollupInitialized represents a RollupInitialized event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*AbsRollupUserLogicRollupInitializedIterator, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicRollupInitializedIterator{contract: _AbsRollupUserLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicRollupInitialized)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseRollupInitialized(log types.Log) (*AbsRollupUserLogicRollupInitialized, error) {
	event := new(AbsRollupUserLogicRollupInitialized)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUnpausedIterator struct {
	Event *AbsRollupUserLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicUnpaused represents a Unpaused event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*AbsRollupUserLogicUnpausedIterator, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicUnpausedIterator{contract: _AbsRollupUserLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicUnpaused)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseUnpaused(log types.Log) (*AbsRollupUserLogicUnpaused, error) {
	event := new(AbsRollupUserLogicUnpaused)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUpgradedIterator struct {
	Event *AbsRollupUserLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicUpgraded represents a Upgraded event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*AbsRollupUserLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicUpgradedIterator{contract: _AbsRollupUserLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicUpgraded)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseUpgraded(log types.Log) (*AbsRollupUserLogicUpgraded, error) {
	event := new(AbsRollupUserLogicUpgraded)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUpgradedSecondaryIterator struct {
	Event *AbsRollupUserLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicUpgradedSecondary represents a UpgradedSecondary event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*AbsRollupUserLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicUpgradedSecondaryIterator{contract: _AbsRollupUserLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicUpgradedSecondary)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseUpgradedSecondary(log types.Log) (*AbsRollupUserLogicUpgradedSecondary, error) {
	event := new(AbsRollupUserLogicUpgradedSecondary)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUserStakeUpdatedIterator struct {
	Event *AbsRollupUserLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicUserStakeUpdated represents a UserStakeUpdated event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*AbsRollupUserLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicUserStakeUpdatedIterator{contract: _AbsRollupUserLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicUserStakeUpdated)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseUserStakeUpdated(log types.Log) (*AbsRollupUserLogicUserStakeUpdated, error) {
	event := new(AbsRollupUserLogicUserStakeUpdated)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *AbsRollupUserLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupUserLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupUserLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupUserLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the AbsRollupUserLogic contract.
type AbsRollupUserLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupUserLogicUserWithdrawableFundsUpdatedIterator{contract: _AbsRollupUserLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *AbsRollupUserLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _AbsRollupUserLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupUserLogicUserWithdrawableFundsUpdated)
				if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_AbsRollupUserLogic *AbsRollupUserLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*AbsRollupUserLogicUserWithdrawableFundsUpdated, error) {
	event := new(AbsRollupUserLogicUserWithdrawableFundsUpdated)
	if err := _AbsRollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorMetaData contains all meta data concerning the BridgeCreator contract.
var BridgeCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeTemplate\",\"outputs\":[{\"internalType\":\"contractBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"maxTimeVariation\",\"type\":\"tuple\"}],\"name\":\"createBridge\",\"outputs\":[{\"internalType\":\"contractBridge\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractSequencerInbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractInbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractRollupEventInbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inboxTemplate\",\"outputs\":[{\"internalType\":\"contractInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outboxTemplate\",\"outputs\":[{\"internalType\":\"contractOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInboxTemplate\",\"outputs\":[{\"internalType\":\"contractRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInboxTemplate\",\"outputs\":[{\"internalType\":\"contractSequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sequencerInboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rollupEventInboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outboxTemplate\",\"type\":\"address\"}],\"name\":\"updateTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a3361018c565b604051610026906101dc565b604051809103906000f080158015610042573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905560405161006f906101ea565b604051809103906000f08015801561008b573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b03929092169190911790556040516100b8906101f8565b604051809103906000f0801580156100d4573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b039290921691909117905560405161010190610206565b604051809103906000f08015801561011d573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b039290921691909117905560405161014a90610214565b604051809103906000f080158015610166573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055610222565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6116b68062001b9283390190565b612395806200324883390190565b61264380620055dd83390190565b6104d38062007c2083390190565b6113c880620080f383390190565b61196080620002326000396000f3fe60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c806395fd089f116200006e57806395fd089f146200015e578063ae583c031462000172578063e6027a871462000186578063f2fde38b146200019a578063fc6a2ed014620001b157600080fd5b80632147e58e14620000b05780636c6e47c014620000c9578063715018a6146200011f5780637ba0e85714620001295780638da5cb5b146200014c575b600080fd5b620000c7620000c136600462000812565b620001c5565b005b620000e0620000da36600462000882565b62000281565b604080516001600160a01b03968716815294861660208601529285169284019290925283166060830152909116608082015260a0015b60405180910390f35b620000c7620006ba565b6003546200013d906001600160a01b031681565b60405162000116919062000931565b6000546001600160a01b03166200013d565b6001546200013d906001600160a01b031681565b6004546200013d906001600160a01b031681565b6002546200013d906001600160a01b031681565b620000c7620001ab36600462000945565b620006f5565b6005546200013d906001600160a01b031681565b6000546001600160a01b03163314620001fb5760405162461bcd60e51b8152600401620001f2906200096a565b60405180910390fd5b600180546001600160a01b03199081166001600160a01b0388811691909117909255600280548216878416179055600380548216868416179055600480548216858416179055600580549091169183169190911790556040517fc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b90600090a15050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905281908190819081906001546040516001600160a01b03909116908a90620002d990620007e7565b620002e69291906200099f565b604051809103906000f08015801562000303573d6000803e3d6000fd5b506001600160a01b0390811660208301526002546040519116908a906200032a90620007e7565b620003379291906200099f565b604051809103906000f08015801562000354573d6000803e3d6000fd5b506001600160a01b0390811660408084019190915260035490519116908a906200037e90620007e7565b6200038b9291906200099f565b604051809103906000f080158015620003a8573d6000803e3d6000fd5b506001600160a01b0390811660608301526004546040519116908a90620003cf90620007e7565b620003dc9291906200099f565b604051809103906000f080158015620003f9573d6000803e3d6000fd5b506001600160a01b0390811660808301526005546040519116908a906200042090620007e7565b6200042d9291906200099f565b604051809103906000f0801580156200044a573d6000803e3d6000fd5b506001600160a01b0390811660a0830152602082015160405163189acdbd60e31b815291169063c4d66de89062000486908b9060040162000931565b600060405180830381600087803b158015620004a157600080fd5b505af1158015620004b6573d6000803e3d6000fd5b5050506040808301516020808501518351630fbd495960e11b81526001600160a01b0391821660048201528c516024820152918c01516044830152928b0151606482015260608b0151608482015291169150631f7a92b29060a401600060405180830381600087803b1580156200052c57600080fd5b505af115801562000541573d6000803e3d6000fd5b50505060608201516020830151604080850151905163485cc95560e01b81526001600160a01b03928316600482015290821660248201529116915063485cc95590604401600060405180830381600087803b158015620005a057600080fd5b505af1158015620005b5573d6000803e3d6000fd5b5050505080608001516001600160a01b031663c4d66de882602001516040518263ffffffff1660e01b8152600401620005ef919062000931565b600060405180830381600087803b1580156200060a57600080fd5b505af11580156200061f573d6000803e3d6000fd5b505050508060a001516001600160a01b031663c4d66de882602001516040518263ffffffff1660e01b815260040162000659919062000931565b600060405180830381600087803b1580156200067457600080fd5b505af115801562000689573d6000803e3d6000fd5b50505050602081015160408201516060830151608084015160a090940151929c919b50995091975095509350505050565b6000546001600160a01b03163314620006e75760405162461bcd60e51b8152600401620001f2906200096a565b620006f3600062000797565b565b6000546001600160a01b03163314620007225760405162461bcd60e51b8152600401620001f2906200096a565b6001600160a01b038116620007895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001f2565b620007948162000797565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610f6280620009c983390190565b80356001600160a01b03811681146200080d57600080fd5b919050565b600080600080600060a086880312156200082b57600080fd5b6200083686620007f5565b94506200084660208701620007f5565b93506200085660408701620007f5565b92506200086660608701620007f5565b91506200087660808701620007f5565b90509295509295909350565b600080600083850360c08112156200089957600080fd5b620008a485620007f5565b9350620008b460208601620007f5565b92506080603f1982011215620008c957600080fd5b506040516080810181811067ffffffffffffffff82111715620008fc57634e487b7160e01b600052604160045260246000fd5b806040525060408501358152606085013560208201526080850135604082015260a08501356060820152809150509250925092565b6001600160a01b0391909116815260200190565b6000602082840312156200095857600080fd5b6200096382620007f5565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b039283168152911660208201526060604082018190526000908201526080019056fe608060405260405162000f6238038062000f62833981016040819052620000269162000519565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005f9565b60008051602062000f1b833981519152146200007557620000756200061f565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005f9565b60008051602062000efb83398151915214620000d357620000d36200061f565b620000de8262000124565b50505062000688565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000f3b6027913962000381565b9392505050565b60006200021a60008051602062000efb83398151915260001b6200046760201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000efb83398151915260001b6200046760201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046a60201b6200028c1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000f1b83398151915260001b6200046760201b620002081760201c565b60606001600160a01b0384163b620003eb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b03168560405162000408919062000635565b600060405180830381855af49150503d806000811462000445576040519150601f19603f3d011682016040523d82523d6000602084013e6200044a565b606091505b5090925090506200045d82828662000479565b9695505050505050565b90565b6001600160a01b03163b151590565b606083156200048a575081620001e9565b8251156200049b5782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000653565b80516001600160a01b0381168114620004cf57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000507578181015183820152602001620004ed565b838111156200011d5750506000910152565b6000806000606084860312156200052f57600080fd5b6200053a84620004b7565b92506200054a60208501620004b7565b60408501519092506001600160401b03808211156200056857600080fd5b818601915086601f8301126200057d57600080fd5b815181811115620005925762000592620004d4565b604051601f8201601f19908116603f01168101908382118183101715620005bd57620005bd620004d4565b81604052828152896020848701011115620005d757600080fd5b620005ea836020830160208801620004ea565b80955050505050509250925092565b6000828210156200061a57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000649818460208701620004ea565b9190910192915050565b602081526000825180602084015262000674816040850160208701620004ea565b601f01601f19169190910160400192915050565b61086380620006986000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106ed565b610118565b61005b610093366004610708565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106ed565b61020b565b3480156100f557600080fd5b506100ad610235565b61010661029b565b61011661011161033a565b610344565b565b610120610368565b6001600160a01b0316336001600160a01b03161415610157576101548160405180602001604052806000815250600061039b565b50565b6101546100fe565b610167610368565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061039b915050565b505050565b6101c36100fe565b60006101da610368565b6001600160a01b0316336001600160a01b03161415610200576101fb61033a565b905090565b6102086100fe565b90565b610213610368565b6001600160a01b0316336001600160a01b0316141561015757610154816103c6565b600061023f610368565b6001600160a01b0316336001600160a01b03161415610200576101fb610368565b606061028583836040518060600160405280602781526020016108076027913961041a565b9392505050565b6001600160a01b03163b151590565b6102a3610368565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104f5565b3660008037600080366000845af43d6000803e808015610363573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103a48361051d565b6000825111806103b15750805b156101c3576103c08383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103ef610368565b604080516001600160a01b03928316815291841660208301520160405180910390a16101548161055d565b60606104258461028c565b6104805760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610331565b600080856001600160a01b03168560405161049b91906107b7565b600060405180830381855af49150503d80600081146104d6576040519150601f19603f3d011682016040523d82523d6000602084013e6104db565b606091505b50915091506104eb828286610606565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61038c565b6105268161063f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105c25760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610331565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60608315610615575081610285565b8251156106255782518084602001fd5b8160405162461bcd60e51b815260040161033191906107d3565b6106488161028c565b6106aa5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610331565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105e5565b80356001600160a01b03811681146106e857600080fd5b919050565b6000602082840312156106ff57600080fd5b610285826106d1565b60008060006040848603121561071d57600080fd5b610726846106d1565b9250602084013567ffffffffffffffff8082111561074357600080fd5b818601915086601f83011261075757600080fd5b81358181111561076657600080fd5b87602082850101111561077857600080fd5b6020830194508093505050509250925092565b60005b838110156107a657818101518382015260200161078e565b838111156103c05750506000910152565b600082516107c981846020870161078b565b9190910192915050565b60208152600082518060208401526107f281604085016020870161078b565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fb0d75414bd881ce16381528bf0b9b2c1bea4c3e27069fcb6981b67d1535643064736f6c63430008090033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207955013d44cf06ad841830a89d9b08ba5799e821ef4f8bccbe7b998e46cbb13f64736f6c6343000809003360a06040523060805234801561001457600080fd5b506080516116866100306000396000610cd601526116866000f3fe6080604052600436106101345760003560e01c8063ab5d8943116100ab578063d5719dc21161006f578063d5719dc2146103a1578063e76f5c8d146103c1578063e77145f4146101e9578063eca067ad146103e1578063ee35f327146103f6578063f81ff3b31461041657600080fd5b8063ab5d8943146102ef578063ae60bd1314610304578063c4d66de814610341578063cb23bcb514610361578063cee3d7281461038157600080fd5b80635fca4a16116100fd5780635fca4a161461020b5780637a88b1071461022157806386598a56146102415780638db5993b14610281578063945e1147146102945780639e5d4c49146102c157600080fd5b806284120c1461013957806316bf55791461015d578063413b35bd1461017d57806347fb24c5146101c95780634f61f850146101eb575b600080fd5b34801561014557600080fd5b506007545b6040519081526020015b60405180910390f35b34801561016957600080fd5b5061014a61017836600461134c565b610436565b34801561018957600080fd5b506101b961019836600461137d565b6001600160a01b031660009081526002602052604090206001015460ff1690565b6040519015158152602001610154565b3480156101d557600080fd5b506101e96101e436600461139a565b610457565b005b3480156101f757600080fd5b506101e961020636600461137d565b610762565b34801561021757600080fd5b5061014a600a5481565b34801561022d57600080fd5b5061014a61023c3660046113d8565b610887565b34801561024d57600080fd5b5061026161025c366004611404565b6108cd565b604080519485526020850193909352918301526060820152608001610154565b61014a61028f366004611436565b610a34565b3480156102a057600080fd5b506102b46102af36600461134c565b610a7f565b604051610154919061147d565b3480156102cd57600080fd5b506102e16102dc366004611491565b610aa9565b60405161015492919061151a565b3480156102fb57600080fd5b506102b4610c01565b34801561031057600080fd5b506101b961031f36600461137d565b6001600160a01b03166000908152600160208190526040909120015460ff1690565b34801561034d57600080fd5b506101e961035c36600461137d565b610c27565b34801561036d57600080fd5b506008546102b4906001600160a01b031681565b34801561038d57600080fd5b506101e961039c36600461139a565b610d9b565b3480156103ad57600080fd5b5061014a6103bc36600461134c565b6110c9565b3480156103cd57600080fd5b506102b46103dc36600461134c565b6110d9565b3480156103ed57600080fd5b5060065461014a565b34801561040257600080fd5b506009546102b4906001600160a01b031681565b34801561042257600080fd5b506101e961043136600461134c565b6110e9565b6007818154811061044657600080fd5b600091825260209091200154905081565b6008546001600160a01b0316331461052f5760085460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156104ae57600080fd5b505afa1580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e69190611579565b9050336001600160a01b0382161461052d57600854604051630739600760e01b81526105249133916001600160a01b03909116908490600401611596565b60405180910390fd5b505b6001600160a01b0382166000818152600160208181526040928390209182015492518515158152919360ff90931692917f6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521910160405180910390a28080156105945750825b806105a65750801580156105a6575082155b156105b15750505050565b821561063f57604080518082018252600380548252600160208084018281526001600160a01b038a166000818152928490529582209451855551938201805460ff1916941515949094179093558154908101825591527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b031916909117905561075b565b6003805461064f906001906115b9565b8154811061065f5761065f6115de565b6000918252602090912001548254600380546001600160a01b0390931692909190811061068e5761068e6115de565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600001546001600060038560000154815481106106dc576106dc6115de565b60009182526020808320909101546001600160a01b031683528201929092526040019020556003805480610712576107126115f4565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03861682526001908190526040822091825501805460ff191690555b50505b5050565b6008546001600160a01b031633146108315760085460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190611579565b9050336001600160a01b0382161461082f57600854604051630739600760e01b81526105249133916001600160a01b03909116908490600401611596565b505b600980546001600160a01b0319166001600160a01b0383161790556040517f8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a9061087c90839061147d565b60405180910390a150565b6009546000906001600160a01b031633146108b7573360405163223e13c160e21b8152600401610524919061147d565b6108c6600d84434248876111bd565b9392505050565b6009546000908190819081906001600160a01b03163314610903573360405163223e13c160e21b8152600401610524919061147d565b85600a541415801561091457508515155b80156109215750600a5415155b1561094d57600a5460405163e2051feb60e01b8152600481019190915260248101879052604401610524565b600a8590556007549350831561098b576007805461096d906001906115b9565b8154811061097d5761097d6115de565b906000526020600020015492505b86156109bc57600661099e6001896115b9565b815481106109ae576109ae6115de565b906000526020600020015491505b60408051602081018590529081018990526060810183905260800160408051601f198184030181529190528051602090910120600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018190559398929750909550919350915050565b3360009081526001602081905260408220015460ff16610a69573360405163b6c60ea360e01b8152600401610524919061147d565b610a778484434248876111bd565b949350505050565b60048181548110610a8f57600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526002602052604081206001015460609060ff16610ae157336040516332ea82ab60e01b8152600401610524919061147d565b8215801590610af857506001600160a01b0386163b155b15610b18578560405163b5cf5b8f60e01b8152600401610524919061147d565b600580546001600160a01b0319811633179091556040516001600160a01b03918216918816908790610b4d908890889061160a565b60006040518083038185875af1925050503d8060008114610b8a576040519150601f19603f3d011682016040523d82523d6000602084013e610b8f565b606091505b50600580546001600160a01b0319166001600160a01b038581169190911790915560405192955090935088169033907f2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d46690610bef908a908a908a9061161a565b60405180910390a35094509492505050565b6005546000906001600160a01b0390811690811415610c2257600091505090565b919050565b600054610100900460ff16610c425760005460ff1615610c46565b303b155b610ca95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610524565b600054610100900460ff16158015610ccb576000805461ffff19166101011790555b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d595760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610524565b600580546001600160a01b036001600160a01b0319918216811790925560088054909116918416919091179055801561075e576000805461ff00191690555050565b6008546001600160a01b03163314610e6a5760085460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b158015610df257600080fd5b505afa158015610e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2a9190611579565b9050336001600160a01b03821614610e6857600854604051630739600760e01b81526105249133916001600160a01b03909116908490600401611596565b505b6001600160a01b038281161415610e96578160405163077abed160e41b8152600401610524919061147d565b6001600160a01b038216600081815260026020908152604091829020600181015492518515158152909360ff90931692917f49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa910160405180910390a2808015610efc5750825b80610f0e575080158015610f0e575082155b15610f195750505050565b8215610fa857604080518082018252600480548252600160208084018281526001600160a01b038a16600081815260029093529582209451855551938201805460ff1916941515949094179093558154908101825591527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b031916909117905561075b565b60048054610fb8906001906115b9565b81548110610fc857610fc86115de565b6000918252602090912001548254600480546001600160a01b03909316929091908110610ff757610ff76115de565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160000154600260006004856000015481548110611045576110456115de565b60009182526020808320909101546001600160a01b03168352820192909252604001902055600480548061107b5761107b6115f4565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03861682526002905260408120908155600101805460ff1916905550505050565b6006818154811061044657600080fd5b60038181548110610a8f57600080fd5b6008546001600160a01b031633146111b85760085460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111789190611579565b9050336001600160a01b038216146111b657600854604051630739600760e01b81526105249133916001600160a01b03909116908490600401611596565b505b600a55565b600654604080516001600160f81b031960f88a901b166020808301919091526bffffffffffffffffffffffff1960608a901b1660218301526001600160c01b031960c089811b8216603585015288901b16603d830152604582018490526065820186905260858083018690528351808403909101815260a5909201909252805191012060009190600082156112775760066112596001856115b9565b81548110611269576112696115de565b906000526020600020015490505b6040805160208082018490528183018590528251808303840181526060830180855281519190920120600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f015533905260ff8c1660808201526001600160a01b038b1660a082015260c0810187905260e0810188905267ffffffffffffffff89166101008201529051829185917f5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1918190036101200190a3509098975050505050505050565b60006020828403121561135e57600080fd5b5035919050565b6001600160a01b038116811461137a57600080fd5b50565b60006020828403121561138f57600080fd5b81356108c681611365565b600080604083850312156113ad57600080fd5b82356113b881611365565b9150602083013580151581146113cd57600080fd5b809150509250929050565b600080604083850312156113eb57600080fd5b82356113f681611365565b946020939093013593505050565b6000806000806080858703121561141a57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561144b57600080fd5b833560ff8116811461145c57600080fd5b9250602084013561146c81611365565b929592945050506040919091013590565b6001600160a01b0391909116815260200190565b600080600080606085870312156114a757600080fd5b84356114b281611365565b935060208501359250604085013567ffffffffffffffff808211156114d657600080fd5b818701915087601f8301126114ea57600080fd5b8135818111156114f957600080fd5b88602082850101111561150b57600080fd5b95989497505060200194505050565b821515815260006020604081840152835180604085015260005b8181101561155057858101830151858201606001528201611534565b81811115611562576000606083870101525b50601f01601f191692909201606001949350505050565b60006020828403121561158b57600080fd5b81516108c681611365565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6000828210156115d957634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b8183823760009101908152919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f191601019291505056fea2646970667358221220d9b286941b79cf224ed3c57db746dd59771126c8ab3573224a298fad917c66c564736f6c6343000809003360c0604052306080524660a05234801561001857600080fd5b5060805160a05161235761003e6000396000610c890152600061041901526123576000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638f111f3c116100b8578063d9dd67ab1161007c578063d9dd67ab146102e8578063e0bc9729146102fb578063e5a358c81461030e578063e78cea9214610332578063ebea461d14610345578063f19815781461037b57600080fd5b80638f111f3c1461027c57806396cc5c781461028f578063b31761f814610297578063cb23bcb5146102aa578063d1ce8da8146102d557600080fd5b80636e7df3e71161010a5780636e7df3e7146101c55780636f12b0c9146101d8578063715ea34b146101eb57806371c3e6fe1461023d5780637fa3a40e14610260578063844208601461026957600080fd5b806306f13056146101475780631637be48146101625780631f7a92b214610195578063258f0495146101aa57806327957a49146101bd575b600080fd5b61014f61038e565b6040519081526020015b60405180910390f35b610185610170366004611b9e565b60009081526008602052604090205460ff1690565b6040519015158152602001610159565b6101a86101a3366004611bcf565b61040e565b005b61014f6101b8366004611b9e565b6105c6565b61014f602881565b6101a86101d3366004611c1e565b61062f565b6101a86101e6366004611c9f565b610735565b61021e6101f9366004611b9e565b60086020526000908152604090205460ff81169061010090046001600160401b031682565b6040805192151583526001600160401b03909116602083015201610159565b61018561024b366004611d09565b60036020526000908152604090205460ff1681565b61014f60005481565b6101a8610277366004611b9e565b610924565b6101a861028a366004611d2d565b610a77565b6101a8610c86565b6101a86102a5366004611da9565b610cfd565b6002546102bd906001600160a01b031681565b6040516001600160a01b039091168152602001610159565b6101a86102e3366004611e1c565b610dfd565b61014f6102f6366004611b9e565b611045565b6101a8610309366004611d2d565b6110c8565b610319600160fe1b81565b6040516001600160f81b03199091168152602001610159565b6001546102bd906001600160a01b031681565b60045460055460065460075461035b9392919084565b604080519485526020850193909352918301526060820152608001610159565b6101a8610389366004611e5d565b61121d565b600154604080516221048360e21b815290516000926001600160a01b0316916284120c916004808301926020929190829003018186803b1580156103d157600080fd5b505afa1580156103e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104099190611ecd565b905090565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104a15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b6001546001600160a01b0316156104cb57604051633bcd329760e21b815260040160405180910390fd5b6001600160a01b0382166104f257604051631ad0f74360e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0384169081179091556040805163cb23bcb560e01b8152905163cb23bcb591600480820192602092909190829003018186803b15801561054657600080fd5b505afa15801561055a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057e9190611ee6565b600280546001600160a01b0319166001600160a01b03929092169190911790558035600490815560208201356005556040820135600655606082013560075581905b50505050565b600081815260086020908152604080832081518083019092525460ff81161515825261010090046001600160401b03169181018290529061061c5760405162f20c5d60e01b815260048101849052602401610498565b602001516001600160401b031692915050565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067d57600080fd5b505afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b59190611ee6565b6001600160a01b0316336001600160a01b0316146106f757600254604051631194af8760e11b81526104989133916001600160a01b0390911690600401611f03565b6001600160a01b038216600090815260036020526040808220805460ff19168415151790555160019160008051602061230283398151915291a25050565b8060005a905033321461075b5760405163feb3d07160e01b815260040160405180910390fd5b3360009081526003602052604090205460ff1661078b57604051632dd9fc9760e01b815260040160405180910390fd5b600080610799888888611600565b909250905060008080806107b0868b8d8480611773565b93509350935093508c84146107e25760405163ac7411c960e01b815260048101859052602481018e9052604401610498565b80838e6000805160206122e2833981519152856000548a600060405161080b9493929190611f1d565b60405180910390a4505050506001600160a01b03841615915061091b905057366000602061083a83601f611fa7565b6108449190611fbf565b90506102006108546002836120c5565b61085e9190611fbf565b6108698260066120d4565b6108739190611fa7565b61087d9084611fa7565b925033321461088b57600091505b836001600160a01b031663e3db8a49335a6108a690876120f3565b856040518463ffffffff1660e01b81526004016108c59392919061210a565b602060405180830381600087803b1580156108df57600080fd5b505af11580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610917919061212b565b5050505b50505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561097257600080fd5b505afa158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa9190611ee6565b6001600160a01b0316336001600160a01b0316146109ec57600254604051631194af8760e11b81526104989133916001600160a01b0390911690600401611f03565b60008181526008602052604090205460ff16610a1d5760405162f20c5d60e01b815260048101829052602401610498565b600081815260086020526040808220805460ff191690555182917f5cb4218b272fd214168ac43e90fb4d05d6c36f0b17ffb4c2dd07c234d744eb2a91a260405160039060008051602061230283398151915290600090a250565b8260005a9050333214610a9d5760405163feb3d07160e01b815260040160405180910390fd5b3360009081526003602052604090205460ff16610acd57604051632dd9fc9760e01b815260040160405180910390fd5b600080610adb8a8a8a611600565b90925090508a81838b8b8a8a6000808080610af989888a8989611773565b93509350935093508a8414158015610b1357506000198b14155b15610b3b5760405163ac7411c960e01b815260048101859052602481018c9052604401610498565b8083856000805160206122e2833981519152856000548f6000604051610b649493929190611f1d565b60405180910390a4505050506001600160a01b038b16159850610c7b975050505050505050573660006020610b9a83601f611fa7565b610ba49190611fbf565b9050610200610bb46002836120c5565b610bbe9190611fbf565b610bc98260066120d4565b610bd39190611fa7565b610bdd9084611fa7565b9250333214610beb57600091505b836001600160a01b031663e3db8a49335a610c0690876120f3565b856040518463ffffffff1660e01b8152600401610c259392919061210a565b602060405180830381600087803b158015610c3f57600080fd5b505af1158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c77919061212b565b5050505b505050505050505050565b467f00000000000000000000000000000000000000000000000000000000000000001415610cc757604051635180dd8360e11b815260040160405180910390fd5b60408051608081018252600180825260208201819052918101829052606001819052600481905560058190556006819055600755565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4b57600080fd5b505afa158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d839190611ee6565b6001600160a01b0316336001600160a01b031614610dc557600254604051631194af8760e11b81526104989133916001600160a01b0390911690600401611f03565b80516004556020810151600555604080820151600655606082015160075551600090600080516020612302833981519152908290a250565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190611ee6565b6001600160a01b0316336001600160a01b031614610ec557600254604051631194af8760e11b81526104989133916001600160a01b0390911690600401611f03565b60008282604051610ed7929190612148565b604051908190038120607f60f91b6020830152602182015260410160408051601f1981840301815291905280516020909101209050600160ff1b8118620100008310610f5b5760405162461bcd60e51b81526020600482015260136024820152726b657973657420697320746f6f206c6172676560681b6044820152606401610498565b60008181526008602052604090205460ff1615610f8e57604051637d17eeed60e11b815260048101829052602401610498565b60408051808201825260018152436001600160401b0390811660208084019182526000868152600890915284902092518354915168ffffffffffffffffff1990921690151568ffffffffffffffff0019161761010091909216021790555181907fabca9b7986bc22ad0160eb0cb88ae75411eacfba4052af0b457a9335ef6557229061101d9087908790612158565b60405180910390a260405160029060008051602061230283398151915290600090a250505050565b6001546040516316bf557960e01b8152600481018390526000916001600160a01b0316906316bf55799060240160206040518083038186803b15801561108a57600080fd5b505afa15801561109e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c29190611ecd565b92915050565b8260005a3360009081526003602052604090205490915060ff161580156110fa57506002546001600160a01b03163314155b1561111857604051632dd9fc9760e01b815260040160405180910390fd5b6000806111268a8a8a611600565b909250905060008b82848b8a8a8680806111438787838888611773565b929c5090945092509050888a1480159061115f57506000198914155b156111875760405163ac7411c960e01b8152600481018b9052602481018a9052604401610498565b80838b6000805160206122e2833981519152856000548d60016040516111b09493929190611f1d565b60405180910390a4505050505050505050807ffe325ca1efe4c5c1062c981c3ee74b781debe4ea9440306a96d2a55759c66c208c8c6040516111f3929190612158565b60405180910390a25050506001600160a01b03821615610c7b573660006020610b9a83601f611fa7565b600054861161123f57604051633eb9f37d60e11b815260040160405180910390fd5b60006112ef8684611253602089018961219d565b61126360408a0160208b0161219d565b61126e60018d6120f3565b6040805160f89690961b6001600160f81b03191660208088019190915260609590951b6001600160601b031916602187015260c093841b6001600160c01b031990811660358801529290931b909116603d85015260458401526065830188905260858084018790528151808503909101815260a59093019052815191012090565b6004549091504390611304602088018861219d565b6001600160401b03166113179190611fa7565b106113355760405163ad3515d960e01b815260040160405180910390fd5b600654429061134a604088016020890161219d565b6001600160401b031661135d9190611fa7565b1061137b5760405163c76d17e560e01b815260040160405180910390fd5b60006001881115611413576001546001600160a01b031663d5719dc26113a260028b6120f3565b6040518263ffffffff1660e01b81526004016113c091815260200190565b60206040518083038186803b1580156113d857600080fd5b505afa1580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114109190611ecd565b90505b60408051602080820184905281830185905282518083038401815260609092019092528051910120600180546001600160a01b03169063d5719dc290611459908c6120f3565b6040518263ffffffff1660e01b815260040161147791815260200190565b60206040518083038186803b15801561148f57600080fd5b505afa1580156114a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c79190611ecd565b146114e5576040516313947fd760e01b815260040160405180910390fd5b6000806114f18a611a10565b9150915060008a90506000600160009054906101000a90046001600160a01b03166001600160a01b0316635fca4a166040518163ffffffff1660e01b815260040160206040518083038186803b15801561154a57600080fd5b505afa15801561155e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115829190611ecd565b9050600080548d836115949190611fa7565b61159e91906120f3565b90506000806000806115b4898860008989611773565b93509350935093508083856000805160206122e2833981519152856000548d60026040516115e59493929190611f1d565b60405180910390a45050505050505050505050505050505050565b600061160a611b77565b84846000611619826028611fa7565b90506201cccc81111561164b57604051634634691b60e01b8152600481018290526201cccc6024820152604401610498565b81158015906116835750600160fe1b80848460008161166c5761166c612187565b9050013560f81c60f81b166001600160f81b031916145b156116a157604051631f97007f60e01b815260040160405180910390fd5b602182108015906116cf5750828260008181106116c0576116c0612187565b90910135600160ff1b16151590505b156117235760006116e46021600185876121c6565b6116ed916121f0565b60008181526008602052604090205490915060ff166117215760405162f20c5d60e01b815260048101829052602401610498565b505b60008061172f88611a3c565b915091506000828b8b60405160200161174a9392919061223a565b60408051808303601f1901815291905280516020909101209b919a509098505050505050505050565b60008060008060005488101561179c57604051633eb9f37d60e11b815260040160405180910390fd5b600160009054906101000a90046001600160a01b03166001600160a01b031663eca067ad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ea57600080fd5b505afa1580156117fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118229190611ecd565b8811156118425760405163925f8bd360e01b815260040160405180910390fd5b60015460405163432cc52b60e11b8152600481018b9052602481018a905260448101889052606481018790526001600160a01b03909116906386598a5690608401608060405180830381600087803b15801561189d57600080fd5b505af11580156118b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d59190612262565b60008c9055929650909450925090508615611a04576040805142602082015233606081901b6001600160601b03191692820192909252605481018b90526074810186905248609482015260009060b40160408051808303601f190181529082905260015481516020830120637a88b10760e01b84526001600160a01b0386811660048601526024850191909152919350600092911690637a88b10790604401602060405180830381600087803b15801561198e57600080fd5b505af11580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c69190611ecd565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b836040516119f89190612298565b60405180910390a25050505b95509550955095915050565b6000611a1a611b77565b600080611a2685611a3c565b8151602090920191909120969095509350505050565b6060611a46611b77565b6000611a50611ae3565b90506000816000015182602001518360400151846060015188604051602001611ab895949392919060c095861b6001600160c01b0319908116825294861b8516600882015292851b8416601084015290841b8316601883015290921b16602082015260280190565b60405160208183030381529060405290506028815114611ada57611ada6122cb565b94909350915050565b611aeb611b77565b611af3611b77565b600654421115611b1657600654611b0a90426120f3565b6001600160401b031681525b600754611b239042611fa7565b6001600160401b03166020820152600454431115611b5757600454611b4890436120f3565b6001600160401b031660408201525b600554611b649043611fa7565b6001600160401b03166060820152919050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b600060208284031215611bb057600080fd5b5035919050565b6001600160a01b0381168114611bcc57600080fd5b50565b60008082840360a0811215611be357600080fd5b8335611bee81611bb7565b92506080601f1982011215611c0257600080fd5b506020830190509250929050565b8015158114611bcc57600080fd5b60008060408385031215611c3157600080fd5b8235611c3c81611bb7565b91506020830135611c4c81611c10565b809150509250929050565b60008083601f840112611c6957600080fd5b5081356001600160401b03811115611c8057600080fd5b602083019150836020828501011115611c9857600080fd5b9250929050565b600080600080600060808688031215611cb757600080fd5b8535945060208601356001600160401b03811115611cd457600080fd5b611ce088828901611c57565b909550935050604086013591506060860135611cfb81611bb7565b809150509295509295909350565b600060208284031215611d1b57600080fd5b8135611d2681611bb7565b9392505050565b600080600080600080600060c0888a031215611d4857600080fd5b8735965060208801356001600160401b03811115611d6557600080fd5b611d718a828b01611c57565b909750955050604088013593506060880135611d8c81611bb7565b969995985093969295946080840135945060a09093013592915050565b600060808284031215611dbb57600080fd5b604051608081018181106001600160401b0382111715611deb57634e487b7160e01b600052604160045260246000fd5b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b60008060208385031215611e2f57600080fd5b82356001600160401b03811115611e4557600080fd5b611e5185828601611c57565b90969095509350505050565b60008060008060008060e08789031215611e7657600080fd5b86359550602087013560ff81168114611e8e57600080fd5b94506080870188811115611ea157600080fd5b60408801945035925060a0870135611eb881611bb7565b8092505060c087013590509295509295509295565b600060208284031215611edf57600080fd5b5051919050565b600060208284031215611ef857600080fd5b8151611d2681611bb7565b6001600160a01b0392831681529116602082015260400190565b600060e0820190508582528460208301526001600160401b038085511660408401528060208601511660608401528060408601511660808401528060608601511660a08401525060038310611f8257634e487b7160e01b600052602160045260246000fd5b8260c083015295945050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611fba57611fba611f91565b500190565b600082611fdc57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561201c57816000190482111561200257612002611f91565b8085161561200f57918102915b93841c9390800290611fe6565b509250929050565b600082612033575060016110c2565b81612040575060006110c2565b816001811461205657600281146120605761207c565b60019150506110c2565b60ff84111561207157612071611f91565b50506001821b6110c2565b5060208310610133831016604e8410600b841016171561209f575081810a6110c2565b6120a98383611fe1565b80600019048211156120bd576120bd611f91565b029392505050565b6000611d2660ff841683612024565b60008160001904831182151516156120ee576120ee611f91565b500290565b60008282101561210557612105611f91565b500390565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020828403121561213d57600080fd5b8151611d2681611c10565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156121af57600080fd5b81356001600160401b0381168114611d2657600080fd5b600080858511156121d657600080fd5b838611156121e357600080fd5b5050820193919092039150565b803560208310156110c257600019602084900360031b1b1692915050565b60005b83811015612229578181015183820152602001612211565b838111156105c05750506000910152565b6000845161224c81846020890161220e565b8201838582376000930192835250909392505050565b6000806000806080858703121561227857600080fd5b505082516020840151604085015160609095015191969095509092509050565b60208152600082518060208401526122b781604085016020870161220e565b601f01601f19169190910160400192915050565b634e487b7160e01b600052600160045260246000fdfe7394f4a19a13c7b92b5bb71033245305946ef78452f7b4986ac1390b5df4ebd7ea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456ea2646970667358221220c8cacf56e1e7a6564a9acf90cff3630074c693166e82a017b826e05f59a5bb0364736f6c6343000809003360c0604052306080524660a05234801561001857600080fd5b5060805160a0516125fe61004560003960006119a6015260008181610a8a01526113ba01526125fe6000f3fe6080604052600436106101605760003560e01c80636e6e8a6a116100c1578063babcc5391161007a578063babcc53914610367578063c474d2c514610397578063e3de72a5146103b7578063e6bd12cf146103d7578063e78cea92146103ea578063ee35f32714610417578063efeadb6d1461043757600080fd5b80636e6e8a6a146102bf57806370665f14146102d25780638456cb59146102f25780638a631aa614610307578063a66b327d14610327578063b75436bb1461034757600080fd5b8063439370b11161011e578063439370b114610226578063485cc9551461022e5780635075788b1461024e5780635c975abb1461026e5780635e91675814610286578063679b6ded1461029957806367ef3ab8146102ac57600080fd5b8062f72382146101655780630f4d14e9146101985780631b871c8d146101ab5780631fe927cf146101be57806322bd5c1c146101de5780633f4ba83a1461020f575b600080fd5b34801561017157600080fd5b50610185610180366004611cbe565b610457565b6040519081526020015b60405180910390f35b6101856101a6366004611d3a565b610570565b6101856101b9366004611d53565b6105f4565b3480156101ca57600080fd5b506101856101d9366004611df7565b610687565b3480156101ea57600080fd5b506066546101ff90600160a01b900460ff1681565b604051901515815260200161018f565b34801561021b57600080fd5b506102246107cb565b005b61018561090b565b34801561023a57600080fd5b50610224610249366004611e38565b6109db565b34801561025a57600080fd5b50610185610269366004611cbe565b610b20565b34801561027a57600080fd5b5060335460ff166101ff565b610185610294366004611e71565b610bc3565b6101856102a7366004611d53565b610c6e565b6101856102ba366004611eda565b610db6565b6101856102cd366004611d53565b610e64565b3480156102de57600080fd5b506101856102ed366004611f4c565b610fac565b3480156102fe57600080fd5b506102246110bd565b34801561031357600080fd5b50610185610322366004611f99565b6111fa565b34801561033357600080fd5b50610185610342366004611fed565b61129b565b34801561035357600080fd5b50610185610362366004611df7565b6112d3565b34801561037357600080fd5b506101ff61038236600461200f565b60676020526000908152604090205460ff1681565b3480156103a357600080fd5b506102246103b236600461200f565b6113af565b3480156103c357600080fd5b506102246103d2366004612117565b611455565b6101856103e5366004611eda565b6116d5565b3480156103f657600080fd5b5060655461040a906001600160a01b031681565b60405161018f91906121d8565b34801561042357600080fd5b5060665461040a906001600160a01b031681565b34801561044357600080fd5b506102246104523660046121ec565b6117c5565b600061046560335460ff1690565b1561048b5760405162461bcd60e51b815260040161048290612207565b60405180910390fd5b606654600160a01b900460ff1680156104b457503260009081526067602052604090205460ff16155b156104d45732604051630f51ed7160e41b815260040161048291906121d8565b6104dc6119a4565b6104f957604051635180dd8360e11b815260040160405180910390fd5b3332146105195760405163feb3d07160e01b815260040160405180910390fd5b6105646003610527336119cb565b60008b8b8b8b6001600160a01b03168b8b8b604051602001610550989796959493929190612231565b6040516020818303038152906040526119da565b98975050505050505050565b600061057e60335460ff1690565b1561059b5760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff1680156105c457503260009081526067602052604090205460ff16155b156105e45732604051630f51ed7160e41b815260040161048291906121d8565b6105ec61090b565b90505b919050565b600061060260335460ff1690565b1561061f5760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff16801561064857503260009081526067602052604090205460ff16155b156106685732604051630f51ed7160e41b815260040161048291906121d8565b6106798a8a8a8a8a8a8a8a8a610e64565b9a9950505050505050505050565b600061069560335460ff1690565b156106b25760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff1680156106db57503260009081526067602052604090205460ff16155b156106fb5732604051630f51ed7160e41b815260040161048291906121d8565b6107036119a4565b156107215760405163c6ea680360e01b815260040160405180910390fd5b3332146107415760405163feb3d07160e01b815260040160405180910390fd5b6201cccc82111561077157604051634634691b60e01b8152600481018390526201cccc6024820152604401610482565b60006107966003338686604051610789929190612277565b6040518091039020611a66565b60405190915081907fab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c90600090a29392505050565b6065546040805163cb23bcb560e01b815290516000926001600160a01b03169163cb23bcb5916004808301926020929190829003018186803b15801561081057600080fd5b505afa158015610824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108489190612287565b9050336001600160a01b03821614610900576000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190612287565b9050336001600160a01b038216146108fe57338282604051630739600760e01b8152600401610482939291906122a4565b505b610908611b18565b50565b600061091960335460ff1690565b156109365760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff16801561095f57503260009081526067602052604090205460ff16155b1561097f5732604051630f51ed7160e41b815260040161048291906121d8565b33803b15158061098f5750323314155b156109a257503361111161111160901b01015b6040516bffffffffffffffffffffffff19606083901b1660208201523460348201526109d590600c903390605401610550565b91505090565b600054610100900460ff166109f65760005460ff16156109fa565b303b155b610a5d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610482565b600054610100900460ff16158015610a7f576000805461ffff19166101011790555b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ac85760405162461bcd60e51b8152600401610482906122c7565b606580546001600160a01b038086166001600160a01b031990921691909117909155606680546001600160a81b031916918416919091179055610b09611ba5565b8015610b1b576000805461ff00191690555b505050565b6000610b2e60335460ff1690565b15610b4b5760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff168015610b7457503260009081526067602052604090205460ff16155b15610b945732604051630f51ed7160e41b815260040161048291906121d8565b61056460033360008b8b8b8b6001600160a01b03168b8b8b604051602001610550989796959493929190612231565b6000610bd160335460ff1690565b15610bee5760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff168015610c1757503260009081526067602052604090205460ff16155b15610c375732604051630f51ed7160e41b815260040161048291906121d8565b610c6460073360018989896001600160a01b0316348a8a6040516020016105509796959493929190612313565b9695505050505050565b6000610c7c60335460ff1690565b15610c995760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff168015610cc257503260009081526067602052604090205460ff16155b15610ce25732604051630f51ed7160e41b815260040161048291906121d8565b610cec8486612368565b610cf68a8a612387565b610d009190612387565b34108015610d22575033734dc25ea85fad2f578685a4d8e404c12164ea405b14155b15610d6857610d318486612368565b610d3b8a8a612387565b610d459190612387565b604051631c102d6360e21b81526004810191909152346024820152604401610482565b6001600160a01b0387163b15610d875761111161111160901b01870196505b6001600160a01b0386163b156106685761111161111160901b01860195506106798a8a8a8a8a8a8a8a8a610e64565b6000610dc460335460ff1690565b15610de15760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff168015610e0a57503260009081526067602052604090205460ff16155b15610e2a5732604051630f51ed7160e41b815260040161048291906121d8565b610e5960073360008a8a8a8a6001600160a01b0316348b8b604051602001610550989796959493929190612231565b979650505050505050565b6000610e7260335460ff1690565b15610e8f5760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff168015610eb857503260009081526067602052604090205460ff16155b15610ed85732604051630f51ed7160e41b815260040161048291906121d8565b8460011480610ee75750836001145b15610f1b57338a8a348b8b8b8b8b8b8b6040516307c266e360e01b81526004016104829b9a9998979695949392919061239f565b6000610f27834861129b565b905080891015610f5457604051637d6f91c560e11b815260048101829052602481018a9052604401610482565b610f9d6009338d6001600160a01b03168d348e8e6001600160a01b03168e6001600160a01b03168e8e8e8e90508f8f6040516020016105509b9a99989796959493929190612428565b9b9a5050505050505050505050565b6000610fba60335460ff1690565b15610fd75760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff16801561100057503260009081526067602052604090205460ff16155b156110205732604051630f51ed7160e41b815260040161048291906121d8565b6110286119a4565b61104557604051635180dd8360e11b815260040160405180910390fd5b3332146110655760405163feb3d07160e01b815260040160405180910390fd5b610c646003611073336119cb565b604080516325e1606360e01b60208201526001600160a01b0387168183015281518082038301815260608201909252610550916000918c918c918c916064918d91906080016124ae565b6065546040805163cb23bcb560e01b815290516000926001600160a01b03169163cb23bcb5916004808301926020929190829003018186803b15801561110257600080fd5b505afa158015611116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113a9190612287565b9050336001600160a01b038216146111f2576000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561118757600080fd5b505afa15801561119b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bf9190612287565b9050336001600160a01b038216146111f057338282604051630739600760e01b8152600401610482939291906122a4565b505b610908611bd6565b600061120860335460ff1690565b156112255760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff16801561124e57503260009081526067602052604090205460ff16155b1561126e5732604051630f51ed7160e41b815260040161048291906121d8565b610e5960033360018a8a8a6001600160a01b03168a8a8a6040516020016105509796959493929190612313565b600081156112a957816112ab565b485b6112b6846006612368565b6112c290610578612387565b6112cc9190612368565b9392505050565b60006112e160335460ff1690565b156112fe5760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff16801561132757503260009081526067602052604090205460ff16155b156113475732604051630f51ed7160e41b815260040161048291906121d8565b61134f6119a4565b1561136d5760405163c6ea680360e01b815260040160405180910390fd5b6112cc60033385858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119da92505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156113f85760405162461bcd60e51b8152600401610482906122c7565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61038054336001600160a01b03821614610b1b57604051631194af8760e11b81523360048201526001600160a01b0382166024820152604401610482565b6065546040805163cb23bcb560e01b815290516000926001600160a01b03169163cb23bcb5916004808301926020929190829003018186803b15801561149a57600080fd5b505afa1580156114ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d29190612287565b9050336001600160a01b0382161461158a576000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151f57600080fd5b505afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115579190612287565b9050336001600160a01b0382161461158857338282604051630739600760e01b8152600401610482939291906122a4565b505b81518351146115cb5760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b6044820152606401610482565b60005b83518110156116cf578281815181106115e9576115e9612500565b60200260200101516067600086848151811061160757611607612500565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555083818151811061165857611658612500565b60200260200101516001600160a01b03167fd9739f45a01ce092c5cdb3d68f63d63d21676b1c6c0b4f9cbc6be4cf5449595a84838151811061169c5761169c612500565b60200260200101516040516116b5911515815260200190565b60405180910390a2806116c781612516565b9150506115ce565b50505050565b60006116e360335460ff1690565b156117005760405162461bcd60e51b815260040161048290612207565b606654600160a01b900460ff16801561172957503260009081526067602052604090205460ff16155b156117495732604051630f51ed7160e41b815260040161048291906121d8565b6117516119a4565b61176e57604051635180dd8360e11b815260040160405180910390fd5b33321461178e5760405163feb3d07160e01b815260040160405180910390fd5b610e59600761179c336119cb565b60008a8a8a8a6001600160a01b0316348b8b604051602001610550989796959493929190612231565b6065546040805163cb23bcb560e01b815290516000926001600160a01b03169163cb23bcb5916004808301926020929190829003018186803b15801561180a57600080fd5b505afa15801561181e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118429190612287565b9050336001600160a01b038216146118fa576000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561188f57600080fd5b505afa1580156118a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c79190612287565b9050336001600160a01b038216146118f857338282604051630739600760e01b8152600401610482939291906122a4565b505b606660149054906101000a900460ff161515821515141561194b5760405162461bcd60e51b815260206004820152600b60248201526a1053149150511657d4d15560aa1b6044820152606401610482565b60668054831515600160a01b0260ff60a01b199091161790556040517f16435b45f7482047f839a6a19d291442627200f52cad2803c595150d0d440eb39061199890841515815260200190565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000046141590565b61111061111160901b01190190565b60006201cccc82511115611a10578151604051634634691b60e01b815260048101919091526201cccc6024820152604401610482565b6000611a2485858580519060200120611a66565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b84604051611a569190612531565b60405180910390a2949350505050565b6065546000906001600160a01b0316638db5993b348661111161111160901b0187016040516001600160e01b031960e086901b16815260ff90921660048301526001600160a01b03166024820152604481018690526064016020604051808303818588803b158015611ad757600080fd5b505af1158015611aeb573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611b109190612564565b949350505050565b60335460ff16611b615760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610482565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611b9b91906121d8565b60405180910390a1565b600054610100900460ff16611bcc5760405162461bcd60e51b81526004016104829061257d565b611bd4611c2e565b565b60335460ff1615611bf95760405162461bcd60e51b815260040161048290612207565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b8e3390565b600054610100900460ff16611c555760405162461bcd60e51b81526004016104829061257d565b6033805460ff19169055565b6001600160a01b038116811461090857600080fd5b60008083601f840112611c8857600080fd5b5081356001600160401b03811115611c9f57600080fd5b602083019150836020828501011115611cb757600080fd5b9250929050565b600080600080600080600060c0888a031215611cd957600080fd5b8735965060208801359550604088013594506060880135611cf981611c61565b93506080880135925060a08801356001600160401b03811115611d1b57600080fd5b611d278a828b01611c76565b989b979a50959850939692959293505050565b600060208284031215611d4c57600080fd5b5035919050565b60008060008060008060008060006101008a8c031215611d7257600080fd5b8935611d7d81611c61565b985060208a0135975060408a0135965060608a0135611d9b81611c61565b955060808a0135611dab81611c61565b945060a08a0135935060c08a0135925060e08a01356001600160401b03811115611dd457600080fd5b611de08c828d01611c76565b915080935050809150509295985092959850929598565b60008060208385031215611e0a57600080fd5b82356001600160401b03811115611e2057600080fd5b611e2c85828601611c76565b90969095509350505050565b60008060408385031215611e4b57600080fd5b8235611e5681611c61565b91506020830135611e6681611c61565b809150509250929050565b600080600080600060808688031215611e8957600080fd5b85359450602086013593506040860135611ea281611c61565b925060608601356001600160401b03811115611ebd57600080fd5b611ec988828901611c76565b969995985093965092949392505050565b60008060008060008060a08789031215611ef357600080fd5b8635955060208701359450604087013593506060870135611f1381611c61565b925060808701356001600160401b03811115611f2e57600080fd5b611f3a89828a01611c76565b979a9699509497509295939492505050565b600080600080600060a08688031215611f6457600080fd5b853594506020860135935060408601359250606086013591506080860135611f8b81611c61565b809150509295509295909350565b60008060008060008060a08789031215611fb257600080fd5b86359550602087013594506040870135611fcb81611c61565b93506060870135925060808701356001600160401b03811115611f2e57600080fd5b6000806040838503121561200057600080fd5b50508035926020909101359150565b60006020828403121561202157600080fd5b81356112cc81611c61565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561206a5761206a61202c565b604052919050565b60006001600160401b0382111561208b5761208b61202c565b5060051b60200190565b803580151581146105ef57600080fd5b600082601f8301126120b657600080fd5b813560206120cb6120c683612072565b612042565b82815260059290921b840181019181810190868411156120ea57600080fd5b8286015b8481101561210c576120ff81612095565b83529183019183016120ee565b509695505050505050565b6000806040838503121561212a57600080fd5b82356001600160401b038082111561214157600080fd5b818501915085601f83011261215557600080fd5b813560206121656120c683612072565b82815260059290921b8401810191818101908984111561218457600080fd5b948201945b838610156121ab57853561219c81611c61565b82529482019490820190612189565b965050860135925050808211156121c157600080fd5b506121ce858286016120a5565b9150509250929050565b6001600160a01b0391909116815260200190565b6000602082840312156121fe57600080fd5b6112cc82612095565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60ff60f81b8960f81b168152876001820152866021820152856041820152846061820152836081820152818360a18301376000910160a101908152979650505050505050565b8183823760009101908152919050565b60006020828403121561229957600080fd5b81516112cc81611c61565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60ff60f81b8860f81b16815286600182015285602182015284604182015283606182015281836081830137600091016081019081529695505050505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561238257612382612352565b500290565b6000821982111561239a5761239a612352565b500190565b6001600160a01b038c811682528b81166020830152604082018b9052606082018a90526080820189905287811660a0830152861660c082015260e0810185905261010081018490526101406101208201819052810182905260006101608385828501376000838501820152601f909301601f19169091019091019b9a5050505050505050505050565b8b81528a60208201528960408201528860608201528760808201528660a08201528560c08201528460e08201528361010082015260006101208385828501376000929093019092019081529b9a5050505050505050505050565b60005b8381101561249d578181015183820152602001612485565b838111156116cf5750506000910152565b60ff60f81b8860f81b168152866001820152856021820152846041820152836061820152826081820152600082516124ed8160a1850160208701612482565b9190910160a10198975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561252a5761252a612352565b5060010190565b6020815260008251806020840152612550816040850160208701612482565b601f01601f19169190910160400192915050565b60006020828403121561257657600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212202e8448c231eab2a5d69cd706b5ab1911aa5ea04fa2e6e35b72beb7febd04a49964736f6c6343000809003360a06040523060805234801561001457600080fd5b506080516104a461002f600039600060c601526104a46000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063c4d66de814610051578063cb23bcb514610066578063e199be3514610095578063e78cea92146100a8575b600080fd5b61006461005f3660046103a6565b6100bb565b005b600154610079906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100646100a33660046103ca565b61024e565b600054610079906001600160a01b031681565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561014e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b6000546001600160a01b03161561017857604051633bcd329760e21b815260040160405180910390fd5b6001600160a01b03811661019f57604051631ad0f74360e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040805163cb23bcb560e01b8152905163cb23bcb591600480820192602092909190829003018186803b1580156101f357600080fd5b505afa158015610207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022b91906103e3565b600180546001600160a01b0319166001600160a01b039290921691909117905550565b6001546001600160a01b031633146102965760405162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b6044820152606401610145565b6000816040516020016102ab91815260200190565b60408051808303601f19018152908290526000805482516020840120638db5993b60e01b8552600b6004860152602485018390526044850152919350916001600160a01b0390911690638db5993b90606401602060405180830381600087803b15801561031757600080fd5b505af115801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f9190610400565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b836040516103819190610419565b60405180910390a2505050565b6001600160a01b03811681146103a357600080fd5b50565b6000602082840312156103b857600080fd5b81356103c38161038e565b9392505050565b6000602082840312156103dc57600080fd5b5035919050565b6000602082840312156103f557600080fd5b81516103c38161038e565b60006020828403121561041257600080fd5b5051919050565b600060208083528351808285015260005b818110156104465785810183015185820160400152820161042a565b81811115610458576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220ad363633e7993c10ea6389bc0b1716a2948bf34a50e8942867a64bd0fea729f564736f6c6343000809003360a06040523060805234801561001457600080fd5b50608051611398610030600039600061050301526113986000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639f0c04bf116100925780639f0c04bf146101aa578063a04cee60146101bd578063ae6dead7146101d0578063b0f30537146101f0578063c4d66de8146101f8578063c75184df1461020b578063cb23bcb51461022b578063d5b5cc231461023e578063e78cea921461025e57600080fd5b80627436d3146100fa57806308635a95146101205780631198527114610135578063288e5b101461013c578063465477901461014f5780635a129efe1461015757806372f2a8c71461017a57806380648b02146101825780638515bc6a146101a2575b600080fd5b61010d610108366004610ccf565b610271565b6040519081526020015b60405180910390f35b61013361012e366004610def565b6102ae565b005b600061010d565b61013361014a366004610ee3565b610321565b61010d61035c565b61016a610165366004610f7e565b61038b565b6040519015158152602001610117565b61010d6103a8565b61018a6103c5565b6040516001600160a01b039091168152602001610117565b61010d6103e6565b61010d6101b8366004610f97565b61040e565b6101336101cb366004611025565b610453565b61010d6101de366004610f7e565b60036020526000908152604090205481565b61010d6104d7565b610133610206366004611047565b6104f8565b610213600281565b6040516001600160801b039091168152602001610117565b60005461018a906001600160a01b031681565b61010d61024c366004610f7e565b60026020526000908152604090205481565b60015461018a906001600160a01b031681565b60006102a684848460405160200161028b91815260200190565b604051602081830303815290604052805190602001206106df565b949350505050565b60006102c0898989898989898961040e565b90506103028c8c808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508e92508591506107829050565b6103138a8a8a8a8a8a8a8a8a61088b565b505050505050505050505050565b331561034057604051630e13b69d60e01b815260040160405180910390fd5b61035189898989898989898961088b565b505050505050505050565b6004546000906001600160801b039081169081141561037d57600091505090565b6001600160801b0316919050565b600080600061039984610b75565b92509250506102a68282610bb2565b6006546000906000198114156103c057506000919050565b919050565b6007546000906001600160a01b03908116908114156103c057600091505090565b6004546000906001600160801b03600160801b90910481169081141561037d57600091505090565b6000888888888888888860405160200161042f98979695949392919061106b565b60405160208183030381529060405280519060200120905098975050505050505050565b6000546001600160a01b0316331461049857600054604051630e4cf1bf60e21b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b60008281526003602052604080822083905551829184917fb4df3847300f076a369cd76d2314b470a1194d9e8a6bb97f1860aee88a5f67489190a35050565b6005546000906001600160801b039081169081141561037d57600091505090565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105865760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161048f565b6001600160a01b0381166105ad57604051631ad0f74360e01b815260040160405180910390fd5b6001546001600160a01b0316156105d757604051633bcd329760e21b815260040160405180910390fd5b6040805160a0810182526001600160801b038082526020808301829052828401829052600019606084018190526001600160a01b0360809094018490526004818155600580546001600160801b031916909417909355600655600780546001600160a01b03199081168517909155600180549487169490911684179055835163cb23bcb560e01b81529351929363cb23bcb593818401939091829003018186803b15801561068457600080fd5b505afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc91906110c4565b600080546001600160a01b0319166001600160a01b039290921691909117905550565b825160009061010081111561071257604051637ed6198f60e11b815260048101829052610100602482015260440161048f565b8260005b82811015610778576000878281518110610732576107326110e1565b60200260200101519050816001901b87166000141561075f5782600052806020526040600020925061076f565b8060005282602052604060002092505b50600101610716565b5095945050505050565b6101008351106107aa57825160405163ab6a068360e01b815260040161048f91815260200190565b82516107b79060026111f1565b82106107ee5781835160026107cc91906111f1565b604051630b8a724b60e01b81526004810192909252602482015260440161048f565b60006107fb848484610271565b60008181526003602052604090205490915061082d576040516310e61af960e31b81526004810182905260240161048f565b600080600061083b86610b75565b92509250925061084b8282610bb2565b1561086c57604051639715b8d360e01b81526004810187905260240161048f565b600092835260026020526040909220600190911b909117905550505050565b6000886001600160a01b0316886001600160a01b03167f20af7f3bbfe38132b8900ae295cd9c8d1914be7052d061a511f3f728dab189648c6040516108d291815260200190565b60405180910390a4600060046040518060a00160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152505090506040518060a00160405280886001600160801b03168152602001876001600160801b03168152602001866001600160801b031681526020018b60001b81526020018a6001600160a01b0316815250600460008201518160000160006101000a8154816001600160801b0302191690836001600160801b0316021790555060208201518160000160106101000a8154816001600160801b0302191690836001600160801b0316021790555060408201518160010160006101000a8154816001600160801b0302191690836001600160801b031602179055506060820151816002015560808201518160030160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050610b03888585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610bc192505050565b805160208201516001600160801b03918216600160801b91831691909102176004556040820151600580546001600160801b03191691909216179055606081015160065560800151600780546001600160a01b0319166001600160a01b03909216919091179055505050505050505050565b6000808080610b8560ff86611213565b90506000610b9460ff87611227565b60008381526002602052604090205492979096509194509092505050565b80821c60011615155b92915050565b600154604051639e5d4c4960e01b815260009182916001600160a01b0390911690639e5d4c4990610bfa9088908890889060040161126b565b600060405180830381600087803b158015610c1457600080fd5b505af1158015610c28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c5091908101906112b4565b9150915081610c8257805115610c695780518082602001fd5b604051631bb7daad60e11b815260040160405180910390fd5b5050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610cc757610cc7610c89565b604052919050565b600080600060608486031215610ce457600080fd5b83356001600160401b0380821115610cfb57600080fd5b818601915086601f830112610d0f57600080fd5b8135602082821115610d2357610d23610c89565b8160051b9250610d34818401610c9f565b828152928401810192818101908a851115610d4e57600080fd5b948201945b84861015610d6c57853582529482019490820190610d53565b9a918901359950506040909701359695505050505050565b6001600160a01b0381168114610d9957600080fd5b50565b80356103c081610d84565b60008083601f840112610db957600080fd5b5081356001600160401b03811115610dd057600080fd5b602083019150836020828501011115610de857600080fd5b9250929050565b60008060008060008060008060008060006101208c8e031215610e1157600080fd5b8b356001600160401b0380821115610e2857600080fd5b818e0191508e601f830112610e3c57600080fd5b813581811115610e4b57600080fd5b8f60208260051b8501011115610e6057600080fd5b60208381019e50909c508e01359a50610e7b60408f01610d9c565b9950610e8960608f01610d9c565b985060808e0135975060a08e0135965060c08e0135955060e08e013594506101008e0135915080821115610ebc57600080fd5b50610ec98e828f01610da7565b915080935050809150509295989b509295989b9093969950565b60008060008060008060008060006101008a8c031215610f0257600080fd5b8935985060208a0135610f1481610d84565b975060408a0135610f2481610d84565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356001600160401b03811115610f5b57600080fd5b610f678c828d01610da7565b915080935050809150509295985092959850929598565b600060208284031215610f9057600080fd5b5035919050565b60008060008060008060008060e0898b031215610fb357600080fd5b8835610fbe81610d84565b97506020890135610fce81610d84565b965060408901359550606089013594506080890135935060a0890135925060c08901356001600160401b0381111561100557600080fd5b6110118b828c01610da7565b999c989b5096995094979396929594505050565b6000806040838503121561103857600080fd5b50508035926020909101359150565b60006020828403121561105957600080fd5b813561106481610d84565b9392505050565b60006bffffffffffffffffffffffff19808b60601b168352808a60601b16601484015250876028830152866048830152856068830152846088830152828460a8840137506000910160a801908152979650505050505050565b6000602082840312156110d657600080fd5b815161106481610d84565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561114857816000190482111561112e5761112e6110f7565b8085161561113b57918102915b93841c9390800290611112565b509250929050565b60008261115f57506001610bbb565b8161116c57506000610bbb565b8160018114611182576002811461118c576111a8565b6001915050610bbb565b60ff84111561119d5761119d6110f7565b50506001821b610bbb565b5060208310610133831016604e8410600b84101617156111cb575081810a610bbb565b6111d5838361110d565b80600019048211156111e9576111e96110f7565b029392505050565b60006110648383611150565b634e487b7160e01b600052601260045260246000fd5b600082611222576112226111fd565b500490565b600082611236576112366111fd565b500690565b60005b8381101561125657818101518382015260200161123e565b83811115611265576000848401525b50505050565b60018060a01b0384168152826020820152606060408201526000825180606084015261129e81608085016020870161123b565b601f01601f191691909101608001949350505050565b600080604083850312156112c757600080fd5b825180151581146112d757600080fd5b60208401519092506001600160401b03808211156112f457600080fd5b818501915085601f83011261130857600080fd5b81518181111561131a5761131a610c89565b61132d601f8201601f1916602001610c9f565b915080825286602082850101111561134457600080fd5b61135581602084016020860161123b565b508092505050925092905056fea2646970667358221220bf610518893204c05947e3bfbba44d26664c19160a47f0ecb8a7d2f5ea1b4c6964736f6c63430008090033",
}

// BridgeCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeCreatorMetaData.ABI instead.
var BridgeCreatorABI = BridgeCreatorMetaData.ABI

// BridgeCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeCreatorMetaData.Bin instead.
var BridgeCreatorBin = BridgeCreatorMetaData.Bin

// DeployBridgeCreator deploys a new Ethereum contract, binding an instance of BridgeCreator to it.
func DeployBridgeCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeCreator, error) {
	parsed, err := BridgeCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// BridgeCreator is an auto generated Go binding around an Ethereum contract.
type BridgeCreator struct {
	BridgeCreatorCaller     // Read-only binding to the contract
	BridgeCreatorTransactor // Write-only binding to the contract
	BridgeCreatorFilterer   // Log filterer for contract events
}

// BridgeCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeCreatorSession struct {
	Contract     *BridgeCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCreatorCallerSession struct {
	Contract *BridgeCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// BridgeCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeCreatorTransactorSession struct {
	Contract     *BridgeCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BridgeCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeCreatorRaw struct {
	Contract *BridgeCreator // Generic contract binding to access the raw methods on
}

// BridgeCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCreatorCallerRaw struct {
	Contract *BridgeCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactorRaw struct {
	Contract *BridgeCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeCreator creates a new instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreator(address common.Address, backend bind.ContractBackend) (*BridgeCreator, error) {
	contract, err := bindBridgeCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// NewBridgeCreatorCaller creates a new read-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorCaller(address common.Address, caller bind.ContractCaller) (*BridgeCreatorCaller, error) {
	contract, err := bindBridgeCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorCaller{contract: contract}, nil
}

// NewBridgeCreatorTransactor creates a new write-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeCreatorTransactor, error) {
	contract, err := bindBridgeCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTransactor{contract: contract}, nil
}

// NewBridgeCreatorFilterer creates a new log filterer instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeCreatorFilterer, error) {
	contract, err := bindBridgeCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorFilterer{contract: contract}, nil
}

// bindBridgeCreator binds a generic wrapper to an already deployed contract.
func bindBridgeCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeCreatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.BridgeCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transact(opts, method, params...)
}

// BridgeTemplate is a free data retrieval call binding the contract method 0x95fd089f.
//
// Solidity: function bridgeTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) BridgeTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "bridgeTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeTemplate is a free data retrieval call binding the contract method 0x95fd089f.
//
// Solidity: function bridgeTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) BridgeTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.BridgeTemplate(&_BridgeCreator.CallOpts)
}

// BridgeTemplate is a free data retrieval call binding the contract method 0x95fd089f.
//
// Solidity: function bridgeTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) BridgeTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.BridgeTemplate(&_BridgeCreator.CallOpts)
}

// InboxTemplate is a free data retrieval call binding the contract method 0x7ba0e857.
//
// Solidity: function inboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) InboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "inboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// InboxTemplate is a free data retrieval call binding the contract method 0x7ba0e857.
//
// Solidity: function inboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) InboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.InboxTemplate(&_BridgeCreator.CallOpts)
}

// InboxTemplate is a free data retrieval call binding the contract method 0x7ba0e857.
//
// Solidity: function inboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) InboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.InboxTemplate(&_BridgeCreator.CallOpts)
}

// OutboxTemplate is a free data retrieval call binding the contract method 0xfc6a2ed0.
//
// Solidity: function outboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) OutboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "outboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OutboxTemplate is a free data retrieval call binding the contract method 0xfc6a2ed0.
//
// Solidity: function outboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) OutboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.OutboxTemplate(&_BridgeCreator.CallOpts)
}

// OutboxTemplate is a free data retrieval call binding the contract method 0xfc6a2ed0.
//
// Solidity: function outboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) OutboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.OutboxTemplate(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// RollupEventInboxTemplate is a free data retrieval call binding the contract method 0xae583c03.
//
// Solidity: function rollupEventInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) RollupEventInboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "rollupEventInboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInboxTemplate is a free data retrieval call binding the contract method 0xae583c03.
//
// Solidity: function rollupEventInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) RollupEventInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.RollupEventInboxTemplate(&_BridgeCreator.CallOpts)
}

// RollupEventInboxTemplate is a free data retrieval call binding the contract method 0xae583c03.
//
// Solidity: function rollupEventInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) RollupEventInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.RollupEventInboxTemplate(&_BridgeCreator.CallOpts)
}

// SequencerInboxTemplate is a free data retrieval call binding the contract method 0xe6027a87.
//
// Solidity: function sequencerInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) SequencerInboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "sequencerInboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInboxTemplate is a free data retrieval call binding the contract method 0xe6027a87.
//
// Solidity: function sequencerInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) SequencerInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.SequencerInboxTemplate(&_BridgeCreator.CallOpts)
}

// SequencerInboxTemplate is a free data retrieval call binding the contract method 0xe6027a87.
//
// Solidity: function sequencerInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) SequencerInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.SequencerInboxTemplate(&_BridgeCreator.CallOpts)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x6c6e47c0.
//
// Solidity: function createBridge(address adminProxy, address rollup, (uint256,uint256,uint256,uint256) maxTimeVariation) returns(address, address, address, address, address)
func (_BridgeCreator *BridgeCreatorTransactor) CreateBridge(opts *bind.TransactOpts, adminProxy common.Address, rollup common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "createBridge", adminProxy, rollup, maxTimeVariation)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x6c6e47c0.
//
// Solidity: function createBridge(address adminProxy, address rollup, (uint256,uint256,uint256,uint256) maxTimeVariation) returns(address, address, address, address, address)
func (_BridgeCreator *BridgeCreatorSession) CreateBridge(adminProxy common.Address, rollup common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, maxTimeVariation)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x6c6e47c0.
//
// Solidity: function createBridge(address adminProxy, address rollup, (uint256,uint256,uint256,uint256) maxTimeVariation) returns(address, address, address, address, address)
func (_BridgeCreator *BridgeCreatorTransactorSession) CreateBridge(adminProxy common.Address, rollup common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, maxTimeVariation)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0x2147e58e.
//
// Solidity: function updateTemplates(address _bridgeTemplate, address _sequencerInboxTemplate, address _inboxTemplate, address _rollupEventInboxTemplate, address _outboxTemplate) returns()
func (_BridgeCreator *BridgeCreatorTransactor) UpdateTemplates(opts *bind.TransactOpts, _bridgeTemplate common.Address, _sequencerInboxTemplate common.Address, _inboxTemplate common.Address, _rollupEventInboxTemplate common.Address, _outboxTemplate common.Address) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "updateTemplates", _bridgeTemplate, _sequencerInboxTemplate, _inboxTemplate, _rollupEventInboxTemplate, _outboxTemplate)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0x2147e58e.
//
// Solidity: function updateTemplates(address _bridgeTemplate, address _sequencerInboxTemplate, address _inboxTemplate, address _rollupEventInboxTemplate, address _outboxTemplate) returns()
func (_BridgeCreator *BridgeCreatorSession) UpdateTemplates(_bridgeTemplate common.Address, _sequencerInboxTemplate common.Address, _inboxTemplate common.Address, _rollupEventInboxTemplate common.Address, _outboxTemplate common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _bridgeTemplate, _sequencerInboxTemplate, _inboxTemplate, _rollupEventInboxTemplate, _outboxTemplate)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0x2147e58e.
//
// Solidity: function updateTemplates(address _bridgeTemplate, address _sequencerInboxTemplate, address _inboxTemplate, address _rollupEventInboxTemplate, address _outboxTemplate) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) UpdateTemplates(_bridgeTemplate common.Address, _sequencerInboxTemplate common.Address, _inboxTemplate common.Address, _rollupEventInboxTemplate common.Address, _outboxTemplate common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _bridgeTemplate, _sequencerInboxTemplate, _inboxTemplate, _rollupEventInboxTemplate, _outboxTemplate)
}

// BridgeCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferredIterator struct {
	Event *BridgeCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorOwnershipTransferredIterator{contract: _BridgeCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorOwnershipTransferred)
				if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeCreatorOwnershipTransferred, error) {
	event := new(BridgeCreatorOwnershipTransferred)
	if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdatedIterator struct {
	Event *BridgeCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*BridgeCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTemplatesUpdatedIterator{contract: _BridgeCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *BridgeCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorTemplatesUpdated)
				if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*BridgeCreatorTemplatesUpdated, error) {
	event := new(BridgeCreatorTemplatesUpdated)
	if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicMetaData contains all meta data concerning the ERC20RollupUserLogic contract.
var ERC20RollupUserLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VALIDATOR_AFK_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winningStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"losingStaker\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedBlocks\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakedOnLatestConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"newStakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c0604052306080524660a05234801561001857600080fd5b5060805160a0516159c66200004d6000396000612527015260008181610e5a01528181612596015261261b01526159c66000f3fe608060405234801561001057600080fd5b506004361061037c5760003560e01c8063771b2f97116101d5578063cd205fda11610105578063e8bd4922116100a8578063e8bd492214610886578063edfd03ed1461090e578063ee35f32714610921578063ef40a67014610934578063f065de3f14610947578063f33e1fac1461095a578063f3f0a03e1461096d578063facd743b14610980578063fb0e722b146109a357600080fd5b8063cd205fda14610804578063ce11e6ab14610817578063d01e66021461082a578063d29a4e271461083d578063d735e21d14610850578063dcd030aa14610858578063dff697871461086b578063e78cea921461087357600080fd5b806392c8134c1161017857806392c8134c146106725780639a8a059214610692578063a23c44b11461069b578063aa38a6e71461079d578063aa65af48146107b0578063b0ebedc7146107c3578063bc45e0ae146107d6578063c2c2e68e146107e9578063c4d66de8146107f157600080fd5b8063771b2f97146105ee578063773d984e146106085780637ba9534a1461061b5780637e2d2155146106235780638640ce5f146106365780638da5cb5b1461064e5780638ee1a1261461065657806391c657e81461065f57600080fd5b806354ce8961116102b057806367425daf1161025357806367425daf1461056257806369fd251c1461056a5780636b94c33b1461057d5780636d08d0a2146105905780636ddd3744146105a35780636f57644e146105b657806371ef232c146105c95780637427be51146105d257806376e7e23b146105e557600080fd5b806354ce8961146104ea5780635c617e94146104fd5780635c975abb146105105780635eb405d51461051b578063613739191461052e5780636177fd181461053657806363721d6b1461054957806365f7f80d1461055157600080fd5b80632b2af0ab116103235780632b2af0ab1461043b5780632e7acfa61461044e5780632f30cabd146104795780633e96576e146104a257806345e38b64146104b55780634ceccfe5146104be5780634d26732d146104c757806351ed6a30146104cf57806352d1902d146104e257600080fd5b8063014cc92c14610381578063023a96fe146103b15780630357aa49146103c457806312ab3d3b146103d957806318baaab9146103f65780631aeb55a0146103fe5780631b1689e9146104115780631e83d30f14610428575b600080fd5b606f54610394906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b606e54610394906001600160a01b031681565b6103d76103d2366004614d8c565b6109b6565b005b607e546103e69060ff1681565b60405190151581526020016103a8565b6103d7610a89565b6103d761040c366004614ddd565b610b03565b61041a607d5481565b6040519081526020016103a8565b6103d7610436366004614e09565b610cc3565b6103d7610449366004614e09565b610d4d565b606554610461906001600160401b031681565b6040516001600160401b0390911681526020016103a8565b61041a610487366004614e22565b6001600160a01b03166000908152607b602052604090205490565b6104616104b0366004614e22565b610df1565b61041a60735481565b61041a61b2fa81565b61041a610e1f565b607254610394906001600160a01b031681565b61041a610e4d565b6103d76104f8366004614e56565b610f12565b61041a61050b366004614e8d565b611175565b60335460ff166103e6565b6103d7610529366004614eaa565b6111c9565b61041a6114ec565b6103e6610544366004614e22565b61161e565b607a5461041a565b6075546001600160401b0316610461565b6103d7611646565b610461610578366004614e22565b6116d0565b6103d761058b366004614e22565b6116fe565b61041a61059e366004614e8d565b611a36565b6103946105b1366004614e8d565b611ab9565b6103d76105c4366004614edd565b611af2565b61041a607c5481565b6103d76105e0366004614e22565b612124565b61041a60675481565b60655461046190600160401b90046001600160401b031681565b6103d7610616366004614f7d565b6121ee565b61046161220a565b6103d7610631366004614eaa565b612220565b607554600160c01b90046001600160401b0316610461565b610394612384565b61041a60685481565b6103e661066d366004614e22565b61238e565b610685610680366004614e8d565b6123f2565b6040516103a89190614fb5565b61041a60665481565b6107486106a9366004614e22565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0316600090815260796020908152604091829020825160a081018452815481526001909101546001600160401b0380821693830193909352600160401b8104831693820193909352600160801b83049091166060820152600160c01b90910460ff161515608082015290565b6040516103a89190600060a0820190508251825260208301516001600160401b038082166020850152806040860151166040850152806060860151166060850152505060808301511515608083015292915050565b606d54610394906001600160a01b031681565b6103e66107be3660046150b1565b6124aa565b61041a6107d13660046150e6565b6124e1565b607054610394906001600160a01b031681565b6103d7612501565b6103d76107ff366004614e22565b61258b565b6072546001600160a01b031615156103e6565b606b54610394906001600160a01b031681565b610394610838366004614e09565b612749565b6103d761084b366004615128565b61275e565b61046161277b565b6103e6610866366004614e22565b612791565b607854610461565b606a54610394906001600160a01b031681565b6108d6610894366004614e22565b607960205260009081526040902080546001909101546001600160401b0380821691600160401b8104821691600160801b82041690600160c01b900460ff1685565b604080519586526001600160401b0394851660208701529284169285019290925290911660608301521515608082015260a0016103a8565b6103d761091c366004614e09565b6127d4565b606c54610394906001600160a01b031681565b61041a610942366004614e22565b6128bd565b607154610394906001600160a01b031681565b610461610968366004614e09565b6128d8565b6103d761097b366004615167565b61290f565b6103e661098e366004614e22565b60746020526000908152604090205460ff1681565b606954610394906001600160a01b031681565b60335460ff16156109e25760405162461bcd60e51b81526004016109d990615183565b60405180910390fd5b606e546001600160a01b03163314610a2b5760405162461bcd60e51b815260206004820152600c60248201526b2ba927a723afa9a2a72222a960a11b60448201526064016109d9565b610a358282612985565b6001600160401b03168314610a7a5760405162461bcd60e51b815260206004820152600b60248201526a1393d517d25397d0d2105360aa1b60448201526064016109d9565b610a848282612a53565b505050565b607e5460ff1615610aac5760405162461bcd60e51b81526004016109d9906151ad565b610ab4612b09565b610af45760405162461bcd60e51b815260206004820152601160248201527056414c494441544f525f4e4f545f41464b60781b60448201526064016109d9565b607e805460ff19166001179055565b3360009081526074602052604090205460ff1680610b235750607e5460ff165b610b3f5760405162461bcd60e51b81526004016109d9906151d9565b60335460ff1615610b625760405162461bcd60e51b81526004016109d990615183565b610b6b33612791565b610b875760405162461bcd60e51b81526004016109d990615200565b610b8f61277b565b6001600160401b0316826001600160401b031610158015610bc95750610bb361220a565b6001600160401b0316826001600160401b031611155b610c0d5760405162461bcd60e51b81526020600482015260156024820152744e4f44455f4e554d5f4f55545f4f465f52414e474560581b60448201526064016109d9565b6000610c1883612c13565b905081816005015414610c5a5760405162461bcd60e51b815260206004820152600a6024820152694e4f44455f52454f524760b01b60448201526064016109d9565b60038101546001600160401b0316610c7133610df1565b6001600160401b031614610cb95760405162461bcd60e51b815260206004820152600f60248201526e2727aa2fa9aa20a5a2a22fa82922ab60891b60448201526064016109d9565b610a843384612c2d565b3360009081526074602052604090205460ff1680610ce35750607e5460ff165b610cff5760405162461bcd60e51b81526004016109d9906151d9565b60335460ff1615610d225760405162461bcd60e51b81526004016109d990615183565b610d2b33612c7e565b6000610d35610e1f565b905080821015610d43578091505b610a843383612cee565b610d5561277b565b6001600160401b0316811015610d9f5760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d11150d2511151608a1b60448201526064016109d9565b610da761220a565b6001600160401b0316811115610dee5760405162461bcd60e51b815260206004820152600c60248201526b1113d154d39517d1561254d560a21b60448201526064016109d9565b50565b6001600160a01b0316600090815260796020526040902060010154600160401b90046001600160401b031690565b600080610e2a61277b565b9050610e474382610e3961220a565b6001600160401b0316612da1565b91505090565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610eed5760405162461bcd60e51b815260206004820152603b60248201527f555550534e6f745570677261646561626c653a206d757374206e6f742062652060448201527f63616c6c6564207468726f7567682064656c656761746563616c6c000000000060648201526084016109d9565b507f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d90565b3360009081526074602052604090205460ff1680610f325750607e5460ff165b610f4e5760405162461bcd60e51b81526004016109d9906151d9565b60335460ff1615610f715760405162461bcd60e51b81526004016109d990615183565b610f7a33612791565b610f965760405162461bcd60e51b81526004016109d990615200565b6000610fa133610df1565b90506000610fae826123f2565b6101400151610fc6906001600160401b03164361523a565b90506073548110156110075760405162461bcd60e51b815260206004820152600a60248201526954494d455f44454c544160b01b60448201526064016109d9565b600261101b61014087016101208801615276565b600381111561102c5761102c615251565b148061105a57508261104e61104936889003880160a08901615392565b613009565b6001600160401b031610155b6110925760405162461bcd60e51b81526020600482015260096024820152681513d3d7d4d350531360ba1b60448201526064016109d9565b60006110a661016087016101408801614e8d565b6001600160401b0316116110ee5760405162461bcd60e51b815260206004820152600f60248201526e22a6a82a2cafa0a9a9a2a92a24a7a760891b60448201526064016109d9565b600161110060a0870160808801615276565b600381111561111157611111615251565b146111505760405162461bcd60e51b815260206004820152600f60248201526e4241445f505245565f53544154555360881b60448201526064016109d9565b5061115d8482848661301e565b5061116f3361116a61220a565b612c2d565b50505050565b600080611181607a5490565b90506000805b828110156111c15761119c856107be83612749565b156111af57816111ab816153ae565b9250505b806111b9816153ae565b915050611187565b509392505050565b3360009081526074602052604090205460ff16806111e95750607e5460ff165b6112055760405162461bcd60e51b81526004016109d9906151d9565b60335460ff16156112285760405162461bcd60e51b81526004016109d990615183565b611230611646565b600061123a61277b565b9050600061124782612c13565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082015260058201546101608201529091506112f390613609565b60755460038201546001600160401b03908116911614611315576113156153c9565b600381015460009061132f906001600160401b0316612c13565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082015260058201546101608201529091506113db90613658565b6113e560006127d4565b60006113f084611175565b6003840154909150600090829061140f906001600160401b0316611a36565b611419919061523a565b6003850154909150600160c01b90046001600160401b0316821061146c5760405162461bcd60e51b815260206004820152600a6024820152694e4f5f5354414b45525360b01b60448201526064016109d9565b600384015461148c908290600160c01b90046001600160401b03166153df565b60048401546001600160401b0316146114d85760405162461bcd60e51b815260206004820152600e60248201526d1393d517d0531317d4d51052d15160921b60448201526064016109d9565b6114e38588886136a8565b50505050505050565b3360009081526074602052604081205460ff168061150c5750607e5460ff165b6115285760405162461bcd60e51b81526004016109d9906151d9565b60335460ff161561154b5760405162461bcd60e51b81526004016109d990615183565b6000611556336137f7565b60725460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb90604401602060405180830381600087803b1580156115a357600080fd5b505af11580156115b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115db91906153f7565b6116195760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016109d9565b905090565b6001600160a01b0316600090815260796020526040902060010154600160c01b900460ff1690565b600061165061277b565b6001600160401b0316905061166d6075546001600160401b031690565b6001600160401b031681118015611694575061168761220a565b6001600160401b03168111155b610dee5760405162461bcd60e51b815260206004820152600d60248201526c1393d7d553949154d3d3159151609a1b60448201526064016109d9565b6001600160a01b0316600090815260796020526040902060010154600160801b90046001600160401b031690565b3360009081526074602052604090205460ff168061171e5750607e5460ff165b61173a5760405162461bcd60e51b81526004016109d9906151d9565b60335460ff161561175d5760405162461bcd60e51b81526004016109d990615183565b611765611646565b60006117796075546001600160401b031690565b9050600061178561277b565b9050600061179282612c13565b60038101549091506001600160401b03848116911614156119f4576117b684612791565b6117d25760405162461bcd60e51b81526004016109d990615200565b6117ec6117de85610df1565b6001600160401b0316610d4d565b6117f682856124aa565b156118365760405162461bcd60e51b815260206004820152601060248201526f14d51052d15117d3d397d5105491d15560821b60448201526064016109d9565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082015260058201546101608201526118df90613609565b6119916118eb84612c13565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e08701529182048316610100860152810482166101208501529190910416610140820152600590910154610160820152613658565b61199b60006127d4565b6119a482611175565b6003820154600160c01b90046001600160401b0316146119f45760405162461bcd60e51b815260206004820152600b60248201526a4841535f5354414b45525360a81b60448201526064016109d9565b6119fc613878565b6040516001600160401b038316907feaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad464090600090a250505050565b600080611a42607a5490565b90506000805b828110156111c1576000611a5b826138bf565b80549091506001600160401b03878116600160a01b9092041614801590611a9357508054611a939087906001600160a01b03166124aa565b15611aa65782611aa2816153ae565b9350505b5080611ab1816153ae565b915050611a48565b60006078826001600160401b031681548110611ad757611ad7615419565b6000918252602090912001546001600160a01b031692915050565b3360009081526074602052604090205460ff1680611b125750607e5460ff165b611b2e5760405162461bcd60e51b81526004016109d9906151d9565b60335460ff1615611b515760405162461bcd60e51b81526004016109d990615183565b611b616040880160208901614e8d565b6001600160401b0316611b776020890189614e8d565b6001600160401b031610611bbb5760405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afa7a92222a960a91b60448201526064016109d9565b611bc361220a565b6001600160401b0316611bdc6040890160208a01614e8d565b6001600160401b03161115611c225760405162461bcd60e51b815260206004820152600c60248201526b1393d517d41493d413d4d15160a21b60448201526064016109d9565b611c2f6020880188614e8d565b6001600160401b0316611c4a6075546001600160401b031690565b6001600160401b031610611c945760405162461bcd60e51b81526020600482015260116024820152701053149150511657d0d3d3919254935151607a1b60448201526064016109d9565b6000611cb488825b602002016020810190611caf9190614e8d565b612c13565b90506000611cc3896001611c9c565b600380820154908401549192506001600160401b03918216911614611d165760405162461bcd60e51b81526020600482015260096024820152682224a3232fa82922ab60b91b60448201526064016109d9565b611d358a60005b602002016020810190611d309190614e22565b612c7e565b611d408a6001611d1d565b611d67611d5060208b018b614e8d565b8b60005b6020020160208101906107be9190614e22565b611da85760405162461bcd60e51b815260206004820152601260248201527114d51052d1548c57d393d517d4d51052d15160721b60448201526064016109d9565b611dc3611dbb60408b0160208c01614e8d565b8b6001611d54565b611e045760405162461bcd60e51b815260206004820152601260248201527114d51052d1548c97d393d517d4d51052d15160721b60448201526064016109d9565b604080518082018252611e8591611e7591908b90600290839083908082843760009201829052506040805180820190915292508c9150600290835b82821015611e6b57611e5c60808302850136819003810190615392565b81526020019060010190611e3f565b50505050896138e5565b85358560005b602002013561398f565b826001015414611ec45760405162461bcd60e51b815260206004820152600a6024820152694348414c5f484153483160b01b60448201526064016109d9565b611ed5856020860135856001611e7b565b816001015414611f145760405162461bcd60e51b815260206004820152600a60248201526921a420a62fa420a9a41960b11b60448201526064016109d9565b60655460038301546000916001600160401b03600160401b91829004811692611f429289359291041661523a565b6003850154611f59906001600160401b0316612c13565b60040154611f779190600160401b90046001600160401b03166153df565b611f8191906153df565b90506020850135811015611fbc57611fb4611f9f60208d018d614e22565b611faf60408e0160208f01614e22565b612a53565b50505061211a565b6000611ffc8c8b8b8b89600c611fd38d358a61523a565b611fdd919061542f565b600c611fed60208f01358b61523a565b611ff7919061542f565b6139cd565b905061207f61200e60208e018e614e22565b8d60016020020160208101906120249190614e22565b6001600160a01b03918216600090815260796020526040808220600190810180546001600160401b038916600160801b0267ffffffffffffffff60801b19918216811790925594909516835291200180549091169091179055565b6001600160401b0381167f6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd8736120b760208f018f614e22565b8e60016020020160208101906120cd9190614e22565b8e60006020020160208101906120e39190614e8d565b604080516001600160a01b0394851681529390921660208401526001600160401b03169082015260600160405180910390a2505050505b5050505050505050565b3360009081526074602052604090205460ff16806121445750607e5460ff165b6121605760405162461bcd60e51b81526004016109d9906151d9565b60335460ff16156121835760405162461bcd60e51b81526004016109d990615183565b6075546001600160401b031661219882610df1565b6001600160401b031611156121dc5760405162461bcd60e51b815260206004820152600a6024820152691513d3d7d49150d1539560b21b60448201526064016109d9565b6121e581612c7e565b610dee81613a8c565b6121f783613b3c565b6122018282610b03565b610a8483613c5e565b607554600160801b90046001600160401b031690565b3360009081526074602052604090205460ff16806122405750607e5460ff165b61225c5760405162461bcd60e51b81526004016109d9906151d9565b60335460ff161561227f5760405162461bcd60e51b81526004016109d990615183565b607a5482106122c15760405162461bcd60e51b815260206004820152600e60248201526d4e4f5f535543485f5a4f4d42494560901b60448201526064016109d9565b60006122cc83612749565b905060006122d9846128d8565b90506000806122f06075546001600160401b031690565b6001600160401b031690505b80836001600160401b03161015801561231457508482105b1561235357600061232484612c13565b90506123308486613d24565b60038101546001600160401b031693508261234a816153ae565b935050506122fc565b80836001600160401b031610156123725761236d86613e6e565b61237c565b61237c8684613f34565b505050505050565b6000611619613f7d565b6000805b607a548110156123e957607a81815481106123af576123af615419565b6000918252602090912001546001600160a01b03848116911614156123d75750600192915050565b806123e1816153ae565b915050612392565b50600092915050565b6123fa614c4b565b61240382612c13565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082015260059091015461016082015292915050565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b60006124f78484846001600160401b0316612da1565b90505b9392505050565b607e5460ff16156125245760405162461bcd60e51b81526004016109d9906151ad565b467f00000000000000000000000000000000000000000000000000000000000000001415610af45760405162461bcd60e51b815260206004820152601460248201527310d210525397d25117d393d517d0d2105391d15160621b60448201526064016109d9565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156126195760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016109d9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661264b613fb0565b6001600160a01b0316146126b65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016109d9565b6001600160a01b0381166126ff5760405162461bcd60e51b815260206004820152601060248201526f2722a2a22fa9aa20a5a2afaa27a5a2a760811b60448201526064016109d9565b6072546001600160a01b0316610dee5760405162461bcd60e51b815260206004820152600f60248201526e046414345545f4e4f545f455243323608c1b60448201526064016109d9565b6000607a8281548110611ad757611ad7615419565b61276784613b3c565b612772838383610f12565b61116f84613c5e565b607554600160401b90046001600160401b031690565b6001600160a01b038116600090815260796020526040812060010154600160c01b900460ff1680156124db57506075546124db906001600160401b0316836124aa565b3360009081526074602052604090205460ff16806127f45750607e5460ff165b6128105760405162461bcd60e51b81526004016109d9906151d9565b60335460ff16156128335760405162461bcd60e51b81526004016109d990615183565b600061283e607a5490565b905060006128546075546001600160401b031690565b6001600160401b03169050825b8281101561116f575b81612874826128d8565b6001600160401b031610156128ab5761288c81613e6e565b826128968161544e565b9350508281106128a65750505050565b61286a565b806128b5816153ae565b915050612861565b6001600160a01b031660009081526079602052604090205490565b6000607a82815481106128ed576128ed615419565b600091825260209091200154600160a01b90046001600160401b031692915050565b3360009081526074602052604090205460ff168061292f5750607e5460ff165b61294b5760405162461bcd60e51b81526004016109d9906151d9565b60335460ff161561296e5760405162461bcd60e51b81526004016109d990615183565b6129788282613fd8565b61298181613c5e565b5050565b6001600160a01b03828116600090815260796020526040808220928416825281206001830154919291600160801b90046001600160401b0316806129f55760405162461bcd60e51b81526020600482015260076024820152661393d7d0d2105360ca1b60448201526064016109d9565b60018201546001600160401b03828116600160801b9092041614612a4a5760405162461bcd60e51b815260206004820152600c60248201526b1112519197d25397d0d2105360a21b60448201526064016109d9565b95945050505050565b6000612a5e826128bd565b90506000612a6b846128bd565b905080821115612a8c57612a7f8382612cee565b612a89908361523a565b91505b6000612a9960028461547b565b9050612aa58582614046565b612aaf818461523a565b9250612ae3856001600160a01b03166000908152607960205260409020600101805467ffffffffffffffff60801b19169055565b607154612af9906001600160a01b0316846140ab565b612b0284614147565b5050505050565b600080612b17611caf61220a565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082018190526005909201546101608201529150612bc857600091505090565b606554610140820151439161b2fa91612bea916001600160401b03169061548f565b6001600160401b0316612bfd91906153df565b1015612c0b57600191505090565b600091505090565b6001600160401b0316600090815260766020526040902090565b6001600160a01b0382166000908152607960205260409020612c4f82846141ed565b60010180546001600160401b03909216600160401b0267ffffffffffffffff60401b1990921691909117905550565b612c878161161e565b612ca35760405162461bcd60e51b81526004016109d990615200565b6000612cae826116d0565b6001600160401b031614610dee5760405162461bcd60e51b8152602060048201526007602482015266125397d0d2105360ca1b60448201526064016109d9565b6001600160a01b0382166000908152607960205260408120805480841115612d4b5760405162461bcd60e51b815260206004820152601060248201526f544f4f5f4c4954544c455f5354414b4560801b60448201526064016109d9565b6000612d57858361523a565b8584559050612d6686826140ab565b60408051838152602081018790526001600160a01b03881691600080516020615971833981519152910160405180910390a295945050505050565b600081612daf6001856154ba565b6001600160401b03161415612dc757506067546124fa565b6000612dd284612c13565b60030154600160401b90046001600160401b0316905080851015612dfa5750506067546124fa565b6000604051806101400160405280600162ffffff1681526020016201e05b62ffffff1681526020016201f7d162ffffff1681526020016201389162ffffff168152602001620329e162ffffff1681526020016201be4362ffffff1681526020016204cb8c62ffffff1681526020016201fbc462ffffff16815260200162036d3262ffffff1681526020016202797362ffffff1681525090506000604051806101400160405280600162ffffff1681526020016201c03062ffffff1681526020016201b69962ffffff16815260200161fde262ffffff168152602001620265c662ffffff16815260200162013b8e62ffffff168152602001620329e162ffffff1681526020016201389162ffffff1681526020016201f7d162ffffff1681526020016201537562ffffff16815250905060008388612f37919061523a565b6065549091506000906001600160401b0316612f5483600a61542f565b612f5e919061547b565b90506000612f6d600a8361547b565b612f789060026155c6565b9050600085612f88600a856155d2565b600a8110612f9857612f98615419565b6020020151612fac9062ffffff168361542f565b9050600085612fbc600a866155d2565b600a8110612fcc57612fcc615419565b6020020151612fe09062ffffff168361547b565b905080612feb575060015b80606754612ff9919061542f565b9c9b505050505050505050505050565b6020810151600090815b602002015192915050565b6000600161303461014087016101208801615276565b600381111561304557613045615251565b14806130735750600261306061014087016101208801615276565b600381111561307157613071615251565b145b6130b25760405162461bcd60e51b815260206004820152601060248201526f4241445f41465445525f53544154555360801b60448201526064016109d9565b6130ba614caf565b6130c3856123f2565b6060820152606a54604080516221048360e21b815290516001600160a01b03909216916284120c91600480820192602092909190829003018186803b15801561310b57600080fd5b505afa15801561311f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314391906155e6565b815260608101515161315587866143cd565b146131945760405162461bcd60e51b815260206004820152600f60248201526e0a0a48aacbea6a882a88abe9082a69608b1b60448201526064016109d9565b60006131ab61104936899003890160a08a01615392565b905060006131c1611049368a90038a018a615392565b9050806001600160401b0316826001600160401b031610156132175760405162461bcd60e51b815260206004820152600f60248201526e494e424f585f4241434b574152445360881b60448201526064016109d9565b806001600160401b0316826001600160401b031614156132bd57613248613243368a90038a018a615392565b614427565b6001600160401b0316613266613243368b90038b0160a08c01615392565b6001600160401b031610156132bd5760405162461bcd60e51b815260206004820152601a60248201527f494e424f585f504f535f494e5f4d53475f4241434b574152445300000000000060448201526064016109d9565b60026132d16101408a016101208b01615276565b60038111156132e2576132e2615251565b148061330b57506000613300613243368b90038b0160a08c01615392565b6001600160401b0316115b1561331e578161331a816155ff565b9250505b82516001600160401b03831611156133695760405162461bcd60e51b815260206004820152600e60248201526d12539093d617d41054d517d1539160921b60448201526064016109d9565b6001600160401b0382161561341157606a546001600160a01b03166316bf55796133946001856154ba565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b1580156133d357600080fd5b505afa1580156133e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340b91906155e6565b60e08401525b5061342b905061342636889003880188615665565b614436565b6040820152606554613446906001600160401b03164361548f565b6001600160401b0390811660c0830152606082015161012001511615801560a083015261348d5761347f81606001516101200151612c13565b60050154608082015261349d565b6060810151610160015160808201525b6134bc8160a00151826080015183604001518460e001516068546144d5565b9150828214806134ca575082155b61350d5760405162461bcd60e51b81526020600482015260146024820152730aa9c8ab0a08a86a88a88be9c9e888abe9082a6960631b60448201526064016109d9565b6135556135218760a00183600001516143cd565b61353283604001514360685461398f565b613549613544368b90038b018b615665565b614542565b888560c001518761456c565b6020820152600061356461220a565b61356f90600161548f565b9050600061357c87612c13565b905061358881836145c0565b6135958360200151614631565b505081816060015161016001516135aa61220a565b6001600160401b03167f4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d09684604001518a8660e0015160685488600001516040516135f8959493929190615760565b60405180910390a450949350505050565b80608001516001600160401b0316431015610dee5760405162461bcd60e51b815260206004820152600f60248201526e4245464f52455f444541444c494e4560881b60448201526064016109d9565b8060a001516001600160401b0316431015610dee5760405162461bcd60e51b815260206004820152601060248201526f10d212531117d513d3d7d49150d1539560821b60448201526064016109d9565b60006136b384612c13565b90506136bf8383614768565b8160020154146137005760405162461bcd60e51b815260206004820152600c60248201526b434f4e4649524d5f4441544160a01b60448201526064016109d9565b606b54604051630502677360e51b815260048101849052602481018590526001600160a01b039091169063a04cee6090604401600060405180830381600087803b15801561374d57600080fd5b505af1158015613761573d6000803e3d6000fd5b50506075805467ffffffffffffffff19166001600160401b0388161790555061378d905084600161548f565b6075805467ffffffffffffffff60401b1916600160401b6001600160401b03938416021790556040805185815260208101859052918616917f22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c91015b60405180910390a250505050565b6001600160a01b0381166000908152607b60205260408120805490829055607c8054829190849061382990849061523a565b909155505060408051828152600060208201526001600160a01b038516917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a292915050565b60758054600160401b90046001600160401b0316906008613898836155ff565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050565b6000607a82815481106138d4576138d4615419565b906000526020600020019050919050565b60408051600280825260608201835260009283929190602083019080368337019050508551909150613927906139228660005b6020020151614784565b6147f8565b8160008151811061393a5761393a615419565b602090810291909101015261395b8560016020020151613922866001613918565b8160018151811061396e5761396e615419565b602002602001018181525050612a4a6000846001600160401b03168361491c565b6040805160208101859052908101839052606081018290526000906080015b6040516020818303038152906040528051906020012090509392505050565b606e546000906001600160a01b03166314eab5e785358989896139f360208f018f614e22565b8e6001602002016020810190613a099190614e22565b8a8a6040518963ffffffff1660e01b8152600401613a2e9897969594939291906157c2565b602060405180830381600087803b158015613a4857600080fd5b505af1158015613a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a809190615872565b98975050505050505050565b6001600160a01b038116600090815260796020526040812090613ab76075546001600160401b031690565b9050613ac381846124aa565b15613af85760018201546001600160401b03828116600160401b9092041614613aee57613aee6153c9565b613af88184613d24565b8154613b0484826140ab565b613b0d84614933565b60408051828152600060208201526001600160a01b0386169160008051602061597183398151915291016137e9565b3360009081526074602052604090205460ff1680613b5c5750607e5460ff165b613b785760405162461bcd60e51b81526004016109d9906151d9565b60335460ff1615613b9b5760405162461bcd60e51b81526004016109d990615183565b613ba43361161e565b15613bc15760405162461bcd60e51b81526004016109d99061588f565b613bca3361238e565b15613c0a5760405162461bcd60e51b815260206004820152601060248201526f5354414b45525f49535f5a4f4d42494560801b60448201526064016109d9565b613c12610e1f565b811015613c545760405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b60448201526064016109d9565b610dee3382614ad9565b6072546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015613cb057600080fd5b505af1158015613cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce891906153f7565b610dee5760405162461bcd60e51b815260206004820152600d60248201526c1514905394d1915497d1905253609a1b60448201526064016109d9565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff16613d705760405162461bcd60e51b81526004016109d990615200565b6001600160401b03821660009081526077602090815260408083206001600160a01b03851684529091528120805460ff19169055613dad83612c13565b600381018054919250600160c01b9091046001600160401b0316906018613dd3836158b7565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505060006001600160401b0316836001600160401b03161115610a84576003810154613e2a906001600160401b0316612c13565b60040180546001600160401b0316906000613e44836158b7565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050505050565b607a8054613e7e9060019061523a565b81548110613e8e57613e8e615419565b90600052602060002001607a8281548110613eab57613eab615419565b600091825260209091208254910180546001600160a01b039092166001600160a01b031983168117825592546001600160e01b0319909216909217600160a01b918290046001600160401b0316909102179055607a805480613f0f57613f0f6158da565b600082815260209020810160001990810180546001600160e01b031916905501905550565b80607a8381548110613f4857613f48615419565b9060005260206000200160000160146101000a8154816001600160401b0302191690836001600160401b031602179055505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d613fa1565b3360009081526074602052604090205460ff1680613ff85750607e5460ff165b6140145760405162461bcd60e51b81526004016109d9906151d9565b60335460ff16156140375760405162461bcd60e51b81526004016109d990615183565b61404082612c7e565b61298182825b6001600160a01b03821660009081526079602052604081208054909161406c84836153df565b80845560408051848152602081018390529192506001600160a01b03871691600080516020615971833981519152910160405180910390a25050505050565b6001600160a01b0382166000908152607b6020526040812054906140cf83836153df565b6001600160a01b0385166000908152607b60205260408120829055607c805492935085929091906141019084906153df565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae291016137e9565b6001600160a01b03808216600081815260796020908152604080832081518083019092529381526001808501546001600160401b03600160401b9091048116938301938452607a8054928301815590945290517ff0440771a29e57e18c66727944770b82cc77924aef333c927ce6bdd2cdb3ae0390910180549251909316600160a01b026001600160e01b03199092169416939093179290921790915561298182614933565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff161561423a5760405162461bcd60e51b81526004016109d99061588f565b6001600160401b03821660009081526077602090815260408083206001600160a01b03851684529091528120805460ff1916600117905561427a83612c13565b6003810154909150600160401b90046001600160401b03166142c85760405162461bcd60e51b81526020600482015260076024820152664e4f5f4e4f444560c81b60448201526064016109d9565b6003810154600160c01b90046001600160401b03166142e881600161548f565b6003830180546001600160c01b0316600160c01b6001600160401b039384160217905584161561116f57600382015460009061432c906001600160401b0316612c13565b6004810180549192506001600160401b0390911690600061434c836155ff565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050816001600160401b031660001415612b0257606554612b029061439d906001600160401b03164361548f565b60038301805467ffffffffffffffff60801b1916600160801b6001600160401b0390931692909202919091179055565b60006143e66143e136859003850185615392565b614784565b826143f760a0860160808701615276565b604051602001614409939291906158f0565b60405160208183030381529060405280519060200120905092915050565b60208101516000906001613013565b6000614440614d00565b8251602001518190600381111561445957614459615251565b9081600381111561446c5761446c615251565b90525060208381015181015190820190600381111561448d5761448d615251565b908160038111156144a0576144a0615251565b9052506144ab614d1e565b8351518152602080850151519082015260408401516144cd90839083906138e5565b949350505050565b600080866144e45760006144e7565b60015b6040516001600160f81b031960f883901b1660208201526021810188905260418101879052606181018690526081810185905290915060a1016040516020818303038152906040528051906020012091505095945050505050565b60006124db614558836020015160000151614c34565b60208401515161456790614c3f565b614768565b614574614c4b565b61457c614c4b565b96875250602086019490945260408501929092526001600160401b0390811660608501529081166080840181905260a0840152431661014083015261016082015290565b6004820154600160401b90046001600160401b03166146015760048201805467ffffffffffffffff60401b1916600160401b436001600160401b0316021790555b600490910180546001600160401b03909216600160801b0267ffffffffffffffff60801b19909216919091179055565b60758054600160801b90046001600160401b0316906010614651836155ff565b825461010092830a6001600160401b03818102199092169282160291909117909255607554600160801b908190048316600090815260766020908152604091829020875181559087015160018201559086015160028201556060860151600382018054608089015160a08a015160c08b01519489166001600160801b031993841617600160401b928a168302176001600160801b03908116918a1688026001600160c01b0390811692909217600160c01b968b1687021790945560e08b0151600487018054998d01516101208e01516101408f0151938d169b9096169a909a17998b169093029890981790931691881690950290911617939094169093029190911790556101609092015160059092019190915550565b6040805160208101849052908101829052600090606001614409565b8051805160209182015192820151805190830151604080516c23b637b130b61039ba30ba329d60991b81870152602d810194909452604d8401959095526001600160c01b031960c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b6000600183600381111561480e5761480e615251565b1415614854576040516b213637b1b59039ba30ba329d60a11b6020820152602c8101839052604c015b6040516020818303038152906040528051906020012090506124db565b600283600381111561486857614868615251565b141561489e5760405174213637b1b59039ba30ba32961032b93937b932b21d60591b602082015260358101839052605501614837565b60038360038111156148b2576148b2615251565b14156148e15760405174213637b1b59039ba30ba3296103a37b7903330b91d60591b6020820152603501614837565b60405162461bcd60e51b815260206004820152601060248201526f4241445f424c4f434b5f53544154555360801b60448201526064016109d9565b60008383836040516020016139ae9392919061592e565b6001600160a01b03811660009081526079602052604090206001810154600160c01b900460ff166149765760405162461bcd60e51b81526004016109d990615200565b600180820154607880546001600160401b03909216929091614998919061523a565b815481106149a8576149a8615419565b600091825260209091200154607880546001600160a01b03909216916001600160401b0384169081106149dd576149dd615419565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080607960006078846001600160401b031681548110614a2c57614a2c615419565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600101805467ffffffffffffffff19166001600160401b03929092169190911790556078805480614a8457614a846158da565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152607990935250506040812090815560010180546001600160c81b0319169055565b6078805460018082019092557f8dc6fb69531d98d70dc0420e638d2dfd04e09e1ec783ede9aac77da9c5a0dac4810180546001600160a01b0319166001600160a01b0386169081179091556040805160a0810182528581526001600160401b038085166020808401918252607580548416858701908152600060608701818152608088018c81528a835260798652898320985189559551978c0180549351915196519888166001600160801b031990941693909317600160401b918816919091021768ffffffffffffffffff60801b1916600160801b9587169590950260ff60c01b191694909417600160c01b9615158702179055805484168352607782528583208784528252858320805460ff191690991790985587546001600160c01b031643909316909302919091179095558151948552840185905291929091600080516020615971833981519152910160405180910390a2505050565b805160009081613013565b80516000906001613013565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b60405180610100016040528060008152602001614cca614c4b565b815260006020820152604001614cde614c4b565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b614d35614d4b565b815260200190600190039081614d2d5790505090565b6040518060400160405280614d5e614d00565b8152602001614d6b614d00565b905290565b80356001600160a01b0381168114614d8757600080fd5b919050565b600080600060608486031215614da157600080fd5b83359250614db160208501614d70565b9150614dbf60408501614d70565b90509250925092565b6001600160401b0381168114610dee57600080fd5b60008060408385031215614df057600080fd5b8235614dfb81614dc8565b946020939093013593505050565b600060208284031215614e1b57600080fd5b5035919050565b600060208284031215614e3457600080fd5b6124fa82614d70565b60006101608284031215614e5057600080fd5b50919050565b60008060006101a08486031215614e6c57600080fd5b614e768585614e3d565b956101608501359550610180909401359392505050565b600060208284031215614e9f57600080fd5b81356124fa81614dc8565b60008060408385031215614ebd57600080fd5b50508035926020909101359150565b80604081018310156124db57600080fd5b600080600080600080600080610280898b031215614efa57600080fd5b614f048a8a614ecc565b9750614f138a60408b01614ecc565b9650614f228a60808b01614ecc565b95506101c089018a811115614f3657600080fd5b60c08a01955035614f4681614dc8565b93506101e08901359250614f5e8a6102008b01614ecc565b9150614f6e8a6102408b01614ecc565b90509295985092959890939650565b600080600060608486031215614f9257600080fd5b833592506020840135614fa481614dc8565b929592945050506040919091013590565b6000610180820190508251825260208301516020830152604083015160408301526060830151614ff060608401826001600160401b03169052565b50608083015161500b60808401826001600160401b03169052565b5060a083015161502660a08401826001600160401b03169052565b5060c083015161504160c08401826001600160401b03169052565b5060e083015161505c60e08401826001600160401b03169052565b50610100838101516001600160401b038116848301525050610120838101516001600160401b038116848301525050610140838101516001600160401b03811684830152505061016092830151919092015290565b600080604083850312156150c457600080fd5b82356150cf81614dc8565b91506150dd60208401614d70565b90509250929050565b6000806000606084860312156150fb57600080fd5b83359250602084013561510d81614dc8565b9150604084013561511d81614dc8565b809150509250925092565b6000806000806101c0858703121561513f57600080fd5b843593506151508660208701614e3d565b9396939550505050610180820135916101a0013590565b6000806040838503121561517a57600080fd5b614dfb83614d70565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526012908201527115d2125511531254d517d11254d05093115160721b604082015260600190565b6020808252600d908201526c2727aa2fab20a624a220aa27a960991b604082015260600190565b6020808252600a90820152691393d517d4d51052d15160b21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561524c5761524c615224565b500390565b634e487b7160e01b600052602160045260246000fd5b803560048110614d8757600080fd5b60006020828403121561528857600080fd5b6124fa82615267565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156152c9576152c9615291565b60405290565b6000608082840312156152e157600080fd5b6152e96152a7565b905082601f8301126152fa57600080fd5b6153026152a7565b80604084018581111561531457600080fd5b845b8181101561532e578035845260209384019301615316565b5081845285605f86011261534157600080fd5b6153496152a7565b9250829150608085018681111561535f57600080fd5b8082101561538457813561537281614dc8565b8452602093840193919091019061535f565b505060208301525092915050565b6000608082840312156153a457600080fd5b6124fa83836152cf565b60006000198214156153c2576153c2615224565b5060010190565b634e487b7160e01b600052600160045260246000fd5b600082198211156153f2576153f2615224565b500190565b60006020828403121561540957600080fd5b815180151581146124fa57600080fd5b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561544957615449615224565b500290565b60008161545d5761545d615224565b506000190190565b634e487b7160e01b600052601260045260246000fd5b60008261548a5761548a615465565b500490565b60006001600160401b038083168185168083038211156154b1576154b1615224565b01949350505050565b60006001600160401b03838116908316818110156154da576154da615224565b039392505050565b600181815b8085111561551d57816000190482111561550357615503615224565b8085161561551057918102915b93841c93908002906154e7565b509250929050565b600082615534575060016124db565b81615541575060006124db565b816001811461555757600281146155615761557d565b60019150506124db565b60ff84111561557257615572615224565b50506001821b6124db565b5060208310610133831016604e8410600b84101617156155a0575081810a6124db565b6155aa83836154e2565b80600019048211156155be576155be615224565b029392505050565b60006124fa8383615525565b6000826155e1576155e1615465565b500690565b6000602082840312156155f857600080fd5b5051919050565b60006001600160401b038083168181141561561c5761561c615224565b6001019392505050565b600060a0828403121561563857600080fd5b6156406152a7565b905061564c83836152cf565b815261565a60808301615267565b602082015292915050565b6000610160828403121561567857600080fd5b604051606081018181106001600160401b038211171561569a5761569a615291565b6040526156a78484615626565b81526156b68460a08501615626565b60208201526101408301356156ca81614dc8565b60408201529392505050565b604081833760006040838101828152908301915b6002811015612b025782356156fe81614dc8565b6001600160401b03168252602092830192909101906001016156ea565b6004811061573957634e487b7160e01b600052602160045260246000fd5b9052565b61574782826156d6565b61575360808201615267565b610a84608084018261571b565b8581526101e08101615775602083018761573d565b61578560c0830160a0880161573d565b61014086013561579481614dc8565b6001600160401b03166101608301526101808201949094526101a08101929092526101c09091015292915050565b888152610200810160208083018a60005b60028110156157fe576157ee836157e984615267565b61571b565b91830191908301906001016157d3565b50505050606082018860005b60028110156158305761581d83836156d6565b608092830192919091019060010161580a565b5050506001600160401b03969096166101608201526001600160a01b03948516610180820152929093166101a08301526101c08201526101e001529392505050565b60006020828403121561588457600080fd5b81516124fa81614dc8565b6020808252600e908201526d1053149150511657d4d51052d15160921b604082015260600190565b60006001600160401b038216806158d0576158d0615224565b6000190192915050565b634e487b7160e01b600052603160045260246000fd5b83815282602082015260006004831061591957634e487b7160e01b600052602160045260246000fd5b5060f89190911b604082015260410192915050565b83815260006020848184015260408301845182860160005b8281101561596257815184529284019290840190600101615946565b50919897505050505050505056feebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6a26469706673582212207cb99666fbe3e32a1b0db8f0ec7fd90a60a5d906b66af9adfacd2a6390574baf64736f6c63430008090033",
}

// ERC20RollupUserLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20RollupUserLogicMetaData.ABI instead.
var ERC20RollupUserLogicABI = ERC20RollupUserLogicMetaData.ABI

// ERC20RollupUserLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20RollupUserLogicMetaData.Bin instead.
var ERC20RollupUserLogicBin = ERC20RollupUserLogicMetaData.Bin

// DeployERC20RollupUserLogic deploys a new Ethereum contract, binding an instance of ERC20RollupUserLogic to it.
func DeployERC20RollupUserLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20RollupUserLogic, error) {
	parsed, err := ERC20RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20RollupUserLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20RollupUserLogic{ERC20RollupUserLogicCaller: ERC20RollupUserLogicCaller{contract: contract}, ERC20RollupUserLogicTransactor: ERC20RollupUserLogicTransactor{contract: contract}, ERC20RollupUserLogicFilterer: ERC20RollupUserLogicFilterer{contract: contract}}, nil
}

// ERC20RollupUserLogic is an auto generated Go binding around an Ethereum contract.
type ERC20RollupUserLogic struct {
	ERC20RollupUserLogicCaller     // Read-only binding to the contract
	ERC20RollupUserLogicTransactor // Write-only binding to the contract
	ERC20RollupUserLogicFilterer   // Log filterer for contract events
}

// ERC20RollupUserLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20RollupUserLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupUserLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20RollupUserLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupUserLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20RollupUserLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupUserLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20RollupUserLogicSession struct {
	Contract     *ERC20RollupUserLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ERC20RollupUserLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20RollupUserLogicCallerSession struct {
	Contract *ERC20RollupUserLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ERC20RollupUserLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20RollupUserLogicTransactorSession struct {
	Contract     *ERC20RollupUserLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ERC20RollupUserLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20RollupUserLogicRaw struct {
	Contract *ERC20RollupUserLogic // Generic contract binding to access the raw methods on
}

// ERC20RollupUserLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20RollupUserLogicCallerRaw struct {
	Contract *ERC20RollupUserLogicCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20RollupUserLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20RollupUserLogicTransactorRaw struct {
	Contract *ERC20RollupUserLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20RollupUserLogic creates a new instance of ERC20RollupUserLogic, bound to a specific deployed contract.
func NewERC20RollupUserLogic(address common.Address, backend bind.ContractBackend) (*ERC20RollupUserLogic, error) {
	contract, err := bindERC20RollupUserLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogic{ERC20RollupUserLogicCaller: ERC20RollupUserLogicCaller{contract: contract}, ERC20RollupUserLogicTransactor: ERC20RollupUserLogicTransactor{contract: contract}, ERC20RollupUserLogicFilterer: ERC20RollupUserLogicFilterer{contract: contract}}, nil
}

// NewERC20RollupUserLogicCaller creates a new read-only instance of ERC20RollupUserLogic, bound to a specific deployed contract.
func NewERC20RollupUserLogicCaller(address common.Address, caller bind.ContractCaller) (*ERC20RollupUserLogicCaller, error) {
	contract, err := bindERC20RollupUserLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicCaller{contract: contract}, nil
}

// NewERC20RollupUserLogicTransactor creates a new write-only instance of ERC20RollupUserLogic, bound to a specific deployed contract.
func NewERC20RollupUserLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20RollupUserLogicTransactor, error) {
	contract, err := bindERC20RollupUserLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicTransactor{contract: contract}, nil
}

// NewERC20RollupUserLogicFilterer creates a new log filterer instance of ERC20RollupUserLogic, bound to a specific deployed contract.
func NewERC20RollupUserLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20RollupUserLogicFilterer, error) {
	contract, err := bindERC20RollupUserLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicFilterer{contract: contract}, nil
}

// bindERC20RollupUserLogic binds a generic wrapper to an already deployed contract.
func bindERC20RollupUserLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20RollupUserLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RollupUserLogic.Contract.ERC20RollupUserLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ERC20RollupUserLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ERC20RollupUserLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RollupUserLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.contract.Transact(opts, method, params...)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) VALIDATORAFKBLOCKS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "VALIDATOR_AFK_BLOCKS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_ERC20RollupUserLogic.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_ERC20RollupUserLogic.CallOpts)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked     *big.Int
		Index            uint64
		LatestStakedNode uint64
		CurrentChallenge uint64
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.LatestStakedNode = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _ERC20RollupUserLogic.Contract.StakerMap(&_ERC20RollupUserLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _ERC20RollupUserLogic.Contract.StakerMap(&_ERC20RollupUserLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.AmountStaked(&_ERC20RollupUserLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.AmountStaked(&_ERC20RollupUserLogic.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) BaseStake() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.BaseStake(&_ERC20RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) BaseStake() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.BaseStake(&_ERC20RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Bridge() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Bridge(&_ERC20RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Bridge() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Bridge(&_ERC20RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ChainId() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.ChainId(&_ERC20RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ChainId() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.ChainId(&_ERC20RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ChallengeManager() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ChallengeManager(&_ERC20RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ChallengeManager(&_ERC20RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ConfirmPeriodBlocks(&_ERC20RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ConfirmPeriodBlocks(&_ERC20RollupUserLogic.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CountStakedZombies(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CountStakedZombies(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CountZombiesStakedOnChildren(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CountZombiesStakedOnChildren(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.CurrentChallenge(&_ERC20RollupUserLogic.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.CurrentChallenge(&_ERC20RollupUserLogic.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CurrentRequiredStake() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CurrentRequiredStake(&_ERC20RollupUserLogic.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.CurrentRequiredStake(&_ERC20RollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_ERC20RollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_ERC20RollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) FirstUnresolvedNode() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.FirstUnresolvedNode(&_ERC20RollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.FirstUnresolvedNode(&_ERC20RollupUserLogic.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) GetNode(nodeNum uint64) (Node, error) {
	return _ERC20RollupUserLogic.Contract.GetNode(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _ERC20RollupUserLogic.Contract.GetNode(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _ERC20RollupUserLogic.Contract.GetStaker(&_ERC20RollupUserLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _ERC20RollupUserLogic.Contract.GetStaker(&_ERC20RollupUserLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.GetStakerAddress(&_ERC20RollupUserLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.GetStakerAddress(&_ERC20RollupUserLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Inbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Inbox(&_ERC20RollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Inbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Inbox(&_ERC20RollupUserLogic.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Initialize(opts *bind.CallOpts, _stakeToken common.Address) error {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "initialize", _stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Initialize(_stakeToken common.Address) error {
	return _ERC20RollupUserLogic.Contract.Initialize(&_ERC20RollupUserLogic.CallOpts, _stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Initialize(_stakeToken common.Address) error {
	return _ERC20RollupUserLogic.Contract.Initialize(&_ERC20RollupUserLogic.CallOpts, _stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) IsERC20Enabled() (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsERC20Enabled(&_ERC20RollupUserLogic.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) IsERC20Enabled() (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsERC20Enabled(&_ERC20RollupUserLogic.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsStaked(&_ERC20RollupUserLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsStaked(&_ERC20RollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) IsStakedOnLatestConfirmed(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "isStakedOnLatestConfirmed", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_ERC20RollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_ERC20RollupUserLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsValidator(&_ERC20RollupUserLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsValidator(&_ERC20RollupUserLogic.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) IsZombie(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsZombie(&_ERC20RollupUserLogic.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.IsZombie(&_ERC20RollupUserLogic.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) LastStakeBlock() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LastStakeBlock(&_ERC20RollupUserLogic.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) LastStakeBlock() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LastStakeBlock(&_ERC20RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) LatestConfirmed() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestConfirmed(&_ERC20RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) LatestConfirmed() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestConfirmed(&_ERC20RollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) LatestNodeCreated() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestNodeCreated(&_ERC20RollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) LatestNodeCreated() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestNodeCreated(&_ERC20RollupUserLogic.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestStakedNode(&_ERC20RollupUserLogic.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.LatestStakedNode(&_ERC20RollupUserLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.LoserStakeEscrow(&_ERC20RollupUserLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.LoserStakeEscrow(&_ERC20RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.MinimumAssertionPeriod(&_ERC20RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.MinimumAssertionPeriod(&_ERC20RollupUserLogic.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.NodeHasStaker(&_ERC20RollupUserLogic.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _ERC20RollupUserLogic.Contract.NodeHasStaker(&_ERC20RollupUserLogic.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Outbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Outbox(&_ERC20RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Outbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Outbox(&_ERC20RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Owner() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Owner(&_ERC20RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Owner() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.Owner(&_ERC20RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) Paused() (bool, error) {
	return _ERC20RollupUserLogic.Contract.Paused(&_ERC20RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) Paused() (bool, error) {
	return _ERC20RollupUserLogic.Contract.Paused(&_ERC20RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ProxiableUUID() ([32]byte, error) {
	return _ERC20RollupUserLogic.Contract.ProxiableUUID(&_ERC20RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _ERC20RollupUserLogic.Contract.ProxiableUUID(&_ERC20RollupUserLogic.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RequireUnresolved(nodeNum *big.Int) error {
	return _ERC20RollupUserLogic.Contract.RequireUnresolved(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _ERC20RollupUserLogic.Contract.RequireUnresolved(&_ERC20RollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RequireUnresolvedExists() error {
	return _ERC20RollupUserLogic.Contract.RequireUnresolvedExists(&_ERC20RollupUserLogic.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) RequireUnresolvedExists() error {
	return _ERC20RollupUserLogic.Contract.RequireUnresolvedExists(&_ERC20RollupUserLogic.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.RequiredStake(&_ERC20RollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.RequiredStake(&_ERC20RollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.RollupDeploymentBlock(&_ERC20RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.RollupDeploymentBlock(&_ERC20RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RollupEventInbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.RollupEventInbox(&_ERC20RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.RollupEventInbox(&_ERC20RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) SequencerInbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.SequencerInbox(&_ERC20RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.SequencerInbox(&_ERC20RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) StakeToken() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.StakeToken(&_ERC20RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) StakeToken() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.StakeToken(&_ERC20RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) StakerCount() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.StakerCount(&_ERC20RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) StakerCount() (uint64, error) {
	return _ERC20RollupUserLogic.Contract.StakerCount(&_ERC20RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.TotalWithdrawableFunds(&_ERC20RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.TotalWithdrawableFunds(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ValidatorUtils() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorUtils(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ValidatorUtils() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorUtils(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorWalletCreator(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorWalletCreator(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_ERC20RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _ERC20RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_ERC20RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _ERC20RollupUserLogic.Contract.WasmModuleRoot(&_ERC20RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _ERC20RollupUserLogic.Contract.WasmModuleRoot(&_ERC20RollupUserLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.WithdrawableFunds(&_ERC20RollupUserLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.WithdrawableFunds(&_ERC20RollupUserLogic.CallOpts, user)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ZombieAddress(&_ERC20RollupUserLogic.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _ERC20RollupUserLogic.Contract.ZombieAddress(&_ERC20RollupUserLogic.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ZombieCount() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.ZombieCount(&_ERC20RollupUserLogic.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ZombieCount() (*big.Int, error) {
	return _ERC20RollupUserLogic.Contract.ZombieCount(&_ERC20RollupUserLogic.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _ERC20RollupUserLogic.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ZombieLatestStakedNode(&_ERC20RollupUserLogic.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _ERC20RollupUserLogic.Contract.ZombieLatestStakedNode(&_ERC20RollupUserLogic.CallOpts, zombieNum)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "addToDeposit", stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.AddToDeposit(&_ERC20RollupUserLogic.TransactOpts, stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.AddToDeposit(&_ERC20RollupUserLogic.TransactOpts, stakerAddress, tokenAmount)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) CompleteChallenge(opts *bind.TransactOpts, challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "completeChallenge", challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.CompleteChallenge(&_ERC20RollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.CompleteChallenge(&_ERC20RollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ConfirmNextNode(&_ERC20RollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ConfirmNextNode(&_ERC20RollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.CreateChallenge(&_ERC20RollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.CreateChallenge(&_ERC20RollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) NewStakeOnExistingNode(opts *bind.TransactOpts, tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "newStakeOnExistingNode", tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) NewStakeOnExistingNode(tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.NewStakeOnExistingNode(&_ERC20RollupUserLogic.TransactOpts, tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) NewStakeOnExistingNode(tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.NewStakeOnExistingNode(&_ERC20RollupUserLogic.TransactOpts, tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) NewStakeOnNewNode(opts *bind.TransactOpts, tokenAmount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "newStakeOnNewNode", tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) NewStakeOnNewNode(tokenAmount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.NewStakeOnNewNode(&_ERC20RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) NewStakeOnNewNode(tokenAmount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.NewStakeOnNewNode(&_ERC20RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ReduceDeposit(&_ERC20RollupUserLogic.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ReduceDeposit(&_ERC20RollupUserLogic.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RejectNextNode(&_ERC20RollupUserLogic.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RejectNextNode(&_ERC20RollupUserLogic.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveOldZombies(&_ERC20RollupUserLogic.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveOldZombies(&_ERC20RollupUserLogic.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_ERC20RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_ERC20RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_ERC20RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_ERC20RollupUserLogic.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveZombie(&_ERC20RollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.RemoveZombie(&_ERC20RollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ReturnOldDeposit(&_ERC20RollupUserLogic.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.ReturnOldDeposit(&_ERC20RollupUserLogic.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.StakeOnExistingNode(&_ERC20RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.StakeOnExistingNode(&_ERC20RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) StakeOnNewNode(opts *bind.TransactOpts, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.StakeOnNewNode(&_ERC20RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.StakeOnNewNode(&_ERC20RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupUserLogic.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.WithdrawStakerFunds(&_ERC20RollupUserLogic.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _ERC20RollupUserLogic.Contract.WithdrawStakerFunds(&_ERC20RollupUserLogic.TransactOpts)
}

// ERC20RollupUserLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicAdminChangedIterator struct {
	Event *ERC20RollupUserLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicAdminChanged represents a AdminChanged event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*ERC20RollupUserLogicAdminChangedIterator, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicAdminChangedIterator{contract: _ERC20RollupUserLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicAdminChanged)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseAdminChanged(log types.Log) (*ERC20RollupUserLogicAdminChanged, error) {
	event := new(ERC20RollupUserLogicAdminChanged)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicBeaconUpgradedIterator struct {
	Event *ERC20RollupUserLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicBeaconUpgraded represents a BeaconUpgraded event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ERC20RollupUserLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicBeaconUpgradedIterator{contract: _ERC20RollupUserLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicBeaconUpgraded)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseBeaconUpgraded(log types.Log) (*ERC20RollupUserLogicBeaconUpgraded, error) {
	event := new(ERC20RollupUserLogicBeaconUpgraded)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeConfirmedIterator struct {
	Event *ERC20RollupUserLogicNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicNodeConfirmed represents a NodeConfirmed event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*ERC20RollupUserLogicNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicNodeConfirmedIterator{contract: _ERC20RollupUserLogic.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicNodeConfirmed)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseNodeConfirmed(log types.Log) (*ERC20RollupUserLogicNodeConfirmed, error) {
	event := new(ERC20RollupUserLogicNodeConfirmed)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeCreatedIterator struct {
	Event *ERC20RollupUserLogicNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicNodeCreated represents a NodeCreated event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          RollupLibAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*ERC20RollupUserLogicNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicNodeCreatedIterator{contract: _ERC20RollupUserLogic.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicNodeCreated)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseNodeCreated(log types.Log) (*ERC20RollupUserLogicNodeCreated, error) {
	event := new(ERC20RollupUserLogicNodeCreated)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeRejectedIterator struct {
	Event *ERC20RollupUserLogicNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicNodeRejected represents a NodeRejected event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*ERC20RollupUserLogicNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicNodeRejectedIterator{contract: _ERC20RollupUserLogic.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicNodeRejected)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseNodeRejected(log types.Log) (*ERC20RollupUserLogicNodeRejected, error) {
	event := new(ERC20RollupUserLogicNodeRejected)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicPausedIterator struct {
	Event *ERC20RollupUserLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicPaused represents a Paused event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*ERC20RollupUserLogicPausedIterator, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicPausedIterator{contract: _ERC20RollupUserLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicPaused) (event.Subscription, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicPaused)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParsePaused(log types.Log) (*ERC20RollupUserLogicPaused, error) {
	event := new(ERC20RollupUserLogicPaused)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicRollupChallengeStartedIterator struct {
	Event *ERC20RollupUserLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*ERC20RollupUserLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicRollupChallengeStartedIterator{contract: _ERC20RollupUserLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicRollupChallengeStarted)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*ERC20RollupUserLogicRollupChallengeStarted, error) {
	event := new(ERC20RollupUserLogicRollupChallengeStarted)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicRollupInitializedIterator struct {
	Event *ERC20RollupUserLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicRollupInitialized represents a RollupInitialized event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*ERC20RollupUserLogicRollupInitializedIterator, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicRollupInitializedIterator{contract: _ERC20RollupUserLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicRollupInitialized)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseRollupInitialized(log types.Log) (*ERC20RollupUserLogicRollupInitialized, error) {
	event := new(ERC20RollupUserLogicRollupInitialized)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUnpausedIterator struct {
	Event *ERC20RollupUserLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicUnpaused represents a Unpaused event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ERC20RollupUserLogicUnpausedIterator, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicUnpausedIterator{contract: _ERC20RollupUserLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicUnpaused)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseUnpaused(log types.Log) (*ERC20RollupUserLogicUnpaused, error) {
	event := new(ERC20RollupUserLogicUnpaused)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUpgradedIterator struct {
	Event *ERC20RollupUserLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicUpgraded represents a Upgraded event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ERC20RollupUserLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicUpgradedIterator{contract: _ERC20RollupUserLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicUpgraded)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseUpgraded(log types.Log) (*ERC20RollupUserLogicUpgraded, error) {
	event := new(ERC20RollupUserLogicUpgraded)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUpgradedSecondaryIterator struct {
	Event *ERC20RollupUserLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicUpgradedSecondary represents a UpgradedSecondary event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*ERC20RollupUserLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicUpgradedSecondaryIterator{contract: _ERC20RollupUserLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicUpgradedSecondary)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseUpgradedSecondary(log types.Log) (*ERC20RollupUserLogicUpgradedSecondary, error) {
	event := new(ERC20RollupUserLogicUpgradedSecondary)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUserStakeUpdatedIterator struct {
	Event *ERC20RollupUserLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicUserStakeUpdated represents a UserStakeUpdated event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*ERC20RollupUserLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicUserStakeUpdatedIterator{contract: _ERC20RollupUserLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicUserStakeUpdated)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseUserStakeUpdated(log types.Log) (*ERC20RollupUserLogicUserStakeUpdated, error) {
	event := new(ERC20RollupUserLogicUserStakeUpdated)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *ERC20RollupUserLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupUserLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupUserLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupUserLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the ERC20RollupUserLogic contract.
type ERC20RollupUserLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupUserLogicUserWithdrawableFundsUpdatedIterator{contract: _ERC20RollupUserLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *ERC20RollupUserLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _ERC20RollupUserLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupUserLogicUserWithdrawableFundsUpdated)
				if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_ERC20RollupUserLogic *ERC20RollupUserLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*ERC20RollupUserLogicUserWithdrawableFundsUpdated, error) {
	event := new(ERC20RollupUserLogicUserWithdrawableFundsUpdated)
	if err := _ERC20RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminMetaData contains all meta data concerning the IRollupAdmin contract.
var IRollupAdminMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"prevNode\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stacker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stackerA\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stackerB\",\"type\":\"address[]\"}],\"name\":\"forceResolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"extraChallengeTimeBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInbox\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"contractIRollupAdmin\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newExtraTimeBlocks\",\"type\":\"uint64\"}],\"name\":\"setExtraChallengeTimeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakeToken\",\"type\":\"address\"}],\"name\":\"setStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupAdminMetaData.ABI instead.
var IRollupAdminABI = IRollupAdminMetaData.ABI

// IRollupAdmin is an auto generated Go binding around an Ethereum contract.
type IRollupAdmin struct {
	IRollupAdminCaller     // Read-only binding to the contract
	IRollupAdminTransactor // Write-only binding to the contract
	IRollupAdminFilterer   // Log filterer for contract events
}

// IRollupAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupAdminSession struct {
	Contract     *IRollupAdmin     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupAdminCallerSession struct {
	Contract *IRollupAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IRollupAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupAdminTransactorSession struct {
	Contract     *IRollupAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IRollupAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupAdminRaw struct {
	Contract *IRollupAdmin // Generic contract binding to access the raw methods on
}

// IRollupAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupAdminCallerRaw struct {
	Contract *IRollupAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupAdminTransactorRaw struct {
	Contract *IRollupAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupAdmin creates a new instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdmin(address common.Address, backend bind.ContractBackend) (*IRollupAdmin, error) {
	contract, err := bindIRollupAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupAdmin{IRollupAdminCaller: IRollupAdminCaller{contract: contract}, IRollupAdminTransactor: IRollupAdminTransactor{contract: contract}, IRollupAdminFilterer: IRollupAdminFilterer{contract: contract}}, nil
}

// NewIRollupAdminCaller creates a new read-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminCaller(address common.Address, caller bind.ContractCaller) (*IRollupAdminCaller, error) {
	contract, err := bindIRollupAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminCaller{contract: contract}, nil
}

// NewIRollupAdminTransactor creates a new write-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupAdminTransactor, error) {
	contract, err := bindIRollupAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminTransactor{contract: contract}, nil
}

// NewIRollupAdminFilterer creates a new log filterer instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupAdminFilterer, error) {
	contract, err := bindIRollupAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminFilterer{contract: contract}, nil
}

// bindIRollupAdmin binds a generic wrapper to an already deployed contract.
func bindIRollupAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRollupAdminABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.IRollupAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transact(opts, method, params...)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceConfirmNode(opts *bind.TransactOpts, nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceConfirmNode", nodeNum, blockHash, sendRoot)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceConfirmNode(nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmNode(&_IRollupAdmin.TransactOpts, nodeNum, blockHash, sendRoot)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceConfirmNode(nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmNode(&_IRollupAdmin.TransactOpts, nodeNum, blockHash, sendRoot)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceCreateNode(opts *bind.TransactOpts, prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceCreateNode", prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceCreateNode(prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateNode(&_IRollupAdmin.TransactOpts, prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceCreateNode(prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateNode(&_IRollupAdmin.TransactOpts, prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceRefundStaker(opts *bind.TransactOpts, stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceRefundStaker", stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stackerA, address[] stackerB) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceResolveChallenge(opts *bind.TransactOpts, stackerA []common.Address, stackerB []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceResolveChallenge", stackerA, stackerB)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stackerA, address[] stackerB) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceResolveChallenge(stackerA []common.Address, stackerB []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceResolveChallenge(&_IRollupAdmin.TransactOpts, stackerA, stackerB)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stackerA, address[] stackerB) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceResolveChallenge(stackerA []common.Address, stackerB []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceResolveChallenge(&_IRollupAdmin.TransactOpts, stackerA, stackerB)
}

// Initialize is a paid mutator transaction binding the contract method 0x29ce5f2b.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,uint64,(uint256,uint256,uint256,uint256)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x29ce5f2b.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,uint64,(uint256,uint256,uint256,uint256)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x29ce5f2b.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,uint64,(uint256,uint256,uint256,uint256)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetExtraChallengeTimeBlocks(opts *bind.TransactOpts, newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setExtraChallengeTimeBlocks", newExtraTimeBlocks)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_IRollupAdmin *IRollupAdminSession) SetExtraChallengeTimeBlocks(newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetExtraChallengeTimeBlocks(&_IRollupAdmin.TransactOpts, newExtraTimeBlocks)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetExtraChallengeTimeBlocks(newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetExtraChallengeTimeBlocks(&_IRollupAdmin.TransactOpts, newExtraTimeBlocks)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetStakeToken(opts *bind.TransactOpts, newStakeToken common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setStakeToken", newStakeToken)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_IRollupAdmin *IRollupAdminSession) SetStakeToken(newStakeToken common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetStakeToken(&_IRollupAdmin.TransactOpts, newStakeToken)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetStakeToken(newStakeToken common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetStakeToken(&_IRollupAdmin.TransactOpts, newStakeToken)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_IRollupAdmin *IRollupAdminTransactor) UpgradeBeacon(opts *bind.TransactOpts, beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "upgradeBeacon", beacon, newImplementation)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_IRollupAdmin *IRollupAdminSession) UpgradeBeacon(beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.UpgradeBeacon(&_IRollupAdmin.TransactOpts, beacon, newImplementation)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) UpgradeBeacon(beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.UpgradeBeacon(&_IRollupAdmin.TransactOpts, beacon, newImplementation)
}

// IRollupAdminOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the IRollupAdmin contract.
type IRollupAdminOwnerFunctionCalledIterator struct {
	Event *IRollupAdminOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the IRollupAdmin contract.
type IRollupAdminOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*IRollupAdminOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminOwnerFunctionCalledIterator{contract: _IRollupAdmin.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *IRollupAdminOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminOwnerFunctionCalled)
				if err := _IRollupAdmin.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) ParseOwnerFunctionCalled(log types.Log) (*IRollupAdminOwnerFunctionCalled, error) {
	event := new(IRollupAdminOwnerFunctionCalled)
	if err := _IRollupAdmin.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreMetaData contains all meta data concerning the IRollupCore contract.
var IRollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupCoreMetaData.ABI instead.
var IRollupCoreABI = IRollupCoreMetaData.ABI

// IRollupCore is an auto generated Go binding around an Ethereum contract.
type IRollupCore struct {
	IRollupCoreCaller     // Read-only binding to the contract
	IRollupCoreTransactor // Write-only binding to the contract
	IRollupCoreFilterer   // Log filterer for contract events
}

// IRollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupCoreSession struct {
	Contract     *IRollupCore      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupCoreCallerSession struct {
	Contract *IRollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupCoreTransactorSession struct {
	Contract     *IRollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupCoreRaw struct {
	Contract *IRollupCore // Generic contract binding to access the raw methods on
}

// IRollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupCoreCallerRaw struct {
	Contract *IRollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupCoreTransactorRaw struct {
	Contract *IRollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupCore creates a new instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCore(address common.Address, backend bind.ContractBackend) (*IRollupCore, error) {
	contract, err := bindIRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupCore{IRollupCoreCaller: IRollupCoreCaller{contract: contract}, IRollupCoreTransactor: IRollupCoreTransactor{contract: contract}, IRollupCoreFilterer: IRollupCoreFilterer{contract: contract}}, nil
}

// NewIRollupCoreCaller creates a new read-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*IRollupCoreCaller, error) {
	contract, err := bindIRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreCaller{contract: contract}, nil
}

// NewIRollupCoreTransactor creates a new write-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupCoreTransactor, error) {
	contract, err := bindIRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreTransactor{contract: contract}, nil
}

// NewIRollupCoreFilterer creates a new log filterer instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupCoreFilterer, error) {
	contract, err := bindIRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreFilterer{contract: contract}, nil
}

// bindIRollupCore binds a generic wrapper to an already deployed contract.
func bindIRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRollupCoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.IRollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreSession) ChallengeManager() (common.Address, error) {
	return _IRollupCore.Contract.ChallengeManager(&_IRollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupCore.Contract.ChallengeManager(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupCore.Contract.CurrentChallenge(&_IRollupCore.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupCore.Contract.CurrentChallenge(&_IRollupCore.CallOpts, staker)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupCore.Contract.ExtraChallengeTimeBlocks(&_IRollupCore.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupCore.Contract.ExtraChallengeTimeBlocks(&_IRollupCore.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupCore.Contract.FirstUnresolvedNode(&_IRollupCore.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupCore.Contract.FirstUnresolvedNode(&_IRollupCore.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupCore *IRollupCoreCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupCore *IRollupCoreSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupCore.Contract.GetNode(&_IRollupCore.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupCore *IRollupCoreCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupCore.Contract.GetNode(&_IRollupCore.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupCore *IRollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupCore *IRollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupCore *IRollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsZombie(&_IRollupCore.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsZombie(&_IRollupCore.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) LastStakeBlock() (uint64, error) {
	return _IRollupCore.Contract.LastStakeBlock(&_IRollupCore.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) LastStakeBlock() (uint64, error) {
	return _IRollupCore.Contract.LastStakeBlock(&_IRollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) LatestConfirmed() (uint64, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) LatestConfirmed() (uint64, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) LatestNodeCreated() (uint64, error) {
	return _IRollupCore.Contract.LatestNodeCreated(&_IRollupCore.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) LatestNodeCreated() (uint64, error) {
	return _IRollupCore.Contract.LatestNodeCreated(&_IRollupCore.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupCore.Contract.LatestStakedNode(&_IRollupCore.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupCore.Contract.LatestStakedNode(&_IRollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupCore *IRollupCoreSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupCore.Contract.NodeHasStaker(&_IRollupCore.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupCore.Contract.NodeHasStaker(&_IRollupCore.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupCore *IRollupCoreCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupCore *IRollupCoreSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupCore.Contract.ZombieAddress(&_IRollupCore.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupCore.Contract.ZombieAddress(&_IRollupCore.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) ZombieCount() (*big.Int, error) {
	return _IRollupCore.Contract.ZombieCount(&_IRollupCore.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) ZombieCount() (*big.Int, error) {
	return _IRollupCore.Contract.ZombieCount(&_IRollupCore.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupCore.Contract.ZombieLatestStakedNode(&_IRollupCore.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupCore.Contract.ZombieLatestStakedNode(&_IRollupCore.CallOpts, zombieNum)
}

// IRollupCoreNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the IRollupCore contract.
type IRollupCoreNodeConfirmedIterator struct {
	Event *IRollupCoreNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreNodeConfirmed represents a NodeConfirmed event raised by the IRollupCore contract.
type IRollupCoreNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupCoreNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreNodeConfirmedIterator{contract: _IRollupCore.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupCoreNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreNodeConfirmed)
				if err := _IRollupCore.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) ParseNodeConfirmed(log types.Log) (*IRollupCoreNodeConfirmed, error) {
	event := new(IRollupCoreNodeConfirmed)
	if err := _IRollupCore.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IRollupCore contract.
type IRollupCoreNodeCreatedIterator struct {
	Event *IRollupCoreNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreNodeCreated represents a NodeCreated event raised by the IRollupCore contract.
type IRollupCoreNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          RollupLibAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupCore *IRollupCoreFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IRollupCoreNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreNodeCreatedIterator{contract: _IRollupCore.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupCore *IRollupCoreFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IRollupCoreNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreNodeCreated)
				if err := _IRollupCore.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupCore *IRollupCoreFilterer) ParseNodeCreated(log types.Log) (*IRollupCoreNodeCreated, error) {
	event := new(IRollupCoreNodeCreated)
	if err := _IRollupCore.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the IRollupCore contract.
type IRollupCoreNodeRejectedIterator struct {
	Event *IRollupCoreNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreNodeRejected represents a NodeRejected event raised by the IRollupCore contract.
type IRollupCoreNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupCore *IRollupCoreFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupCoreNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreNodeRejectedIterator{contract: _IRollupCore.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupCore *IRollupCoreFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *IRollupCoreNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreNodeRejected)
				if err := _IRollupCore.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupCore *IRollupCoreFilterer) ParseNodeRejected(log types.Log) (*IRollupCoreNodeRejected, error) {
	event := new(IRollupCoreNodeRejected)
	if err := _IRollupCore.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStartedIterator struct {
	Event *IRollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupChallengeStartedIterator{contract: _IRollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupChallengeStarted)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupCoreRollupChallengeStarted, error) {
	event := new(IRollupCoreRollupChallengeStarted)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupCore contract.
type IRollupCoreRollupInitializedIterator struct {
	Event *IRollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupInitialized represents a RollupInitialized event raised by the IRollupCore contract.
type IRollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupInitializedIterator{contract: _IRollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupInitialized)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupInitialized(log types.Log) (*IRollupCoreRollupInitialized, error) {
	event := new(IRollupCoreRollupInitialized)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdatedIterator struct {
	Event *IRollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserStakeUpdatedIterator{contract: _IRollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserStakeUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupCoreUserStakeUpdated, error) {
	event := new(IRollupCoreUserStakeUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserWithdrawableFundsUpdatedIterator{contract: _IRollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserWithdrawableFundsUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(IRollupCoreUserWithdrawableFundsUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupEventInboxMetaData contains all meta data concerning the IRollupEventInbox contract.
var IRollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupEventInboxMetaData.ABI instead.
var IRollupEventInboxABI = IRollupEventInboxMetaData.ABI

// IRollupEventInbox is an auto generated Go binding around an Ethereum contract.
type IRollupEventInbox struct {
	IRollupEventInboxCaller     // Read-only binding to the contract
	IRollupEventInboxTransactor // Write-only binding to the contract
	IRollupEventInboxFilterer   // Log filterer for contract events
}

// IRollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupEventInboxSession struct {
	Contract     *IRollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IRollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupEventInboxCallerSession struct {
	Contract *IRollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IRollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupEventInboxTransactorSession struct {
	Contract     *IRollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IRollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupEventInboxRaw struct {
	Contract *IRollupEventInbox // Generic contract binding to access the raw methods on
}

// IRollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupEventInboxCallerRaw struct {
	Contract *IRollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactorRaw struct {
	Contract *IRollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupEventInbox creates a new instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInbox(address common.Address, backend bind.ContractBackend) (*IRollupEventInbox, error) {
	contract, err := bindIRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInbox{IRollupEventInboxCaller: IRollupEventInboxCaller{contract: contract}, IRollupEventInboxTransactor: IRollupEventInboxTransactor{contract: contract}, IRollupEventInboxFilterer: IRollupEventInboxFilterer{contract: contract}}, nil
}

// NewIRollupEventInboxCaller creates a new read-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*IRollupEventInboxCaller, error) {
	contract, err := bindIRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxCaller{contract: contract}, nil
}

// NewIRollupEventInboxTransactor creates a new write-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupEventInboxTransactor, error) {
	contract, err := bindIRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxTransactor{contract: contract}, nil
}

// NewIRollupEventInboxFilterer creates a new log filterer instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupEventInboxFilterer, error) {
	contract, err := bindIRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxFilterer{contract: contract}, nil
}

// bindIRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindIRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRollupEventInboxABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.IRollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) RollupInitialized(chainId *big.Int) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId)
}

// IRollupUserMetaData contains all meta data concerning the IRollupUser contract.
var IRollupUserMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedTimes\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"newStakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupUserABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupUserMetaData.ABI instead.
var IRollupUserABI = IRollupUserMetaData.ABI

// IRollupUser is an auto generated Go binding around an Ethereum contract.
type IRollupUser struct {
	IRollupUserCaller     // Read-only binding to the contract
	IRollupUserTransactor // Write-only binding to the contract
	IRollupUserFilterer   // Log filterer for contract events
}

// IRollupUserCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupUserCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupUserTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupUserFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupUserSession struct {
	Contract     *IRollupUser      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupUserCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupUserCallerSession struct {
	Contract *IRollupUserCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupUserTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupUserTransactorSession struct {
	Contract     *IRollupUserTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupUserRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupUserRaw struct {
	Contract *IRollupUser // Generic contract binding to access the raw methods on
}

// IRollupUserCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupUserCallerRaw struct {
	Contract *IRollupUserCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupUserTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupUserTransactorRaw struct {
	Contract *IRollupUserTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupUser creates a new instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUser(address common.Address, backend bind.ContractBackend) (*IRollupUser, error) {
	contract, err := bindIRollupUser(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupUser{IRollupUserCaller: IRollupUserCaller{contract: contract}, IRollupUserTransactor: IRollupUserTransactor{contract: contract}, IRollupUserFilterer: IRollupUserFilterer{contract: contract}}, nil
}

// NewIRollupUserCaller creates a new read-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserCaller(address common.Address, caller bind.ContractCaller) (*IRollupUserCaller, error) {
	contract, err := bindIRollupUser(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserCaller{contract: contract}, nil
}

// NewIRollupUserTransactor creates a new write-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupUserTransactor, error) {
	contract, err := bindIRollupUser(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserTransactor{contract: contract}, nil
}

// NewIRollupUserFilterer creates a new log filterer instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupUserFilterer, error) {
	contract, err := bindIRollupUser(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupUserFilterer{contract: contract}, nil
}

// bindIRollupUser binds a generic wrapper to an already deployed contract.
func bindIRollupUser(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRollupUserABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.IRollupUserCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserSession) ChallengeManager() (common.Address, error) {
	return _IRollupUser.Contract.ChallengeManager(&_IRollupUser.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupUser.Contract.ChallengeManager(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUser.Contract.CountStakedZombies(&_IRollupUser.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUser.Contract.CountStakedZombies(&_IRollupUser.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUser.Contract.CountZombiesStakedOnChildren(&_IRollupUser.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUser.Contract.CountZombiesStakedOnChildren(&_IRollupUser.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUser.Contract.CurrentChallenge(&_IRollupUser.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUser.Contract.CurrentChallenge(&_IRollupUser.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUser *IRollupUserSession) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUser.Contract.CurrentRequiredStake(&_IRollupUser.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUser.Contract.CurrentRequiredStake(&_IRollupUser.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUser.Contract.ExtraChallengeTimeBlocks(&_IRollupUser.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUser.Contract.ExtraChallengeTimeBlocks(&_IRollupUser.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUser *IRollupUserSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUser.Contract.FirstUnresolvedNode(&_IRollupUser.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUser.Contract.FirstUnresolvedNode(&_IRollupUser.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUser *IRollupUserCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUser *IRollupUserSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUser.Contract.GetNode(&_IRollupUser.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUser *IRollupUserCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUser.Contract.GetNode(&_IRollupUser.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUser *IRollupUserCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUser *IRollupUserSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUser *IRollupUserCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCaller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCallerSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUser *IRollupUserSession) IsERC20Enabled() (bool, error) {
	return _IRollupUser.Contract.IsERC20Enabled(&_IRollupUser.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsERC20Enabled() (bool, error) {
	return _IRollupUser.Contract.IsERC20Enabled(&_IRollupUser.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsZombie(&_IRollupUser.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsZombie(&_IRollupUser.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUser *IRollupUserSession) LastStakeBlock() (uint64, error) {
	return _IRollupUser.Contract.LastStakeBlock(&_IRollupUser.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) LastStakeBlock() (uint64, error) {
	return _IRollupUser.Contract.LastStakeBlock(&_IRollupUser.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUser *IRollupUserSession) LatestConfirmed() (uint64, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) LatestConfirmed() (uint64, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUser *IRollupUserSession) LatestNodeCreated() (uint64, error) {
	return _IRollupUser.Contract.LatestNodeCreated(&_IRollupUser.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) LatestNodeCreated() (uint64, error) {
	return _IRollupUser.Contract.LatestNodeCreated(&_IRollupUser.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUser.Contract.LatestStakedNode(&_IRollupUser.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUser.Contract.LatestStakedNode(&_IRollupUser.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUser *IRollupUserCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUser *IRollupUserSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUser.Contract.NodeHasStaker(&_IRollupUser.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUser.Contract.NodeHasStaker(&_IRollupUser.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUser *IRollupUserCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUser *IRollupUserSession) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUser.Contract.RequireUnresolved(&_IRollupUser.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUser *IRollupUserCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUser.Contract.RequireUnresolved(&_IRollupUser.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUser *IRollupUserCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUser *IRollupUserSession) RequireUnresolvedExists() error {
	return _IRollupUser.Contract.RequireUnresolvedExists(&_IRollupUser.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUser *IRollupUserCallerSession) RequireUnresolvedExists() error {
	return _IRollupUser.Contract.RequireUnresolvedExists(&_IRollupUser.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUser *IRollupUserSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUser.Contract.RequiredStake(&_IRollupUser.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUser.Contract.RequiredStake(&_IRollupUser.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUser *IRollupUserCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUser *IRollupUserSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUser.Contract.ZombieAddress(&_IRollupUser.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUser *IRollupUserCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUser.Contract.ZombieAddress(&_IRollupUser.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUser *IRollupUserSession) ZombieCount() (*big.Int, error) {
	return _IRollupUser.Contract.ZombieCount(&_IRollupUser.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) ZombieCount() (*big.Int, error) {
	return _IRollupUser.Contract.ZombieCount(&_IRollupUser.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUser *IRollupUserSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUser.Contract.ZombieLatestStakedNode(&_IRollupUser.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUser.Contract.ZombieLatestStakedNode(&_IRollupUser.CallOpts, zombieNum)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_IRollupUser *IRollupUserTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "addToDeposit", stakerAddress)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_IRollupUser *IRollupUserSession) AddToDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_IRollupUser *IRollupUserTransactorSession) AddToDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUser *IRollupUserTransactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUser *IRollupUserSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmNextNode(&_IRollupUser.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUser *IRollupUserTransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmNextNode(&_IRollupUser.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUser *IRollupUserTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUser *IRollupUserSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.CreateChallenge(&_IRollupUser.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUser *IRollupUserTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.CreateChallenge(&_IRollupUser.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_IRollupUser *IRollupUserTransactor) NewStakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStakeOnExistingNode", nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_IRollupUser *IRollupUserSession) NewStakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnExistingNode(&_IRollupUser.TransactOpts, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnExistingNode(&_IRollupUser.TransactOpts, nodeNum, nodeHash)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_IRollupUser *IRollupUserTransactor) NewStakeOnNewNode(opts *bind.TransactOpts, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_IRollupUser *IRollupUserSession) NewStakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewNode(&_IRollupUser.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewNode(&_IRollupUser.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUser *IRollupUserTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUser *IRollupUserSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.RejectNextNode(&_IRollupUser.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUser *IRollupUserTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.RejectNextNode(&_IRollupUser.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUser *IRollupUserTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUser *IRollupUserSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveOldZombies(&_IRollupUser.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveOldZombies(&_IRollupUser.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUser *IRollupUserTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUser *IRollupUserSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveZombie(&_IRollupUser.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveZombie(&_IRollupUser.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUser *IRollupUserTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUser *IRollupUserSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUser *IRollupUserTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUser *IRollupUserTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUser *IRollupUserSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnExistingNode(&_IRollupUser.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUser *IRollupUserTransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnExistingNode(&_IRollupUser.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUser *IRollupUserTransactor) StakeOnNewNode(opts *bind.TransactOpts, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUser *IRollupUserSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewNode(&_IRollupUser.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUser *IRollupUserTransactorSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewNode(&_IRollupUser.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// IRollupUserNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the IRollupUser contract.
type IRollupUserNodeConfirmedIterator struct {
	Event *IRollupUserNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserNodeConfirmed represents a NodeConfirmed event raised by the IRollupUser contract.
type IRollupUserNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserNodeConfirmedIterator{contract: _IRollupUser.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupUserNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserNodeConfirmed)
				if err := _IRollupUser.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) ParseNodeConfirmed(log types.Log) (*IRollupUserNodeConfirmed, error) {
	event := new(IRollupUserNodeConfirmed)
	if err := _IRollupUser.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IRollupUser contract.
type IRollupUserNodeCreatedIterator struct {
	Event *IRollupUserNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserNodeCreated represents a NodeCreated event raised by the IRollupUser contract.
type IRollupUserNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          RollupLibAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUser *IRollupUserFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IRollupUserNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserNodeCreatedIterator{contract: _IRollupUser.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUser *IRollupUserFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IRollupUserNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserNodeCreated)
				if err := _IRollupUser.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUser *IRollupUserFilterer) ParseNodeCreated(log types.Log) (*IRollupUserNodeCreated, error) {
	event := new(IRollupUserNodeCreated)
	if err := _IRollupUser.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the IRollupUser contract.
type IRollupUserNodeRejectedIterator struct {
	Event *IRollupUserNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserNodeRejected represents a NodeRejected event raised by the IRollupUser contract.
type IRollupUserNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUser *IRollupUserFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserNodeRejectedIterator{contract: _IRollupUser.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUser *IRollupUserFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *IRollupUserNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserNodeRejected)
				if err := _IRollupUser.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUser *IRollupUserFilterer) ParseNodeRejected(log types.Log) (*IRollupUserNodeRejected, error) {
	event := new(IRollupUserNodeRejected)
	if err := _IRollupUser.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupUser contract.
type IRollupUserRollupChallengeStartedIterator struct {
	Event *IRollupUserRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupUser contract.
type IRollupUserRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUser *IRollupUserFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupUserRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupChallengeStartedIterator{contract: _IRollupUser.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUser *IRollupUserFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupChallengeStarted)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUser *IRollupUserFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupUserRollupChallengeStarted, error) {
	event := new(IRollupUserRollupChallengeStarted)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupUser contract.
type IRollupUserRollupInitializedIterator struct {
	Event *IRollupUserRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupInitialized represents a RollupInitialized event raised by the IRollupUser contract.
type IRollupUserRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupUserRollupInitializedIterator, error) {

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupInitializedIterator{contract: _IRollupUser.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupInitialized)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) ParseRollupInitialized(log types.Log) (*IRollupUserRollupInitialized, error) {
	event := new(IRollupUserRollupInitialized)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupUser contract.
type IRollupUserUserStakeUpdatedIterator struct {
	Event *IRollupUserUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupUser contract.
type IRollupUserUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserStakeUpdatedIterator{contract: _IRollupUser.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserStakeUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupUserUserStakeUpdated, error) {
	event := new(IRollupUserUserStakeUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupUserUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserWithdrawableFundsUpdatedIterator{contract: _IRollupUser.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserWithdrawableFundsUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupUserUserWithdrawableFundsUpdated, error) {
	event := new(IRollupUserUserWithdrawableFundsUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsMetaData contains all meta data concerning the IRollupUserAbs contract.
var IRollupUserAbsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedTimes\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupUserAbsABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupUserAbsMetaData.ABI instead.
var IRollupUserAbsABI = IRollupUserAbsMetaData.ABI

// IRollupUserAbs is an auto generated Go binding around an Ethereum contract.
type IRollupUserAbs struct {
	IRollupUserAbsCaller     // Read-only binding to the contract
	IRollupUserAbsTransactor // Write-only binding to the contract
	IRollupUserAbsFilterer   // Log filterer for contract events
}

// IRollupUserAbsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupUserAbsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserAbsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupUserAbsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserAbsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupUserAbsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserAbsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupUserAbsSession struct {
	Contract     *IRollupUserAbs   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupUserAbsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupUserAbsCallerSession struct {
	Contract *IRollupUserAbsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IRollupUserAbsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupUserAbsTransactorSession struct {
	Contract     *IRollupUserAbsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IRollupUserAbsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupUserAbsRaw struct {
	Contract *IRollupUserAbs // Generic contract binding to access the raw methods on
}

// IRollupUserAbsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupUserAbsCallerRaw struct {
	Contract *IRollupUserAbsCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupUserAbsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupUserAbsTransactorRaw struct {
	Contract *IRollupUserAbsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupUserAbs creates a new instance of IRollupUserAbs, bound to a specific deployed contract.
func NewIRollupUserAbs(address common.Address, backend bind.ContractBackend) (*IRollupUserAbs, error) {
	contract, err := bindIRollupUserAbs(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbs{IRollupUserAbsCaller: IRollupUserAbsCaller{contract: contract}, IRollupUserAbsTransactor: IRollupUserAbsTransactor{contract: contract}, IRollupUserAbsFilterer: IRollupUserAbsFilterer{contract: contract}}, nil
}

// NewIRollupUserAbsCaller creates a new read-only instance of IRollupUserAbs, bound to a specific deployed contract.
func NewIRollupUserAbsCaller(address common.Address, caller bind.ContractCaller) (*IRollupUserAbsCaller, error) {
	contract, err := bindIRollupUserAbs(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsCaller{contract: contract}, nil
}

// NewIRollupUserAbsTransactor creates a new write-only instance of IRollupUserAbs, bound to a specific deployed contract.
func NewIRollupUserAbsTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupUserAbsTransactor, error) {
	contract, err := bindIRollupUserAbs(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsTransactor{contract: contract}, nil
}

// NewIRollupUserAbsFilterer creates a new log filterer instance of IRollupUserAbs, bound to a specific deployed contract.
func NewIRollupUserAbsFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupUserAbsFilterer, error) {
	contract, err := bindIRollupUserAbs(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsFilterer{contract: contract}, nil
}

// bindIRollupUserAbs binds a generic wrapper to an already deployed contract.
func bindIRollupUserAbs(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRollupUserAbsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUserAbs *IRollupUserAbsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUserAbs.Contract.IRollupUserAbsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUserAbs *IRollupUserAbsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.IRollupUserAbsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUserAbs *IRollupUserAbsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.IRollupUserAbsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUserAbs *IRollupUserAbsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUserAbs.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUserAbs *IRollupUserAbsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUserAbs *IRollupUserAbsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUserAbs.Contract.AmountStaked(&_IRollupUserAbs.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUserAbs.Contract.AmountStaked(&_IRollupUserAbs.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) BaseStake() (*big.Int, error) {
	return _IRollupUserAbs.Contract.BaseStake(&_IRollupUserAbs.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupUserAbs.Contract.BaseStake(&_IRollupUserAbs.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) Bridge() (common.Address, error) {
	return _IRollupUserAbs.Contract.Bridge(&_IRollupUserAbs.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) Bridge() (common.Address, error) {
	return _IRollupUserAbs.Contract.Bridge(&_IRollupUserAbs.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) ChainId() (*big.Int, error) {
	return _IRollupUserAbs.Contract.ChainId(&_IRollupUserAbs.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ChainId() (*big.Int, error) {
	return _IRollupUserAbs.Contract.ChainId(&_IRollupUserAbs.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) ChallengeManager() (common.Address, error) {
	return _IRollupUserAbs.Contract.ChallengeManager(&_IRollupUserAbs.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupUserAbs.Contract.ChallengeManager(&_IRollupUserAbs.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUserAbs.Contract.ConfirmPeriodBlocks(&_IRollupUserAbs.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUserAbs.Contract.ConfirmPeriodBlocks(&_IRollupUserAbs.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.CountStakedZombies(&_IRollupUserAbs.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.CountStakedZombies(&_IRollupUserAbs.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.CountZombiesStakedOnChildren(&_IRollupUserAbs.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.CountZombiesStakedOnChildren(&_IRollupUserAbs.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUserAbs.Contract.CurrentChallenge(&_IRollupUserAbs.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUserAbs.Contract.CurrentChallenge(&_IRollupUserAbs.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUserAbs.Contract.CurrentRequiredStake(&_IRollupUserAbs.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUserAbs.Contract.CurrentRequiredStake(&_IRollupUserAbs.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUserAbs.Contract.ExtraChallengeTimeBlocks(&_IRollupUserAbs.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUserAbs.Contract.ExtraChallengeTimeBlocks(&_IRollupUserAbs.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUserAbs.Contract.FirstUnresolvedNode(&_IRollupUserAbs.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUserAbs.Contract.FirstUnresolvedNode(&_IRollupUserAbs.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserAbs *IRollupUserAbsCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserAbs *IRollupUserAbsSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUserAbs.Contract.GetNode(&_IRollupUserAbs.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserAbs *IRollupUserAbsCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUserAbs.Contract.GetNode(&_IRollupUserAbs.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserAbs *IRollupUserAbsCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserAbs *IRollupUserAbsSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUserAbs.Contract.GetStaker(&_IRollupUserAbs.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserAbs *IRollupUserAbsCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUserAbs.Contract.GetStaker(&_IRollupUserAbs.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUserAbs.Contract.GetStakerAddress(&_IRollupUserAbs.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUserAbs.Contract.GetStakerAddress(&_IRollupUserAbs.CallOpts, stakerNum)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserAbs *IRollupUserAbsCaller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserAbs *IRollupUserAbsSession) Initialize(stakeToken common.Address) error {
	return _IRollupUserAbs.Contract.Initialize(&_IRollupUserAbs.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserAbs *IRollupUserAbsCallerSession) Initialize(stakeToken common.Address) error {
	return _IRollupUserAbs.Contract.Initialize(&_IRollupUserAbs.CallOpts, stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) IsERC20Enabled() (bool, error) {
	return _IRollupUserAbs.Contract.IsERC20Enabled(&_IRollupUserAbs.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) IsERC20Enabled() (bool, error) {
	return _IRollupUserAbs.Contract.IsERC20Enabled(&_IRollupUserAbs.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsStaked(&_IRollupUserAbs.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsStaked(&_IRollupUserAbs.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsValidator(&_IRollupUserAbs.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsValidator(&_IRollupUserAbs.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsZombie(&_IRollupUserAbs.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.IsZombie(&_IRollupUserAbs.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) LastStakeBlock() (uint64, error) {
	return _IRollupUserAbs.Contract.LastStakeBlock(&_IRollupUserAbs.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) LastStakeBlock() (uint64, error) {
	return _IRollupUserAbs.Contract.LastStakeBlock(&_IRollupUserAbs.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) LatestConfirmed() (uint64, error) {
	return _IRollupUserAbs.Contract.LatestConfirmed(&_IRollupUserAbs.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) LatestConfirmed() (uint64, error) {
	return _IRollupUserAbs.Contract.LatestConfirmed(&_IRollupUserAbs.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) LatestNodeCreated() (uint64, error) {
	return _IRollupUserAbs.Contract.LatestNodeCreated(&_IRollupUserAbs.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) LatestNodeCreated() (uint64, error) {
	return _IRollupUserAbs.Contract.LatestNodeCreated(&_IRollupUserAbs.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUserAbs.Contract.LatestStakedNode(&_IRollupUserAbs.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUserAbs.Contract.LatestStakedNode(&_IRollupUserAbs.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUserAbs.Contract.LoserStakeEscrow(&_IRollupUserAbs.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUserAbs.Contract.LoserStakeEscrow(&_IRollupUserAbs.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUserAbs.Contract.MinimumAssertionPeriod(&_IRollupUserAbs.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUserAbs.Contract.MinimumAssertionPeriod(&_IRollupUserAbs.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.NodeHasStaker(&_IRollupUserAbs.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUserAbs.Contract.NodeHasStaker(&_IRollupUserAbs.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) Outbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.Outbox(&_IRollupUserAbs.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) Outbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.Outbox(&_IRollupUserAbs.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) Owner() (common.Address, error) {
	return _IRollupUserAbs.Contract.Owner(&_IRollupUserAbs.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) Owner() (common.Address, error) {
	return _IRollupUserAbs.Contract.Owner(&_IRollupUserAbs.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserAbs *IRollupUserAbsCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUserAbs.Contract.RequireUnresolved(&_IRollupUserAbs.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserAbs *IRollupUserAbsCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUserAbs.Contract.RequireUnresolved(&_IRollupUserAbs.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserAbs *IRollupUserAbsCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RequireUnresolvedExists() error {
	return _IRollupUserAbs.Contract.RequireUnresolvedExists(&_IRollupUserAbs.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserAbs *IRollupUserAbsCallerSession) RequireUnresolvedExists() error {
	return _IRollupUserAbs.Contract.RequireUnresolvedExists(&_IRollupUserAbs.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.RequiredStake(&_IRollupUserAbs.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUserAbs.Contract.RequiredStake(&_IRollupUserAbs.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.RollupEventInbox(&_IRollupUserAbs.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.RollupEventInbox(&_IRollupUserAbs.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) SequencerInbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.SequencerInbox(&_IRollupUserAbs.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupUserAbs.Contract.SequencerInbox(&_IRollupUserAbs.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) StakeToken() (common.Address, error) {
	return _IRollupUserAbs.Contract.StakeToken(&_IRollupUserAbs.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) StakeToken() (common.Address, error) {
	return _IRollupUserAbs.Contract.StakeToken(&_IRollupUserAbs.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) StakerCount() (uint64, error) {
	return _IRollupUserAbs.Contract.StakerCount(&_IRollupUserAbs.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) StakerCount() (uint64, error) {
	return _IRollupUserAbs.Contract.StakerCount(&_IRollupUserAbs.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUserAbs.Contract.ValidatorWhitelistDisabled(&_IRollupUserAbs.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUserAbs.Contract.ValidatorWhitelistDisabled(&_IRollupUserAbs.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserAbs *IRollupUserAbsCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserAbs *IRollupUserAbsSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUserAbs.Contract.WasmModuleRoot(&_IRollupUserAbs.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUserAbs.Contract.WasmModuleRoot(&_IRollupUserAbs.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUserAbs.Contract.WithdrawableFunds(&_IRollupUserAbs.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUserAbs.Contract.WithdrawableFunds(&_IRollupUserAbs.CallOpts, owner)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUserAbs.Contract.ZombieAddress(&_IRollupUserAbs.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUserAbs.Contract.ZombieAddress(&_IRollupUserAbs.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) ZombieCount() (*big.Int, error) {
	return _IRollupUserAbs.Contract.ZombieCount(&_IRollupUserAbs.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ZombieCount() (*big.Int, error) {
	return _IRollupUserAbs.Contract.ZombieCount(&_IRollupUserAbs.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _IRollupUserAbs.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUserAbs.Contract.ZombieLatestStakedNode(&_IRollupUserAbs.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserAbs *IRollupUserAbsCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUserAbs.Contract.ZombieLatestStakedNode(&_IRollupUserAbs.CallOpts, zombieNum)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ConfirmNextNode(&_IRollupUserAbs.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ConfirmNextNode(&_IRollupUserAbs.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.CreateChallenge(&_IRollupUserAbs.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.CreateChallenge(&_IRollupUserAbs.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ReduceDeposit(&_IRollupUserAbs.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ReduceDeposit(&_IRollupUserAbs.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RejectNextNode(&_IRollupUserAbs.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RejectNextNode(&_IRollupUserAbs.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveOldZombies(&_IRollupUserAbs.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveOldZombies(&_IRollupUserAbs.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveWhitelistAfterFork(&_IRollupUserAbs.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveWhitelistAfterFork(&_IRollupUserAbs.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUserAbs.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUserAbs.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveZombie(&_IRollupUserAbs.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.RemoveZombie(&_IRollupUserAbs.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ReturnOldDeposit(&_IRollupUserAbs.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.ReturnOldDeposit(&_IRollupUserAbs.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.StakeOnExistingNode(&_IRollupUserAbs.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.StakeOnExistingNode(&_IRollupUserAbs.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactor) StakeOnNewNode(opts *bind.TransactOpts, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserAbs *IRollupUserAbsSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.StakeOnNewNode(&_IRollupUserAbs.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.StakeOnNewNode(&_IRollupUserAbs.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserAbs.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.WithdrawStakerFunds(&_IRollupUserAbs.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserAbs *IRollupUserAbsTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUserAbs.Contract.WithdrawStakerFunds(&_IRollupUserAbs.TransactOpts)
}

// IRollupUserAbsNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeConfirmedIterator struct {
	Event *IRollupUserAbsNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsNodeConfirmed represents a NodeConfirmed event raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserAbsNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsNodeConfirmedIterator{contract: _IRollupUserAbs.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsNodeConfirmed)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseNodeConfirmed(log types.Log) (*IRollupUserAbsNodeConfirmed, error) {
	event := new(IRollupUserAbsNodeConfirmed)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeCreatedIterator struct {
	Event *IRollupUserAbsNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsNodeCreated represents a NodeCreated event raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          RollupLibAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IRollupUserAbsNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsNodeCreatedIterator{contract: _IRollupUserAbs.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsNodeCreated)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseNodeCreated(log types.Log) (*IRollupUserAbsNodeCreated, error) {
	event := new(IRollupUserAbsNodeCreated)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeRejectedIterator struct {
	Event *IRollupUserAbsNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsNodeRejected represents a NodeRejected event raised by the IRollupUserAbs contract.
type IRollupUserAbsNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserAbsNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsNodeRejectedIterator{contract: _IRollupUserAbs.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsNodeRejected)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseNodeRejected(log types.Log) (*IRollupUserAbsNodeRejected, error) {
	event := new(IRollupUserAbsNodeRejected)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupUserAbs contract.
type IRollupUserAbsRollupChallengeStartedIterator struct {
	Event *IRollupUserAbsRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupUserAbs contract.
type IRollupUserAbsRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupUserAbsRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsRollupChallengeStartedIterator{contract: _IRollupUserAbs.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsRollupChallengeStarted)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupUserAbsRollupChallengeStarted, error) {
	event := new(IRollupUserAbsRollupChallengeStarted)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupUserAbs contract.
type IRollupUserAbsRollupInitializedIterator struct {
	Event *IRollupUserAbsRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsRollupInitialized represents a RollupInitialized event raised by the IRollupUserAbs contract.
type IRollupUserAbsRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupUserAbsRollupInitializedIterator, error) {

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsRollupInitializedIterator{contract: _IRollupUserAbs.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsRollupInitialized)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseRollupInitialized(log types.Log) (*IRollupUserAbsRollupInitialized, error) {
	event := new(IRollupUserAbsRollupInitialized)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupUserAbs contract.
type IRollupUserAbsUserStakeUpdatedIterator struct {
	Event *IRollupUserAbsUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupUserAbs contract.
type IRollupUserAbsUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserAbsUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsUserStakeUpdatedIterator{contract: _IRollupUserAbs.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsUserStakeUpdated)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupUserAbsUserStakeUpdated, error) {
	event := new(IRollupUserAbsUserStakeUpdated)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAbsUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupUserAbs contract.
type IRollupUserAbsUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupUserAbsUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAbsUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAbsUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAbsUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAbsUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAbsUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAbsUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupUserAbs contract.
type IRollupUserAbsUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserAbsUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAbsUserWithdrawableFundsUpdatedIterator{contract: _IRollupUserAbs.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserAbsUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserAbs.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAbsUserWithdrawableFundsUpdated)
				if err := _IRollupUserAbs.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserAbs *IRollupUserAbsFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupUserAbsUserWithdrawableFundsUpdated, error) {
	event := new(IRollupUserAbsUserWithdrawableFundsUpdated)
	if err := _IRollupUserAbs.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20MetaData contains all meta data concerning the IRollupUserERC20 contract.
var IRollupUserERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedTimes\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"newStakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupUserERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupUserERC20MetaData.ABI instead.
var IRollupUserERC20ABI = IRollupUserERC20MetaData.ABI

// IRollupUserERC20 is an auto generated Go binding around an Ethereum contract.
type IRollupUserERC20 struct {
	IRollupUserERC20Caller     // Read-only binding to the contract
	IRollupUserERC20Transactor // Write-only binding to the contract
	IRollupUserERC20Filterer   // Log filterer for contract events
}

// IRollupUserERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupUserERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupUserERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupUserERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupUserERC20Session struct {
	Contract     *IRollupUserERC20 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupUserERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupUserERC20CallerSession struct {
	Contract *IRollupUserERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// IRollupUserERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupUserERC20TransactorSession struct {
	Contract     *IRollupUserERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IRollupUserERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupUserERC20Raw struct {
	Contract *IRollupUserERC20 // Generic contract binding to access the raw methods on
}

// IRollupUserERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupUserERC20CallerRaw struct {
	Contract *IRollupUserERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IRollupUserERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupUserERC20TransactorRaw struct {
	Contract *IRollupUserERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupUserERC20 creates a new instance of IRollupUserERC20, bound to a specific deployed contract.
func NewIRollupUserERC20(address common.Address, backend bind.ContractBackend) (*IRollupUserERC20, error) {
	contract, err := bindIRollupUserERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20{IRollupUserERC20Caller: IRollupUserERC20Caller{contract: contract}, IRollupUserERC20Transactor: IRollupUserERC20Transactor{contract: contract}, IRollupUserERC20Filterer: IRollupUserERC20Filterer{contract: contract}}, nil
}

// NewIRollupUserERC20Caller creates a new read-only instance of IRollupUserERC20, bound to a specific deployed contract.
func NewIRollupUserERC20Caller(address common.Address, caller bind.ContractCaller) (*IRollupUserERC20Caller, error) {
	contract, err := bindIRollupUserERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20Caller{contract: contract}, nil
}

// NewIRollupUserERC20Transactor creates a new write-only instance of IRollupUserERC20, bound to a specific deployed contract.
func NewIRollupUserERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IRollupUserERC20Transactor, error) {
	contract, err := bindIRollupUserERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20Transactor{contract: contract}, nil
}

// NewIRollupUserERC20Filterer creates a new log filterer instance of IRollupUserERC20, bound to a specific deployed contract.
func NewIRollupUserERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IRollupUserERC20Filterer, error) {
	contract, err := bindIRollupUserERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20Filterer{contract: contract}, nil
}

// bindIRollupUserERC20 binds a generic wrapper to an already deployed contract.
func bindIRollupUserERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRollupUserERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUserERC20 *IRollupUserERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUserERC20.Contract.IRollupUserERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUserERC20 *IRollupUserERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.IRollupUserERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUserERC20 *IRollupUserERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.IRollupUserERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUserERC20 *IRollupUserERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUserERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUserERC20 *IRollupUserERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUserERC20 *IRollupUserERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUserERC20.Contract.AmountStaked(&_IRollupUserERC20.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUserERC20.Contract.AmountStaked(&_IRollupUserERC20.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) BaseStake() (*big.Int, error) {
	return _IRollupUserERC20.Contract.BaseStake(&_IRollupUserERC20.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) BaseStake() (*big.Int, error) {
	return _IRollupUserERC20.Contract.BaseStake(&_IRollupUserERC20.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) Bridge() (common.Address, error) {
	return _IRollupUserERC20.Contract.Bridge(&_IRollupUserERC20.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) Bridge() (common.Address, error) {
	return _IRollupUserERC20.Contract.Bridge(&_IRollupUserERC20.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) ChainId() (*big.Int, error) {
	return _IRollupUserERC20.Contract.ChainId(&_IRollupUserERC20.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ChainId() (*big.Int, error) {
	return _IRollupUserERC20.Contract.ChainId(&_IRollupUserERC20.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) ChallengeManager() (common.Address, error) {
	return _IRollupUserERC20.Contract.ChallengeManager(&_IRollupUserERC20.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupUserERC20.Contract.ChallengeManager(&_IRollupUserERC20.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUserERC20.Contract.ConfirmPeriodBlocks(&_IRollupUserERC20.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUserERC20.Contract.ConfirmPeriodBlocks(&_IRollupUserERC20.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.CountStakedZombies(&_IRollupUserERC20.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.CountStakedZombies(&_IRollupUserERC20.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.CountZombiesStakedOnChildren(&_IRollupUserERC20.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.CountZombiesStakedOnChildren(&_IRollupUserERC20.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUserERC20.Contract.CurrentChallenge(&_IRollupUserERC20.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _IRollupUserERC20.Contract.CurrentChallenge(&_IRollupUserERC20.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUserERC20.Contract.CurrentRequiredStake(&_IRollupUserERC20.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _IRollupUserERC20.Contract.CurrentRequiredStake(&_IRollupUserERC20.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUserERC20.Contract.ExtraChallengeTimeBlocks(&_IRollupUserERC20.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _IRollupUserERC20.Contract.ExtraChallengeTimeBlocks(&_IRollupUserERC20.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUserERC20.Contract.FirstUnresolvedNode(&_IRollupUserERC20.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) FirstUnresolvedNode() (uint64, error) {
	return _IRollupUserERC20.Contract.FirstUnresolvedNode(&_IRollupUserERC20.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserERC20 *IRollupUserERC20Caller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserERC20 *IRollupUserERC20Session) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUserERC20.Contract.GetNode(&_IRollupUserERC20.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IRollupUserERC20.Contract.GetNode(&_IRollupUserERC20.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserERC20 *IRollupUserERC20Caller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserERC20 *IRollupUserERC20Session) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUserERC20.Contract.GetStaker(&_IRollupUserERC20.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUserERC20.Contract.GetStaker(&_IRollupUserERC20.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUserERC20.Contract.GetStakerAddress(&_IRollupUserERC20.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUserERC20.Contract.GetStakerAddress(&_IRollupUserERC20.CallOpts, stakerNum)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserERC20 *IRollupUserERC20Caller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) Initialize(stakeToken common.Address) error {
	return _IRollupUserERC20.Contract.Initialize(&_IRollupUserERC20.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) Initialize(stakeToken common.Address) error {
	return _IRollupUserERC20.Contract.Initialize(&_IRollupUserERC20.CallOpts, stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) IsERC20Enabled() (bool, error) {
	return _IRollupUserERC20.Contract.IsERC20Enabled(&_IRollupUserERC20.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) IsERC20Enabled() (bool, error) {
	return _IRollupUserERC20.Contract.IsERC20Enabled(&_IRollupUserERC20.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsStaked(&_IRollupUserERC20.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsStaked(&_IRollupUserERC20.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsValidator(&_IRollupUserERC20.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsValidator(&_IRollupUserERC20.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsZombie(&_IRollupUserERC20.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) IsZombie(staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.IsZombie(&_IRollupUserERC20.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) LastStakeBlock() (uint64, error) {
	return _IRollupUserERC20.Contract.LastStakeBlock(&_IRollupUserERC20.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) LastStakeBlock() (uint64, error) {
	return _IRollupUserERC20.Contract.LastStakeBlock(&_IRollupUserERC20.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) LatestConfirmed() (uint64, error) {
	return _IRollupUserERC20.Contract.LatestConfirmed(&_IRollupUserERC20.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) LatestConfirmed() (uint64, error) {
	return _IRollupUserERC20.Contract.LatestConfirmed(&_IRollupUserERC20.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) LatestNodeCreated() (uint64, error) {
	return _IRollupUserERC20.Contract.LatestNodeCreated(&_IRollupUserERC20.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) LatestNodeCreated() (uint64, error) {
	return _IRollupUserERC20.Contract.LatestNodeCreated(&_IRollupUserERC20.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUserERC20.Contract.LatestStakedNode(&_IRollupUserERC20.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _IRollupUserERC20.Contract.LatestStakedNode(&_IRollupUserERC20.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUserERC20.Contract.LoserStakeEscrow(&_IRollupUserERC20.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUserERC20.Contract.LoserStakeEscrow(&_IRollupUserERC20.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUserERC20.Contract.MinimumAssertionPeriod(&_IRollupUserERC20.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUserERC20.Contract.MinimumAssertionPeriod(&_IRollupUserERC20.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.NodeHasStaker(&_IRollupUserERC20.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _IRollupUserERC20.Contract.NodeHasStaker(&_IRollupUserERC20.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) Outbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.Outbox(&_IRollupUserERC20.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) Outbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.Outbox(&_IRollupUserERC20.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) Owner() (common.Address, error) {
	return _IRollupUserERC20.Contract.Owner(&_IRollupUserERC20.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) Owner() (common.Address, error) {
	return _IRollupUserERC20.Contract.Owner(&_IRollupUserERC20.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserERC20 *IRollupUserERC20Caller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUserERC20.Contract.RequireUnresolved(&_IRollupUserERC20.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _IRollupUserERC20.Contract.RequireUnresolved(&_IRollupUserERC20.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserERC20 *IRollupUserERC20Caller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RequireUnresolvedExists() error {
	return _IRollupUserERC20.Contract.RequireUnresolvedExists(&_IRollupUserERC20.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) RequireUnresolvedExists() error {
	return _IRollupUserERC20.Contract.RequireUnresolvedExists(&_IRollupUserERC20.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.RequiredStake(&_IRollupUserERC20.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _IRollupUserERC20.Contract.RequiredStake(&_IRollupUserERC20.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) RollupEventInbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.RollupEventInbox(&_IRollupUserERC20.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.RollupEventInbox(&_IRollupUserERC20.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) SequencerInbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.SequencerInbox(&_IRollupUserERC20.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupUserERC20.Contract.SequencerInbox(&_IRollupUserERC20.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) StakeToken() (common.Address, error) {
	return _IRollupUserERC20.Contract.StakeToken(&_IRollupUserERC20.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) StakeToken() (common.Address, error) {
	return _IRollupUserERC20.Contract.StakeToken(&_IRollupUserERC20.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) StakerCount() (uint64, error) {
	return _IRollupUserERC20.Contract.StakerCount(&_IRollupUserERC20.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) StakerCount() (uint64, error) {
	return _IRollupUserERC20.Contract.StakerCount(&_IRollupUserERC20.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20Session) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUserERC20.Contract.ValidatorWhitelistDisabled(&_IRollupUserERC20.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUserERC20.Contract.ValidatorWhitelistDisabled(&_IRollupUserERC20.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserERC20 *IRollupUserERC20Caller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserERC20 *IRollupUserERC20Session) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUserERC20.Contract.WasmModuleRoot(&_IRollupUserERC20.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUserERC20.Contract.WasmModuleRoot(&_IRollupUserERC20.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUserERC20.Contract.WithdrawableFunds(&_IRollupUserERC20.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUserERC20.Contract.WithdrawableFunds(&_IRollupUserERC20.CallOpts, owner)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20Session) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUserERC20.Contract.ZombieAddress(&_IRollupUserERC20.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _IRollupUserERC20.Contract.ZombieAddress(&_IRollupUserERC20.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) ZombieCount() (*big.Int, error) {
	return _IRollupUserERC20.Contract.ZombieCount(&_IRollupUserERC20.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ZombieCount() (*big.Int, error) {
	return _IRollupUserERC20.Contract.ZombieCount(&_IRollupUserERC20.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Caller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _IRollupUserERC20.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20Session) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUserERC20.Contract.ZombieLatestStakedNode(&_IRollupUserERC20.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_IRollupUserERC20 *IRollupUserERC20CallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _IRollupUserERC20.Contract.ZombieLatestStakedNode(&_IRollupUserERC20.CallOpts, zombieNum)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "addToDeposit", stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.AddToDeposit(&_IRollupUserERC20.TransactOpts, stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.AddToDeposit(&_IRollupUserERC20.TransactOpts, stakerAddress, tokenAmount)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ConfirmNextNode(&_IRollupUserERC20.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ConfirmNextNode(&_IRollupUserERC20.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.CreateChallenge(&_IRollupUserERC20.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedTimes, bytes32[2] wasmModuleRoots) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedTimes [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.CreateChallenge(&_IRollupUserERC20.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedTimes, wasmModuleRoots)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) NewStakeOnExistingNode(opts *bind.TransactOpts, tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "newStakeOnExistingNode", tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) NewStakeOnExistingNode(tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.NewStakeOnExistingNode(&_IRollupUserERC20.TransactOpts, tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0x773d984e.
//
// Solidity: function newStakeOnExistingNode(uint256 tokenAmount, uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) NewStakeOnExistingNode(tokenAmount *big.Int, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.NewStakeOnExistingNode(&_IRollupUserERC20.TransactOpts, tokenAmount, nodeNum, nodeHash)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) NewStakeOnNewNode(opts *bind.TransactOpts, tokenAmount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "newStakeOnNewNode", tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) NewStakeOnNewNode(tokenAmount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.NewStakeOnNewNode(&_IRollupUserERC20.TransactOpts, tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0xd29a4e27.
//
// Solidity: function newStakeOnNewNode(uint256 tokenAmount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) NewStakeOnNewNode(tokenAmount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.NewStakeOnNewNode(&_IRollupUserERC20.TransactOpts, tokenAmount, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ReduceDeposit(&_IRollupUserERC20.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ReduceDeposit(&_IRollupUserERC20.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RejectNextNode(&_IRollupUserERC20.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RejectNextNode(&_IRollupUserERC20.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveOldZombies(&_IRollupUserERC20.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveOldZombies(&_IRollupUserERC20.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveWhitelistAfterFork(&_IRollupUserERC20.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveWhitelistAfterFork(&_IRollupUserERC20.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUserERC20.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUserERC20.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveZombie(&_IRollupUserERC20.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.RemoveZombie(&_IRollupUserERC20.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ReturnOldDeposit(&_IRollupUserERC20.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.ReturnOldDeposit(&_IRollupUserERC20.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.StakeOnExistingNode(&_IRollupUserERC20.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.StakeOnExistingNode(&_IRollupUserERC20.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Transactor) StakeOnNewNode(opts *bind.TransactOpts, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20Session) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.StakeOnNewNode(&_IRollupUserERC20.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.StakeOnNewNode(&_IRollupUserERC20.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Transactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUserERC20.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20Session) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.WithdrawStakerFunds(&_IRollupUserERC20.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUserERC20 *IRollupUserERC20TransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUserERC20.Contract.WithdrawStakerFunds(&_IRollupUserERC20.TransactOpts)
}

// IRollupUserERC20NodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeConfirmedIterator struct {
	Event *IRollupUserERC20NodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20NodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20NodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20NodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20NodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20NodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20NodeConfirmed represents a NodeConfirmed event raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserERC20NodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20NodeConfirmedIterator{contract: _IRollupUserERC20.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20NodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20NodeConfirmed)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseNodeConfirmed(log types.Log) (*IRollupUserERC20NodeConfirmed, error) {
	event := new(IRollupUserERC20NodeConfirmed)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20NodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeCreatedIterator struct {
	Event *IRollupUserERC20NodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20NodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20NodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20NodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20NodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20NodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20NodeCreated represents a NodeCreated event raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          RollupLibAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IRollupUserERC20NodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20NodeCreatedIterator{contract: _IRollupUserERC20.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20NodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20NodeCreated)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseNodeCreated(log types.Log) (*IRollupUserERC20NodeCreated, error) {
	event := new(IRollupUserERC20NodeCreated)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20NodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeRejectedIterator struct {
	Event *IRollupUserERC20NodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20NodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20NodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20NodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20NodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20NodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20NodeRejected represents a NodeRejected event raised by the IRollupUserERC20 contract.
type IRollupUserERC20NodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*IRollupUserERC20NodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20NodeRejectedIterator{contract: _IRollupUserERC20.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20NodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20NodeRejected)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseNodeRejected(log types.Log) (*IRollupUserERC20NodeRejected, error) {
	event := new(IRollupUserERC20NodeRejected)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20RollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupUserERC20 contract.
type IRollupUserERC20RollupChallengeStartedIterator struct {
	Event *IRollupUserERC20RollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20RollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20RollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20RollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20RollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20RollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20RollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupUserERC20 contract.
type IRollupUserERC20RollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupUserERC20RollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20RollupChallengeStartedIterator{contract: _IRollupUserERC20.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20RollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20RollupChallengeStarted)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseRollupChallengeStarted(log types.Log) (*IRollupUserERC20RollupChallengeStarted, error) {
	event := new(IRollupUserERC20RollupChallengeStarted)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20RollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupUserERC20 contract.
type IRollupUserERC20RollupInitializedIterator struct {
	Event *IRollupUserERC20RollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20RollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20RollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20RollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20RollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20RollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20RollupInitialized represents a RollupInitialized event raised by the IRollupUserERC20 contract.
type IRollupUserERC20RollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupUserERC20RollupInitializedIterator, error) {

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20RollupInitializedIterator{contract: _IRollupUserERC20.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20RollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20RollupInitialized)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseRollupInitialized(log types.Log) (*IRollupUserERC20RollupInitialized, error) {
	event := new(IRollupUserERC20RollupInitialized)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20UserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupUserERC20 contract.
type IRollupUserERC20UserStakeUpdatedIterator struct {
	Event *IRollupUserERC20UserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20UserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20UserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20UserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20UserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20UserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20UserStakeUpdated represents a UserStakeUpdated event raised by the IRollupUserERC20 contract.
type IRollupUserERC20UserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserERC20UserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20UserStakeUpdatedIterator{contract: _IRollupUserERC20.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20UserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20UserStakeUpdated)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseUserStakeUpdated(log types.Log) (*IRollupUserERC20UserStakeUpdated, error) {
	event := new(IRollupUserERC20UserStakeUpdated)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserERC20UserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupUserERC20 contract.
type IRollupUserERC20UserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupUserERC20UserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserERC20UserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserERC20UserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserERC20UserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserERC20UserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserERC20UserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserERC20UserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupUserERC20 contract.
type IRollupUserERC20UserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserERC20UserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserERC20UserWithdrawableFundsUpdatedIterator{contract: _IRollupUserERC20.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserERC20UserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUserERC20.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserERC20UserWithdrawableFundsUpdated)
				if err := _IRollupUserERC20.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUserERC20 *IRollupUserERC20Filterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupUserERC20UserWithdrawableFundsUpdated, error) {
	event := new(IRollupUserERC20UserWithdrawableFundsUpdated)
	if err := _IRollupUserERC20.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLibMetaData contains all meta data concerning the NodeLib contract.
var NodeLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204b87093fced1f41e3487b31118247fc65adb1a31fac4010dbc70e25b34f2e7ac64736f6c63430008090033",
}

// NodeLibABI is the input ABI used to generate the binding from.
// Deprecated: Use NodeLibMetaData.ABI instead.
var NodeLibABI = NodeLibMetaData.ABI

// NodeLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodeLibMetaData.Bin instead.
var NodeLibBin = NodeLibMetaData.Bin

// DeployNodeLib deploys a new Ethereum contract, binding an instance of NodeLib to it.
func DeployNodeLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeLib, error) {
	parsed, err := NodeLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodeLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeLib{NodeLibCaller: NodeLibCaller{contract: contract}, NodeLibTransactor: NodeLibTransactor{contract: contract}, NodeLibFilterer: NodeLibFilterer{contract: contract}}, nil
}

// NodeLib is an auto generated Go binding around an Ethereum contract.
type NodeLib struct {
	NodeLibCaller     // Read-only binding to the contract
	NodeLibTransactor // Write-only binding to the contract
	NodeLibFilterer   // Log filterer for contract events
}

// NodeLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeLibSession struct {
	Contract     *NodeLib          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeLibCallerSession struct {
	Contract *NodeLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// NodeLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeLibTransactorSession struct {
	Contract     *NodeLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// NodeLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeLibRaw struct {
	Contract *NodeLib // Generic contract binding to access the raw methods on
}

// NodeLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeLibCallerRaw struct {
	Contract *NodeLibCaller // Generic read-only contract binding to access the raw methods on
}

// NodeLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeLibTransactorRaw struct {
	Contract *NodeLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodeLib creates a new instance of NodeLib, bound to a specific deployed contract.
func NewNodeLib(address common.Address, backend bind.ContractBackend) (*NodeLib, error) {
	contract, err := bindNodeLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeLib{NodeLibCaller: NodeLibCaller{contract: contract}, NodeLibTransactor: NodeLibTransactor{contract: contract}, NodeLibFilterer: NodeLibFilterer{contract: contract}}, nil
}

// NewNodeLibCaller creates a new read-only instance of NodeLib, bound to a specific deployed contract.
func NewNodeLibCaller(address common.Address, caller bind.ContractCaller) (*NodeLibCaller, error) {
	contract, err := bindNodeLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeLibCaller{contract: contract}, nil
}

// NewNodeLibTransactor creates a new write-only instance of NodeLib, bound to a specific deployed contract.
func NewNodeLibTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeLibTransactor, error) {
	contract, err := bindNodeLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeLibTransactor{contract: contract}, nil
}

// NewNodeLibFilterer creates a new log filterer instance of NodeLib, bound to a specific deployed contract.
func NewNodeLibFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeLibFilterer, error) {
	contract, err := bindNodeLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeLibFilterer{contract: contract}, nil
}

// bindNodeLib binds a generic wrapper to an already deployed contract.
func bindNodeLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeLibABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeLib *NodeLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeLib.Contract.NodeLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeLib *NodeLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeLib.Contract.NodeLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeLib *NodeLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeLib.Contract.NodeLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeLib *NodeLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodeLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeLib *NodeLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeLib *NodeLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeLib.Contract.contract.Transact(opts, method, params...)
}

// RollupAdminLogicMetaData contains all meta data concerning the RollupAdminLogic contract.
var RollupAdminLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"}],\"name\":\"createNitroMigrationGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"prevNode\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakerA\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stakerB\",\"type\":\"address[]\"}],\"name\":\"forceResolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"extraChallengeTimeBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInbox\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"contractIRollupAdmin\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakedOnLatestConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newExtraTimeBlocks\",\"type\":\"uint64\"}],\"name\":\"setExtraChallengeTimeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"newInbox\",\"type\":\"address\"}],\"name\":\"setInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakeToken\",\"type\":\"address\"}],\"name\":\"setStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeSecondaryTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeSecondaryToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b506080516156e26200007760003960008181611046015281816110860152818161112c0152818161116c01528181611977015281816119b701528181611b5a01528181611b9a01528181611c8c01528181612554015261259401526156e26000f3fe6080604052600436106103855760003560e01c80637ba9534a116101d3578063bc45e0ae11610103578063ee35f3271161009b578063ee35f32714610cdd578063ef40a67014610cfd578063f065de3f14610d33578063f33e1fac14610d53578063f38c937914610d73578063facd743b14610d93578063fb0e722b14610dc3578063fc8ffa0314610de3578063ff204f3b14610e0357600080fd5b8063bc45e0ae14610b4e578063ce11e6ab14610b6e578063ce66d05c14610b8e578063d01e660214610bae578063d735e21d14610bce578063dcd030aa14610bf3578063dff6978714610c13578063e78cea9214610c28578063e8bd492214610c4857600080fd5b806392c8134c1161017657806392c8134c14610949578063948d6588146109765780639846129a146109965780639a8a0592146109a9578063a23c44b1146109bf578063a2b4f1d814610ace578063a3ffb77214610aee578063aa38a6e714610b0e578063aa65af4814610b2e57600080fd5b80637ba9534a146108645780637c75c298146108795780638456cb5914610899578063848bf918146108ae5780638640ce5f146108ce57806389384960146108f35780638ee1a1261461091357806391c657e81461092957600080fd5b806347fb24c5116102b95780636177fd18116102515780636177fd181461071257806363721d6b1461075557806365f7f80d1461076a57806369fd251c146107885780636ddd3744146107d157806371ef232c146107f157806376e7e23b14610807578063771b2f971461081d5780637b83a3fe1461084457600080fd5b806347fb24c5146106125780634f1ef286146106325780634f61f8501461064557806351ed6a301461066557806352d1902d1461068557806353b60c4a1461069a578063567ca41b146106ba5780635c975abb146106da5780636136fe2e146106f257600080fd5b80631b1689e91161032c5780631b1689e9146104a157806329ce5f2b146104c55780632e7acfa6146104e55780632f30cabd1461051d5780632f7968e8146105535780633659cfe6146105735780633e96576e1461059357806345e38b64146105dc578063470dce4e146105f257600080fd5b8063014cc92c1461038a578063023a96fe146103c05780630397d458146103e0578063046f7da21461040257806306ae5851146104175780630d40a0fd1461043757806312ab3d3b1461045757806313af403514610481575b600080fd5b34801561039657600080fd5b50606f546103aa906001600160a01b031681565b6040516103b79190614aac565b60405180910390f35b3480156103cc57600080fd5b50606e546103aa906001600160a01b031681565b3480156103ec57600080fd5b506104006103fb366004614ad5565b610e23565b005b34801561040e57600080fd5b50610400610ff5565b34801561042357600080fd5b50610400610432366004614af2565b611019565b34801561044357600080fd5b50610400610452366004614ad5565b61103b565b34801561046357600080fd5b50607e546104719060ff1681565b60405190151581526020016103b7565b34801561048d57600080fd5b5061040061049c366004614ad5565b6110fb565b3480156104ad57600080fd5b506104b7607d5481565b6040519081526020016103b7565b3480156104d157600080fd5b506104006104e0366004614b0b565b611121565b3480156104f157600080fd5b50606554610505906001600160401b031681565b6040516001600160401b0390911681526020016103b7565b34801561052957600080fd5b506104b7610538366004614ad5565b6001600160a01b03166000908152607b602052604090205490565b34801561055f57600080fd5b5061040061056e366004614b6f565b611920565b34801561057f57600080fd5b5061040061058e366004614ad5565b61196c565b34801561059f57600080fd5b506105056105ae366004614ad5565b6001600160a01b0316600090815260796020526040902060010154600160401b90046001600160401b031690565b3480156105e857600080fd5b506104b760735481565b3480156105fe57600080fd5b5061040061060d366004614bbb565b611a29565b34801561061e57600080fd5b5061040061062d366004614c10565b611acd565b610400610640366004614cb7565b611b4f565b34801561065157600080fd5b50610400610660366004614ad5565b611c00565b34801561067157600080fd5b506072546103aa906001600160a01b031681565b34801561069157600080fd5b506104b7611c7f565b3480156106a657600080fd5b506104006106b5366004614ad5565b611d2d565b3480156106c657600080fd5b506104006106d5366004614ad5565b611d65565b3480156106e657600080fd5b5060335460ff16610471565b3480156106fe57600080fd5b5061040061070d366004614d5e565b611e32565b34801561071e57600080fd5b5061047161072d366004614ad5565b6001600160a01b0316600090815260796020526040902060010154600160c01b900460ff1690565b34801561076157600080fd5b50607a546104b7565b34801561077657600080fd5b506075546001600160401b0316610505565b34801561079457600080fd5b506105056107a3366004614ad5565b6001600160a01b0316600090815260796020526040902060010154600160801b90046001600160401b031690565b3480156107dd57600080fd5b506103aa6107ec366004614d5e565b611e74565b3480156107fd57600080fd5b506104b7607c5481565b34801561081357600080fd5b506104b760675481565b34801561082957600080fd5b5060655461050590600160401b90046001600160401b031681565b34801561085057600080fd5b5061040061085f366004614d79565b611ead565b34801561087057600080fd5b506105056121b0565b34801561088557600080fd5b50610400610894366004614de1565b6121c6565b3480156108a557600080fd5b5061040061233a565b3480156108ba57600080fd5b506104006108c9366004614e22565b61235e565b3480156108da57600080fd5b50607554600160c01b90046001600160401b0316610505565b3480156108ff57600080fd5b5061040061090e366004614af2565b6123da565b34801561091f57600080fd5b506104b760685481565b34801561093557600080fd5b50610471610944366004614ad5565b6123fc565b34801561095557600080fd5b50610969610964366004614d5e565b612460565b6040516103b79190614e50565b34801561098257600080fd5b50610400610991366004614af2565b612527565b6104006109a4366004614cb7565b612549565b3480156109b557600080fd5b506104b760665481565b3480156109cb57600080fd5b50610a796109da366004614ad5565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0316600090815260796020908152604091829020825160a081018452815481526001909101546001600160401b0380821693830193909352600160401b8104831693820193909352600160801b83049091166060820152600160c01b90910460ff161515608082015290565b6040516103b79190600060a0820190508251825260208301516001600160401b038082166020850152806040860151166040850152806060860151166060850152505060808301511515608083015292915050565b348015610ada57600080fd5b50610400610ae9366004614f4c565b6125f6565b348015610afa57600080fd5b50610400610b09366004614f69565b612621565b348015610b1a57600080fd5b50606d546103aa906001600160a01b031681565b348015610b3a57600080fd5b50610471610b49366004614fd4565b612715565b348015610b5a57600080fd5b506070546103aa906001600160a01b031681565b348015610b7a57600080fd5b50606b546103aa906001600160a01b031681565b348015610b9a57600080fd5b50610400610ba9366004614d5e565b61274c565b348015610bba57600080fd5b506103aa610bc9366004614af2565b6127d7565b348015610bda57600080fd5b50607554600160401b90046001600160401b0316610505565b348015610bff57600080fd5b50610471610c0e366004614ad5565b6127ec565b348015610c1f57600080fd5b50607854610505565b348015610c3457600080fd5b50606a546103aa906001600160a01b031681565b348015610c5457600080fd5b50610ca5610c63366004614ad5565b607960205260009081526040902080546001909101546001600160401b0380821691600160401b8104821691600160801b82041690600160c01b900460ff1685565b604080519586526001600160401b0394851660208701529284169285019290925290911660608301521515608082015260a0016103b7565b348015610ce957600080fd5b50606c546103aa906001600160a01b031681565b348015610d0957600080fd5b506104b7610d18366004614ad5565b6001600160a01b031660009081526079602052604090205490565b348015610d3f57600080fd5b506071546103aa906001600160a01b031681565b348015610d5f57600080fd5b50610505610d6e366004614af2565b61282f565b348015610d7f57600080fd5b50610400610d8e366004614f69565b612866565b348015610d9f57600080fd5b50610471610dae366004614ad5565b60746020526000908152604090205460ff1681565b348015610dcf57600080fd5b506069546103aa906001600160a01b031681565b348015610def57600080fd5b50610400610dfe366004614ad5565b612a76565b348015610e0f57600080fd5b50610400610e1e366004614ad5565b612b08565b60335460ff16610e4e5760405162461bcd60e51b8152600401610e4590614ff0565b60405180910390fd5b6000806001600160a01b0316826001600160a01b0316141590506000306001600160a01b031663cd205fda6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ea357600080fd5b505afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb919061501e565b905081151581151514610f285760405162461bcd60e51b81526020600482015260156024820152741393d7d554d15497d313d1d250d7d4d5541413d495605a1b6044820152606401610e45565b6078546001600160401b031615610f755760405162461bcd60e51b81526020600482015260116024820152704e4f5f4143544956455f5354414b45525360781b6044820152606401610e45565b607c5415610fbb5760405162461bcd60e51b81526020600482015260136024820152724e4f5f50454e44494e475f574954484452415760681b6044820152606401610e45565b607280546001600160a01b0319166001600160a01b038516179055604051600d9060008051602061566683398151915290600090a2505050565b610ffd612ba0565b60405160049060008051602061566683398151915290600090a2565b6067819055604051600c9060008051602061566683398151915290600090a250565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110845760405162461bcd60e51b8152600401610e459061503b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110b6612c06565b6001600160a01b0316146110dc5760405162461bcd60e51b8152600401610e4590615087565b604080516000808252602082019092526110f891839190612c27565b50565b61110481612dc7565b60405160079060008051602061566683398151915290600090a250565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561116a5760405162461bcd60e51b8152600401610e459061503b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661119c612c06565b6001600160a01b0316146111c25760405162461bcd60e51b8152600401610e4590615087565b600054610100900460ff166111dd5760005460ff16156111e1565b303b155b6112445760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e45565b600054610100900460ff16158015611266576000805461ffff19166101011790555b43607d556112776020830183614ad5565b606a80546001600160a01b0319166001600160a01b03929092169190911790556112a76040830160208401614ad5565b606c80546001600160a01b0319166001600160a01b03929092169190911790556112d46020830183614ad5565b6001600160a01b03166347fb24c56112f26060850160408601614ad5565b60016040518363ffffffff1660e01b81526004016113119291906150d3565b600060405180830381600087803b15801561132b57600080fd5b505af115801561133f573d6000803e3d6000fd5b50611351925050506020830183614ad5565b6001600160a01b0316634f61f85061136f6040850160208601614ad5565b6040518263ffffffff1660e01b815260040161138b9190614aac565b600060405180830381600087803b1580156113a557600080fd5b505af11580156113b9573d6000803e3d6000fd5b506113ce925050506060830160408401614ad5565b606980546001600160a01b0319166001600160a01b03929092169190911790556113fe6080830160608401614ad5565b606b80546001600160a01b0319166001600160a01b039290921691909117905561142b6020830183614ad5565b6001600160a01b031663cee3d7286114496080850160608601614ad5565b60016040518363ffffffff1660e01b81526004016114689291906150d3565b600060405180830381600087803b15801561148257600080fd5b505af1158015611496573d6000803e3d6000fd5b506114ab9250505060a0830160808401614ad5565b606d80546001600160a01b0319166001600160a01b03929092169190911790556114d86020830183614ad5565b6001600160a01b03166347fb24c56114f660a0850160808601614ad5565b60016040518363ffffffff1660e01b81526004016115159291906150d3565b600060405180830381600087803b15801561152f57600080fd5b505af1158015611543573d6000803e3d6000fd5b506115589250505060a0830160808401614ad5565b60405163e199be3560e01b815260e085013560048201526001600160a01b03919091169063e199be3590602401600060405180830381600087803b15801561159f57600080fd5b505af11580156115b3573d6000803e3d6000fd5b506115c8925050506040830160208401614ad5565b60405163e0bc972960e01b815260006004820181905260c0602483015260c4820181905260016044830181905260648301829052608483019190915260a48201526001600160a01b03919091169063e0bc97299060e401600060405180830381600087803b15801561163957600080fd5b505af115801561164d573d6000803e3d6000fd5b506116649250505061012083016101008401614ad5565b606f80546001600160a01b0319166001600160a01b039290921691909117905561169661014083016101208401614ad5565b607080546001600160a01b0319166001600160a01b03929092169190911790556116c660c0830160a08401614ad5565b606e80546001600160a01b0319166001600160a01b039290921691909117905560006116f0612e1b565b90506116fb81612e75565b6117086020850185614d5e565b6065805467ffffffffffffffff19166001600160401b03929092169190911790556117396040850160208601614d5e565b606580546001600160401b0392909216600160401b0267ffffffffffffffff60401b1990921691909117905560e084013560665560608401356067556080840135606855604b60735561178a61304a565b6001600160a01b03166117a360e0860160c08701614ad5565b6001600160a01b031614156117f15760405162461bcd60e51b815260206004820152601460248201527324a72b20a624a22fa2a9a1a927abafa0a226a4a760611b6044820152606401610e45565b61180160c0850160a08601614ad5565b6001600160a01b031661181a60e0860160c08701614ad5565b6001600160a01b031614156118685760405162461bcd60e51b815260206004820152601460248201527324a72b20a624a22fa2a9a1a927abafa7aba722a960611b6044820152606401610e45565b61187860e0850160c08601614ad5565b607180546001600160a01b0319166001600160a01b03929092169190911790556118a86060850160408601614ad5565b607280546001600160a01b0319166001600160a01b0392909216919091179055604080516080860135815260e086013560208201527ffc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464910160405180910390a150801561191b576000805461ff00191690555b505050565b60335460ff166119425760405162461bcd60e51b8152600401610e4590614ff0565b61194d838383613072565b60405160189060008051602061566683398151915290600090a2505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156119b55760405162461bcd60e51b8152600401610e459061503b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166119e7612c06565b6001600160a01b031614611a0d5760405162461bcd60e51b8152600401610e4590615087565b604080516000808252602082019092526110f8918391906131cc565b60335460ff16611a4b5760405162461bcd60e51b8152600401610e4590614ff0565b6075546001600160401b03858116911614611aa05760405162461bcd60e51b815260206004820152601560248201527413d3931657d310551154d517d0d3d3919254935151605a1b6044820152606401610e45565b611aac82858584613346565b5060405160179060008051602061566683398151915290600090a250505050565b606a546040516347fb24c560e01b81526001600160a01b03909116906347fb24c590611aff90859085906004016150d3565b600060405180830381600087803b158015611b1957600080fd5b505af1158015611b2d573d6000803e3d6000fd5b5050604051600292506000805160206156668339815191529150600090a25050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611b985760405162461bcd60e51b8152600401610e459061503b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611bca612c06565b6001600160a01b031614611bf05760405162461bcd60e51b8152600401610e4590615087565b611bfc828260016131cc565b5050565b606a546040516304f61f8560e41b81526001600160a01b0390911690634f61f85090611c30908490600401614aac565b600060405180830381600087803b158015611c4a57600080fd5b505af1158015611c5e573d6000803e3d6000fd5b5050604051601b92506000805160206156668339815191529150600090a250565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611d1a5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610e45565b5060008051602061564683398151915290565b606980546001600160a01b0319166001600160a01b038316179055604051601c9060008051602061566683398151915290600090a250565b606b546001600160a01b0382811691161415611db05760405162461bcd60e51b815260206004820152600a602482015269086aaa4be9eaaa8849eb60b31b6044820152606401610e45565b606a546040516319dc7ae560e31b81526001600160a01b039091169063cee3d72890611de39084906000906004016150d3565b600060405180830381600087803b158015611dfd57600080fd5b505af1158015611e11573d6000803e3d6000fd5b5050604051600192506000805160206156668339815191529150600090a250565b6065805467ffffffffffffffff60401b1916600160401b6001600160401b03841602179055604051600a9060008051602061566683398151915290600090a250565b60006078826001600160401b031681548110611e9257611e926150ee565b6000918252602090912001546001600160a01b031692915050565b60335460ff16611ecf5760405162461bcd60e51b8152600401610e4590614ff0565b60006001611edb6121b0565b6001600160401b031615611f2b5760405162461bcd60e51b81526020600482015260176024820152761393d397d1d1539154d254d7d393d11154d7d1561254d5604a1b6044820152606401610e45565b611f348361395a565b611f735760405162461bcd60e51b815260206004820152601060248201526f4e4f545f454d5054595f4245464f524560801b6044820152606401610e45565b6001611f8560a0850160808601615129565b6003811115611f9657611f96615104565b14611fe35760405162461bcd60e51b815260206004820152601b60248201527f4245464f52455f4d414348494e455f4e4f545f46494e495348454400000000006044820152606401610e45565b60c0830135821461202a5760405162461bcd60e51b81526020600482015260116024820152701393d517d6915493d7d4d153911493d3d5607a1b6044820152606401610e45565b6001600160401b038116612045610100850160e08601614d5e565b6001600160401b03161461208e5760405162461bcd60e51b815260206004820152601060248201526f494e424f585f4e4f545f41545f4f4e4560801b6044820152606401610e45565b6120a061012084016101008501614d5e565b6001600160401b0316156120f65760405162461bcd60e51b815260206004820152601c60248201527f504f534954494f4e5f494e5f4d4553534147455f4e4f545f5a45524f000000006044820152606401610e45565b600161210a61014085016101208601615129565b600381111561211b5761211b615104565b146121685760405162461bcd60e51b815260206004820152601a60248201527f41465445525f4d414348494e455f4e4f545f46494e49534845440000000000006044820152606401610e45565b60a08301356121838460006001600160401b03851681613346565b5061219060018285613072565b604051601d9060008051602061566683398151915290600090a250505050565b607554600160801b90046001600160401b031690565b60335460ff166121e85760405162461bcd60e51b8152600401610e4590614ff0565b806122055760405162461bcd60e51b8152600401610e4590615144565b60005b8181101561231b576000607981858585818110612227576122276150ee565b905060200201602081019061223c9190614ad5565b6001600160a01b03168152602081019190915260400160002060010154600160801b90046001600160401b0316146122a85760405162461bcd60e51b815260206004820152600f60248201526e14d51052d15497d25397d0d2105313608a1b6044820152606401610e45565b6122d98383838181106122bd576122bd6150ee565b90506020020160208101906122d29190614ad5565b60006139b6565b506123098383838181106122ef576122ef6150ee565b90506020020160208101906123049190614ad5565b613a7b565b806123138161517f565b915050612208565b5060405160169060008051602061566683398151915290600090a25050565b612342613b21565b60405160039060008051602061566683398151915290600090a2565b604051631b2ce7f360e11b81526001600160a01b03831690633659cfe69061238a908490600401614aac565b600060405180830381600087803b1580156123a457600080fd5b505af11580156123b8573d6000803e3d6000fd5b5050604051601492506000805160206156668339815191529150600090a25050565b6068819055604051601a9060008051602061566683398151915290600090a250565b6000805b607a5481101561245757607a818154811061241d5761241d6150ee565b6000918252602090912001546001600160a01b03848116911614156124455750600192915050565b8061244f8161517f565b915050612400565b50600092915050565b612468614987565b6001600160401b03821660009081526076602052604090206040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082015260059091015461016082015292915050565b607381905560405160089060008051602061566683398151915290600090a250565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156125925760405162461bcd60e51b8152600401610e459061503b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166125c4612c06565b6001600160a01b0316146125ea5760405162461bcd60e51b8152600401610e4590615087565b611bfc82826001612c27565b607e805460ff1916821515179055604051601e9060008051602061566683398151915290600090a250565b8261263e5760405162461bcd60e51b8152600401610e4590615144565b82811461265d5760405162461bcd60e51b8152600401610e459061519a565b60005b838110156126f45782828281811061267a5761267a6150ee565b905060200201602081019061268f9190614f4c565b607460008787858181106126a5576126a56150ee565b90506020020160208101906126ba9190614ad5565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806126ec8161517f565b915050612660565b5060405160069060008051602061566683398151915290600090a250505050565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6000816001600160401b03161161279e5760405162461bcd60e51b81526020600482015260166024820152751253959053125117d0d3d39192549357d411549253d160521b6044820152606401610e45565b6065805467ffffffffffffffff19166001600160401b03831617905560405160099060008051602061566683398151915290600090a250565b6000607a8281548110611e9257611e926150ee565b6001600160a01b038116600090815260796020526040812060010154600160c01b900460ff1680156127465750607554612746906001600160401b031683612715565b6000607a8281548110612844576128446150ee565b600091825260209091200154600160a01b90046001600160401b031692915050565b60335460ff166128885760405162461bcd60e51b8152600401610e4590614ff0565b826128a55760405162461bcd60e51b8152600401610e4590615144565b8281146128c45760405162461bcd60e51b8152600401610e459061519a565b60005b83811015612a555760006129278686848181106128e6576128e66150ee565b90506020020160208101906128fb9190614ad5565b85858581811061290d5761290d6150ee565b90506020020160208101906129229190614ad5565b613b9c565b90506001600160401b03811661296e5760405162461bcd60e51b815260206004820152600c60248201526b1393d517d25397d0d210531360a21b6044820152606401610e45565b6129c6868684818110612983576129836150ee565b90506020020160208101906129989190614ad5565b6001600160a01b03166000908152607960205260409020600101805467ffffffffffffffff60801b19169055565b6129db848484818110612983576129836150ee565b606e546040516356e9df9760e01b81526001600160401b03831660048201526001600160a01b03909116906356e9df9790602401600060405180830381600087803b158015612a2957600080fd5b505af1158015612a3d573d6000803e3d6000fd5b50505050508080612a4d9061517f565b9150506128c7565b5060405160159060008051602061566683398151915290600090a250505050565b612a7e61304a565b6001600160a01b0316816001600160a01b03161415612ad05760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f455343524f5760901b6044820152606401610e45565b607180546001600160a01b0319166001600160a01b03831617905560405160199060008051602061566683398151915290600090a250565b606b80546001600160a01b0319166001600160a01b0383811691909117909155606a546040516319dc7ae560e31b815291169063cee3d72890612b529084906001906004016150d3565b600060405180830381600087803b158015612b6c57600080fd5b505af1158015612b80573d6000803e3d6000fd5b50506040516000925060008051602061566683398151915291508290a250565b60335460ff16612bc25760405162461bcd60e51b8152600401610e4590614ff0565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051612bfc9190614aac565b60405180910390a1565b60006000805160206156468339815191525b546001600160a01b0316919050565b7f49bd798cd84788856140a4cd5030756b4d08a9e4d55db725ec195f232d262a895460ff1615612c5a5761191b83613c6a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c9357600080fd5b505afa925050508015612cc3575060408051601f3d908101601f19168201909252612cc0918101906151c0565b60015b612d305760405162461bcd60e51b815260206004820152603860248201527f45524331393637557067726164653a206e6577207365636f6e6461727920696d604482015277706c656d656e746174696f6e206973206e6f74205555505360401b6064820152608401610e45565b7f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d8114612dbb5760405162461bcd60e51b815260206004820152603360248201527f45524331393637557067726164653a20756e737570706f72746564207365636f6044820152721b99185c9e481c1c9bde1a58589b1955555251606a1b6064820152608401610e45565b5061191b838383613d25565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f612df061304a565b604080516001600160a01b03928316815291841660208301520160405180910390a16110f881613d50565b612e23614987565b612e2b6149eb565b6000612e5d604051806040016040528084815260200160016003811115612e5457612e54615104565b90526001613ddc565b9050612e6e81600080804381613e21565b9250505090565b612e7d613e75565b60008080526076602090815282517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a181958558201517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a1819595560408201517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a18195a5560608201517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a18195b8054608085015160a086015160c08701516001600160401b039586166001600160801b031994851617600160401b9387168402176001600160801b03908116600160801b93881684026001600160c01b0390811691909117600160c01b93891684021790965560e08901517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a18195c80546101008c01516101208d01516101408e0151948c169290991691909117908a169096029590951790911694871690920290941692909217919093169091021790556101608201517fafbc767fed27552cbeceb3d11150dacedabc53b0cc52ac5aa6285a747a18195d556130219060016151d9565b607560086101000a8154816001600160401b0302191690836001600160401b0316021790555050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612c18565b6001600160401b03831660009081526076602052604090206130948383613ea6565b8160020154146130d55760405162461bcd60e51b815260206004820152600c60248201526b434f4e4649524d5f4441544160a01b6044820152606401610e45565b606b54604051630502677360e51b815260048101849052602481018590526001600160a01b039091169063a04cee6090604401600060405180830381600087803b15801561312257600080fd5b505af1158015613136573d6000803e3d6000fd5b50506075805467ffffffffffffffff19166001600160401b0388161790555061316290508460016151d9565b6075805467ffffffffffffffff60401b1916600160401b6001600160401b03938416021790556040805185815260208101859052918616917f22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c91015b60405180910390a250505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156131ff5761191b83613ec2565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561323857600080fd5b505afa925050508015613268575060408051601f3d908101601f19168201909252613265918101906151c0565b60015b6132cb5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610e45565b600080516020615646833981519152811461333a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610e45565b5061191b838383613f44565b6000600161335c61014087016101208801615129565b600381111561336d5761336d615104565b148061339b5750600261338861014087016101208801615129565b600381111561339957613399615104565b145b6133da5760405162461bcd60e51b815260206004820152601060248201526f4241445f41465445525f53544154555360801b6044820152606401610e45565b6133e2614a10565b6133eb85612460565b6060820152606a54604080516221048360e21b815290516001600160a01b03909216916284120c91600480820192602092909190829003018186803b15801561343357600080fd5b505afa158015613447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061346b91906151c0565b815260608101515161347d8786613f4d565b146134bc5760405162461bcd60e51b815260206004820152600f60248201526e0a0a48aacbea6a882a88abe9082a69608b1b6044820152606401610e45565b60006134d86134d336899003890160a08a016152c6565b613f89565b905060006134ee6134d3368a90038a018a6152c6565b9050806001600160401b0316826001600160401b031610156135445760405162461bcd60e51b815260206004820152600f60248201526e494e424f585f4241434b574152445360881b6044820152606401610e45565b806001600160401b0316826001600160401b031614156135ea57613575613570368a90038a018a6152c6565b613f9e565b6001600160401b0316613593613570368b90038b0160a08c016152c6565b6001600160401b031610156135ea5760405162461bcd60e51b815260206004820152601a60248201527f494e424f585f504f535f494e5f4d53475f4241434b57415244530000000000006044820152606401610e45565b60026135fe6101408a016101208b01615129565b600381111561360f5761360f615104565b14806136385750600061362d613570368b90038b0160a08c016152c6565b6001600160401b0316115b1561364b5781613647816152e2565b9250505b82516001600160401b03831611156136965760405162461bcd60e51b815260206004820152600e60248201526d12539093d617d41054d517d1539160921b6044820152606401610e45565b6001600160401b0382161561373e57606a546001600160a01b03166316bf55796136c1600185615309565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b15801561370057600080fd5b505afa158015613714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373891906151c0565b60e08401525b50613758905061375336889003880188615370565b613fad565b6040820152606554613773906001600160401b0316436151d9565b6001600160401b0390811660c0830152606082015161012001511615801560a08301526137c957606081015161012001516001600160401b031660009081526076602052604090206005015460808201526137d9565b6060810151610160015160808201525b6137f88160a00151826080015183604001518460e0015160685461404c565b915082821480613806575082155b6138495760405162461bcd60e51b81526020600482015260146024820152730aa9c8ab0a08a86a88a88be9c9e888abe9082a6960631b6044820152606401610e45565b61389161385d8760a0018360000151613f4d565b61386e8360400151436068546140b9565b613885613880368b90038b018b615370565b6140f8565b888560c0015187613e21565b602082015260006138a06121b0565b6138ab9060016151d9565b905060006138cd876001600160401b0316600090815260766020526040902090565b90506138d98183614122565b6138e68360200151614193565b505081816060015161016001516138fb6121b0565b6001600160401b03167f4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d09684604001518a8660e00151606854886000015160405161394995949392919061545a565b60405180910390a450949350505050565b6000813515801561396d57506020820135155b801561398f57506139846060830160408401614d5e565b6001600160401b0316155b801561274657506139a66080830160608401614d5e565b6001600160401b03161592915050565b6001600160a01b0382166000908152607960205260408120805480841115613a135760405162461bcd60e51b815260206004820152601060248201526f544f4f5f4c4954544c455f5354414b4560801b6044820152606401610e45565b6000613a1f85836154ba565b8584559050613a2e86826142ca565b60408051838152602081018790526001600160a01b038816917febd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6910160405180910390a295945050505050565b6001600160a01b03808216600081815260796020908152604080832081518083019092529381526001808501546001600160401b03600160401b9091048116938301938452607a8054928301815590945290517ff0440771a29e57e18c66727944770b82cc77924aef333c927ce6bdd2cdb3ae0390910180549251909316600160a01b026001600160e01b031990921694169390931792909217909155611bfc82614366565b60335460ff1615613b675760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610e45565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612bef3390565b6001600160a01b03828116600090815260796020526040808220928416825281206001830154919291600160801b90046001600160401b031680613c0c5760405162461bcd60e51b81526020600482015260076024820152661393d7d0d2105360ca1b6044820152606401610e45565b60018201546001600160401b03828116600160801b9092041614613c615760405162461bcd60e51b815260206004820152600c60248201526b1112519197d25397d0d2105360a21b6044820152606401610e45565b95945050505050565b6001600160a01b0381163b613ce15760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e74604482015276185d1a5bdb881a5cc81b9bdd08184818dbdb9d1c9858dd604a1b6064820152608401610e45565b807f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d5b80546001600160a01b0319166001600160a01b039290921691909117905550565b613d2e83614529565b600082511180613d3b5750805b1561191b57613d4a8383614569565b50505050565b6001600160a01b038116613db55760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e45565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103613d04565b6000613deb836000015161458e565b828460200151604051602001613e03939291906154d1565b60405160208183030381529060405280519060200120905092915050565b613e29614987565b613e31614987565b96875250602086019490945260408501929092526001600160401b0390811660608501529081166080840181905260a0840152431661014083015261016082015290565b600054610100900460ff16613e9c5760405162461bcd60e51b8152600401610e459061550f565b613ea4614602565b565b6040805160208101849052908101829052600090606001613e03565b6001600160a01b0381163b613f2f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610e45565b80600080516020615646833981519152613d04565b613d2e83614635565b6000613f66613f61368590038501856152c6565b61458e565b82613f7760a0860160808701615129565b604051602001613e03939291906154d1565b6020810151600090815b602002015192915050565b60208101516000906001613f93565b6000613fb7614a61565b82516020015181906003811115613fd057613fd0615104565b90816003811115613fe357613fe3615104565b90525060208381015181015190820190600381111561400457614004615104565b9081600381111561401757614017615104565b905250614022614a7f565b8351518152602080850151519082015260408401516140449083908390614675565b949350505050565b6000808661405b57600061405e565b60015b6040516001600160f81b031960f883901b1660208201526021810188905260418101879052606181018690526081810185905290915060a1016040516020818303038152906040528051906020012091505095945050505050565b6040805160208101859052908101839052606081018290526000906080015b6040516020818303038152906040528051906020012090505b9392505050565b600061274661410e83602001516000015161471f565b60208401515161411d9061472a565b613ea6565b6004820154600160401b90046001600160401b03166141635760048201805467ffffffffffffffff60401b1916600160401b436001600160401b0316021790555b600490910180546001600160401b03909216600160801b0267ffffffffffffffff60801b19909216919091179055565b60758054600160801b90046001600160401b03169060106141b3836152e2565b825461010092830a6001600160401b03818102199092169282160291909117909255607554600160801b908190048316600090815260766020908152604091829020875181559087015160018201559086015160028201556060860151600382018054608089015160a08a015160c08b01519489166001600160801b031993841617600160401b928a168302176001600160801b03908116918a1688026001600160c01b0390811692909217600160c01b968b1687021790945560e08b0151600487018054998d01516101208e01516101408f0151938d169b9096169a909a17998b169093029890981790931691881690950290911617939094169093029190911790556101609092015160059092019190915550565b6001600160a01b0382166000908152607b6020526040812054906142ee838361555a565b6001600160a01b0385166000908152607b60205260408120829055607c8054929350859290919061432090849061555a565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae291016131be565b6001600160a01b03811660009081526079602052604090206001810154600160c01b900460ff166143c65760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b6044820152606401610e45565b600180820154607880546001600160401b039092169290916143e891906154ba565b815481106143f8576143f86150ee565b600091825260209091200154607880546001600160a01b03909216916001600160401b03841690811061442d5761442d6150ee565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080607960006078846001600160401b03168154811061447c5761447c6150ee565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600101805467ffffffffffffffff19166001600160401b039290921691909117905560788054806144d4576144d4615572565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152607990935250506040812090815560010180546001600160c81b0319169055565b61453281613c6a565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b60606140f1838360405180606001604052806027815260200161568660279139614736565b8051805160209182015192820151805190830151604080516c23b637b130b61039ba30ba329d60991b81870152602d810194909452604d8401959095526001600160c01b031960c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b600054610100900460ff166146295760405162461bcd60e51b8152600401610e459061550f565b6033805460ff19169055565b61463e81613ec2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b604080516002808252606082018352600092839291906020830190803683370190505085519091506146b7906146b28660005b602002015161458e565b614813565b816000815181106146ca576146ca6150ee565b60209081029190910101526146eb85600160200201516146b28660016146a8565b816001815181106146fe576146fe6150ee565b602002602001018181525050613c616000846001600160401b031683614937565b805160009081613f93565b80516000906001613f93565b60606001600160a01b0384163b61479e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610e45565b600080856001600160a01b0316856040516147b991906155b4565b600060405180830381855af49150503d80600081146147f4576040519150601f19603f3d011682016040523d82523d6000602084013e6147f9565b606091505b509150915061480982828661494e565b9695505050505050565b6000600183600381111561482957614829615104565b141561486f576040516b213637b1b59039ba30ba329d60a11b6020820152602c8101839052604c015b604051602081830303815290604052805190602001209050612746565b600283600381111561488357614883615104565b14156148b95760405174213637b1b59039ba30ba32961032b93937b932b21d60591b602082015260358101839052605501614852565b60038360038111156148cd576148cd615104565b14156148fc5760405174213637b1b59039ba30ba3296103a37b7903330b91d60591b6020820152603501614852565b60405162461bcd60e51b815260206004820152601060248201526f4241445f424c4f434b5f53544154555360801b6044820152606401610e45565b60008383836040516020016140d8939291906155d0565b6060831561495d5750816140f1565b82511561496d5782518084602001fd5b8160405162461bcd60e51b8152600401610e459190615612565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b60405180604001604052806149fe614a61565b8152602001614a0b614a61565b905290565b60405180610100016040528060008152602001614a2b614987565b815260006020820152604001614a3f614987565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b614a966149eb565b815260200190600190039081614a8e5790505090565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146110f857600080fd5b600060208284031215614ae757600080fd5b81356140f181614ac0565b600060208284031215614b0457600080fd5b5035919050565b6000808284036102e0811215614b2057600080fd5b6101a080821215614b3057600080fd5b84935061014061019f1983011215614b4757600080fd5b92959390920193505050565b80356001600160401b0381168114614b6a57600080fd5b919050565b600080600060608486031215614b8457600080fd5b614b8d84614b53565b95602085013595506040909401359392505050565b60006101608284031215614bb557600080fd5b50919050565b6000806000806101c08587031215614bd257600080fd5b614bdb85614b53565b935060208501359250614bf18660408701614ba2565b939692955092936101a00135925050565b80151581146110f857600080fd5b60008060408385031215614c2357600080fd5b8235614c2e81614ac0565b91506020830135614c3e81614c02565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715614c8157614c81614c49565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614caf57614caf614c49565b604052919050565b60008060408385031215614cca57600080fd5b8235614cd581614ac0565b91506020838101356001600160401b0380821115614cf257600080fd5b818601915086601f830112614d0657600080fd5b813581811115614d1857614d18614c49565b614d2a601f8201601f19168501614c87565b91508082528784828501011115614d4057600080fd5b80848401858401376000848284010152508093505050509250929050565b600060208284031215614d7057600080fd5b6140f182614b53565b60006101608284031215614d8c57600080fd5b6140f18383614ba2565b60008083601f840112614da857600080fd5b5081356001600160401b03811115614dbf57600080fd5b6020830191508360208260051b8501011115614dda57600080fd5b9250929050565b60008060208385031215614df457600080fd5b82356001600160401b03811115614e0a57600080fd5b614e1685828601614d96565b90969095509350505050565b60008060408385031215614e3557600080fd5b8235614e4081614ac0565b91506020830135614c3e81614ac0565b6000610180820190508251825260208301516020830152604083015160408301526060830151614e8b60608401826001600160401b03169052565b506080830151614ea660808401826001600160401b03169052565b5060a0830151614ec160a08401826001600160401b03169052565b5060c0830151614edc60c08401826001600160401b03169052565b5060e0830151614ef760e08401826001600160401b03169052565b50610100838101516001600160401b038116848301525050610120838101516001600160401b038116848301525050610140838101516001600160401b03811684830152505061016092830151919092015290565b600060208284031215614f5e57600080fd5b81356140f181614c02565b60008060008060408587031215614f7f57600080fd5b84356001600160401b0380821115614f9657600080fd5b614fa288838901614d96565b90965094506020870135915080821115614fbb57600080fd5b50614fc887828801614d96565b95989497509550505050565b60008060408385031215614fe757600080fd5b614e4083614b53565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60006020828403121561503057600080fd5b81516140f181614c02565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6001600160a01b039290921682521515602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b803560048110614b6a57600080fd5b60006020828403121561513b57600080fd5b6140f18261511a565b6020808252600b908201526a454d5054595f415252415960a81b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600060001982141561519357615193615169565b5060010190565b6020808252600c908201526b0aea49e9c8ebe988a9c8ea8960a31b604082015260600190565b6000602082840312156151d257600080fd5b5051919050565b60006001600160401b038083168185168083038211156151fb576151fb615169565b01949350505050565b60006080828403121561521657600080fd5b61521e614c5f565b905082601f83011261522f57600080fd5b615237614c5f565b80604084018581111561524957600080fd5b845b8181101561526357803584526020938401930161524b565b5081845285605f86011261527657600080fd5b61527e614c5f565b9250829150608085018681111561529457600080fd5b808210156152b8576152a582614b53565b8452602084019350602082019150615294565b505060208301525092915050565b6000608082840312156152d857600080fd5b6140f18383615204565b60006001600160401b03808316818114156152ff576152ff615169565b6001019392505050565b60006001600160401b038381169083168181101561532957615329615169565b039392505050565b600060a0828403121561534357600080fd5b61534b614c5f565b90506153578383615204565b81526153656080830161511a565b602082015292915050565b6000610160828403121561538357600080fd5b604051606081018181106001600160401b03821117156153a5576153a5614c49565b6040526153b28484615331565b81526153c18460a08501615331565b60208201526153d36101408401614b53565b60408201529392505050565b604081833760006040838101828152908301915b6002811015615422576001600160401b0361540d84614b53565b168252602092830192909101906001016153f3565b5050506154316080820161511a565b6004811061544f57634e487b7160e01b600052602160045260246000fd5b806080840152505050565b8581526101e0810161546f60208301876153df565b61547f60c0830160a088016153df565b6001600160401b036154946101408801614b53565b1661016083015284610180830152836101a0830152826101c08301529695505050505050565b6000828210156154cc576154cc615169565b500390565b8381528260208201526000600483106154fa57634e487b7160e01b600052602160045260246000fd5b5060f89190911b604082015260410192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000821982111561556d5761556d615169565b500190565b634e487b7160e01b600052603160045260246000fd5b60005b838110156155a357818101518382015260200161558b565b83811115613d4a5750506000910152565b600082516155c6818460208701615588565b9190910192915050565b83815260006020848184015260408301845182860160005b82811015615604578151845292840192908401906001016155e8565b509198975050505050505050565b6020815260008251806020840152615631816040850160208701615588565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200db4fcd6a5477c14bc0728bf4d90ecfd98b8ef2c465e6dd1d7925573d736bbc964736f6c63430008090033",
}

// RollupAdminLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupAdminLogicMetaData.ABI instead.
var RollupAdminLogicABI = RollupAdminLogicMetaData.ABI

// RollupAdminLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupAdminLogicMetaData.Bin instead.
var RollupAdminLogicBin = RollupAdminLogicMetaData.Bin

// DeployRollupAdminLogic deploys a new Ethereum contract, binding an instance of RollupAdminLogic to it.
func DeployRollupAdminLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupAdminLogic, error) {
	parsed, err := RollupAdminLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupAdminLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// RollupAdminLogic is an auto generated Go binding around an Ethereum contract.
type RollupAdminLogic struct {
	RollupAdminLogicCaller     // Read-only binding to the contract
	RollupAdminLogicTransactor // Write-only binding to the contract
	RollupAdminLogicFilterer   // Log filterer for contract events
}

// RollupAdminLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupAdminLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupAdminLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupAdminLogicSession struct {
	Contract     *RollupAdminLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupAdminLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupAdminLogicCallerSession struct {
	Contract *RollupAdminLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupAdminLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupAdminLogicTransactorSession struct {
	Contract     *RollupAdminLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupAdminLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupAdminLogicRaw struct {
	Contract *RollupAdminLogic // Generic contract binding to access the raw methods on
}

// RollupAdminLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupAdminLogicCallerRaw struct {
	Contract *RollupAdminLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupAdminLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactorRaw struct {
	Contract *RollupAdminLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupAdminLogic creates a new instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogic(address common.Address, backend bind.ContractBackend) (*RollupAdminLogic, error) {
	contract, err := bindRollupAdminLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// NewRollupAdminLogicCaller creates a new read-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupAdminLogicCaller, error) {
	contract, err := bindRollupAdminLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicCaller{contract: contract}, nil
}

// NewRollupAdminLogicTransactor creates a new write-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupAdminLogicTransactor, error) {
	contract, err := bindRollupAdminLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicTransactor{contract: contract}, nil
}

// NewRollupAdminLogicFilterer creates a new log filterer instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupAdminLogicFilterer, error) {
	contract, err := bindRollupAdminLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicFilterer{contract: contract}, nil
}

// bindRollupAdminLogic binds a generic wrapper to an already deployed contract.
func bindRollupAdminLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupAdminLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.RollupAdminLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked     *big.Int
		Index            uint64
		LatestStakedNode uint64
		CurrentChallenge uint64
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.LatestStakedNode = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupAdminLogic.Contract.CurrentChallenge(&_RollupAdminLogic.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupAdminLogic.Contract.CurrentChallenge(&_RollupAdminLogic.CallOpts, staker)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ExtraChallengeTimeBlocks(&_RollupAdminLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ExtraChallengeTimeBlocks(&_RollupAdminLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupAdminLogic.Contract.FirstUnresolvedNode(&_RollupAdminLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupAdminLogic.Contract.FirstUnresolvedNode(&_RollupAdminLogic.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupAdminLogic *RollupAdminLogicSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupAdminLogic.Contract.GetNode(&_RollupAdminLogic.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupAdminLogic.Contract.GetNode(&_RollupAdminLogic.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsStakedOnLatestConfirmed(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isStakedOnLatestConfirmed", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStakedOnLatestConfirmed(&_RollupAdminLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStakedOnLatestConfirmed(&_RollupAdminLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsZombie(&_RollupAdminLogic.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsZombie(&_RollupAdminLogic.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) LastStakeBlock() (uint64, error) {
	return _RollupAdminLogic.Contract.LastStakeBlock(&_RollupAdminLogic.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LastStakeBlock() (uint64, error) {
	return _RollupAdminLogic.Contract.LastStakeBlock(&_RollupAdminLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestConfirmed() (uint64, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestConfirmed() (uint64, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestNodeCreated() (uint64, error) {
	return _RollupAdminLogic.Contract.LatestNodeCreated(&_RollupAdminLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestNodeCreated() (uint64, error) {
	return _RollupAdminLogic.Contract.LatestNodeCreated(&_RollupAdminLogic.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupAdminLogic.Contract.LatestStakedNode(&_RollupAdminLogic.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupAdminLogic.Contract.LatestStakedNode(&_RollupAdminLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.NodeHasStaker(&_RollupAdminLogic.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.NodeHasStaker(&_RollupAdminLogic.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorUtils() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorUtils(&_RollupAdminLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorUtils(&_RollupAdminLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupAdminLogic.Contract.ZombieAddress(&_RollupAdminLogic.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupAdminLogic.Contract.ZombieAddress(&_RollupAdminLogic.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) ZombieCount() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ZombieCount(&_RollupAdminLogic.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ZombieCount() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ZombieCount(&_RollupAdminLogic.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupAdminLogic.Contract.ZombieLatestStakedNode(&_RollupAdminLogic.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupAdminLogic.Contract.ZombieLatestStakedNode(&_RollupAdminLogic.CallOpts, zombieNum)
}

// CreateNitroMigrationGenesis is a paid mutator transaction binding the contract method 0x7b83a3fe.
//
// Solidity: function createNitroMigrationGenesis((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) CreateNitroMigrationGenesis(opts *bind.TransactOpts, assertion RollupLibAssertion) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "createNitroMigrationGenesis", assertion)
}

// CreateNitroMigrationGenesis is a paid mutator transaction binding the contract method 0x7b83a3fe.
//
// Solidity: function createNitroMigrationGenesis((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) CreateNitroMigrationGenesis(assertion RollupLibAssertion) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.CreateNitroMigrationGenesis(&_RollupAdminLogic.TransactOpts, assertion)
}

// CreateNitroMigrationGenesis is a paid mutator transaction binding the contract method 0x7b83a3fe.
//
// Solidity: function createNitroMigrationGenesis((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) CreateNitroMigrationGenesis(assertion RollupLibAssertion) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.CreateNitroMigrationGenesis(&_RollupAdminLogic.TransactOpts, assertion)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceConfirmNode(opts *bind.TransactOpts, nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceConfirmNode", nodeNum, blockHash, sendRoot)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceConfirmNode(nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmNode(&_RollupAdminLogic.TransactOpts, nodeNum, blockHash, sendRoot)
}

// ForceConfirmNode is a paid mutator transaction binding the contract method 0x2f7968e8.
//
// Solidity: function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceConfirmNode(nodeNum uint64, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmNode(&_RollupAdminLogic.TransactOpts, nodeNum, blockHash, sendRoot)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceCreateNode(opts *bind.TransactOpts, prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceCreateNode", prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceCreateNode(prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateNode(&_RollupAdminLogic.TransactOpts, prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceCreateNode is a paid mutator transaction binding the contract method 0x470dce4e.
//
// Solidity: function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceCreateNode(prevNode uint64, prevNodeInboxMaxCount *big.Int, assertion RollupLibAssertion, expectedNodeHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateNode(&_RollupAdminLogic.TransactOpts, prevNode, prevNodeInboxMaxCount, assertion, expectedNodeHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceRefundStaker(opts *bind.TransactOpts, staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceRefundStaker", staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stakerA, address[] stakerB) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceResolveChallenge(opts *bind.TransactOpts, stakerA []common.Address, stakerB []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceResolveChallenge", stakerA, stakerB)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stakerA, address[] stakerB) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceResolveChallenge(stakerA []common.Address, stakerB []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceResolveChallenge(&_RollupAdminLogic.TransactOpts, stakerA, stakerB)
}

// ForceResolveChallenge is a paid mutator transaction binding the contract method 0xf38c9379.
//
// Solidity: function forceResolveChallenge(address[] stakerA, address[] stakerB) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceResolveChallenge(stakerA []common.Address, stakerB []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceResolveChallenge(&_RollupAdminLogic.TransactOpts, stakerA, stakerB)
}

// Initialize is a paid mutator transaction binding the contract method 0x29ce5f2b.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,uint64,(uint256,uint256,uint256,uint256)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x29ce5f2b.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,uint64,(uint256,uint256,uint256,uint256)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x29ce5f2b.
//
// Solidity: function initialize((uint64,uint64,address,uint256,bytes32,address,address,uint256,uint64,(uint256,uint256,uint256,uint256)) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetExtraChallengeTimeBlocks(opts *bind.TransactOpts, newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setExtraChallengeTimeBlocks", newExtraTimeBlocks)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetExtraChallengeTimeBlocks(newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetExtraChallengeTimeBlocks(&_RollupAdminLogic.TransactOpts, newExtraTimeBlocks)
}

// SetExtraChallengeTimeBlocks is a paid mutator transaction binding the contract method 0x6136fe2e.
//
// Solidity: function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetExtraChallengeTimeBlocks(newExtraTimeBlocks uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetExtraChallengeTimeBlocks(&_RollupAdminLogic.TransactOpts, newExtraTimeBlocks)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetInbox(opts *bind.TransactOpts, newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setInbox", newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetStakeToken(opts *bind.TransactOpts, newStakeToken common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setStakeToken", newStakeToken)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetStakeToken(newStakeToken common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetStakeToken(&_RollupAdminLogic.TransactOpts, newStakeToken)
}

// SetStakeToken is a paid mutator transaction binding the contract method 0x0397d458.
//
// Solidity: function setStakeToken(address newStakeToken) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetStakeToken(newStakeToken common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetStakeToken(&_RollupAdminLogic.TransactOpts, newStakeToken)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeBeacon(opts *bind.TransactOpts, beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeBeacon", beacon, newImplementation)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeBeacon(beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeBeacon(&_RollupAdminLogic.TransactOpts, beacon, newImplementation)
}

// UpgradeBeacon is a paid mutator transaction binding the contract method 0x848bf918.
//
// Solidity: function upgradeBeacon(address beacon, address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeBeacon(beacon common.Address, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeBeacon(&_RollupAdminLogic.TransactOpts, beacon, newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryTo", newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryToAndCall", newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// RollupAdminLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChangedIterator struct {
	Event *RollupAdminLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAdminChanged represents a AdminChanged event raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupAdminLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAdminChangedIterator{contract: _RollupAdminLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAdminChanged)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAdminChanged(log types.Log) (*RollupAdminLogicAdminChanged, error) {
	event := new(RollupAdminLogicAdminChanged)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgradedIterator struct {
	Event *RollupAdminLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupAdminLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicBeaconUpgradedIterator{contract: _RollupAdminLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicBeaconUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupAdminLogicBeaconUpgraded, error) {
	event := new(RollupAdminLogicBeaconUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeConfirmedIterator struct {
	Event *RollupAdminLogicNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicNodeConfirmed represents a NodeConfirmed event raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*RollupAdminLogicNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicNodeConfirmedIterator{contract: _RollupAdminLogic.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicNodeConfirmed)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseNodeConfirmed(log types.Log) (*RollupAdminLogicNodeConfirmed, error) {
	event := new(RollupAdminLogicNodeConfirmed)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeCreatedIterator struct {
	Event *RollupAdminLogicNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicNodeCreated represents a NodeCreated event raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          RollupLibAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*RollupAdminLogicNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicNodeCreatedIterator{contract: _RollupAdminLogic.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicNodeCreated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseNodeCreated(log types.Log) (*RollupAdminLogicNodeCreated, error) {
	event := new(RollupAdminLogicNodeCreated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeRejectedIterator struct {
	Event *RollupAdminLogicNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicNodeRejected represents a NodeRejected event raised by the RollupAdminLogic contract.
type RollupAdminLogicNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*RollupAdminLogicNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicNodeRejectedIterator{contract: _RollupAdminLogic.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicNodeRejected)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseNodeRejected(log types.Log) (*RollupAdminLogicNodeRejected, error) {
	event := new(RollupAdminLogicNodeRejected)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the RollupAdminLogic contract.
type RollupAdminLogicOwnerFunctionCalledIterator struct {
	Event *RollupAdminLogicOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the RollupAdminLogic contract.
type RollupAdminLogicOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*RollupAdminLogicOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicOwnerFunctionCalledIterator{contract: _RollupAdminLogic.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicOwnerFunctionCalled)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseOwnerFunctionCalled(log types.Log) (*RollupAdminLogicOwnerFunctionCalled, error) {
	event := new(RollupAdminLogicOwnerFunctionCalled)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupAdminLogic contract.
type RollupAdminLogicPausedIterator struct {
	Event *RollupAdminLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicPaused represents a Paused event raised by the RollupAdminLogic contract.
type RollupAdminLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupAdminLogicPausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicPausedIterator{contract: _RollupAdminLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicPaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParsePaused(log types.Log) (*RollupAdminLogicPaused, error) {
	event := new(RollupAdminLogicPaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStartedIterator struct {
	Event *RollupAdminLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupAdminLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupChallengeStartedIterator{contract: _RollupAdminLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupChallengeStarted)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupAdminLogicRollupChallengeStarted, error) {
	event := new(RollupAdminLogicRollupChallengeStarted)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitializedIterator struct {
	Event *RollupAdminLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupInitialized represents a RollupInitialized event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupAdminLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupInitializedIterator{contract: _RollupAdminLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupInitialized)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupAdminLogicRollupInitialized, error) {
	event := new(RollupAdminLogicRollupInitialized)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpausedIterator struct {
	Event *RollupAdminLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUnpaused represents a Unpaused event raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupAdminLogicUnpausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUnpausedIterator{contract: _RollupAdminLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUnpaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUnpaused(log types.Log) (*RollupAdminLogicUnpaused, error) {
	event := new(RollupAdminLogicUnpaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedIterator struct {
	Event *RollupAdminLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgraded represents a Upgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedIterator{contract: _RollupAdminLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgraded(log types.Log) (*RollupAdminLogicUpgraded, error) {
	event := new(RollupAdminLogicUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondaryIterator struct {
	Event *RollupAdminLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedSecondaryIterator{contract: _RollupAdminLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgradedSecondary)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupAdminLogicUpgradedSecondary, error) {
	event := new(RollupAdminLogicUpgradedSecondary)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdatedIterator struct {
	Event *RollupAdminLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupAdminLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserStakeUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserStakeUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupAdminLogicUserStakeUpdated, error) {
	event := new(RollupAdminLogicUserStakeUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupAdminLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupAdminLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupAdminLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreMetaData contains all meta data concerning the RollupCore contract.
var RollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakedOnLatestConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// RollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCoreMetaData.ABI instead.
var RollupCoreABI = RollupCoreMetaData.ABI

// RollupCore is an auto generated Go binding around an Ethereum contract.
type RollupCore struct {
	RollupCoreCaller     // Read-only binding to the contract
	RollupCoreTransactor // Write-only binding to the contract
	RollupCoreFilterer   // Log filterer for contract events
}

// RollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCoreSession struct {
	Contract     *RollupCore       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCoreCallerSession struct {
	Contract *RollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// RollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCoreTransactorSession struct {
	Contract     *RollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCoreRaw struct {
	Contract *RollupCore // Generic contract binding to access the raw methods on
}

// RollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCoreCallerRaw struct {
	Contract *RollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCoreTransactorRaw struct {
	Contract *RollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCore creates a new instance of RollupCore, bound to a specific deployed contract.
func NewRollupCore(address common.Address, backend bind.ContractBackend) (*RollupCore, error) {
	contract, err := bindRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCore{RollupCoreCaller: RollupCoreCaller{contract: contract}, RollupCoreTransactor: RollupCoreTransactor{contract: contract}, RollupCoreFilterer: RollupCoreFilterer{contract: contract}}, nil
}

// NewRollupCoreCaller creates a new read-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*RollupCoreCaller, error) {
	contract, err := bindRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreCaller{contract: contract}, nil
}

// NewRollupCoreTransactor creates a new write-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCoreTransactor, error) {
	contract, err := bindRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreTransactor{contract: contract}, nil
}

// NewRollupCoreFilterer creates a new log filterer instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCoreFilterer, error) {
	contract, err := bindRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCoreFilterer{contract: contract}, nil
}

// bindRollupCore binds a generic wrapper to an already deployed contract.
func bindRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupCoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.RollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupCore *RollupCoreCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked     *big.Int
		Index            uint64
		LatestStakedNode uint64
		CurrentChallenge uint64
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.LatestStakedNode = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupCore *RollupCoreSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupCore *RollupCoreCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupCore *RollupCoreCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupCore *RollupCoreSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupCore.Contract.CurrentChallenge(&_RollupCore.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupCore.Contract.CurrentChallenge(&_RollupCore.CallOpts, staker)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupCore.Contract.ExtraChallengeTimeBlocks(&_RollupCore.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupCore.Contract.ExtraChallengeTimeBlocks(&_RollupCore.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupCore *RollupCoreCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupCore *RollupCoreSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupCore.Contract.FirstUnresolvedNode(&_RollupCore.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupCore.Contract.FirstUnresolvedNode(&_RollupCore.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupCore *RollupCoreCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupCore *RollupCoreSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupCore.Contract.GetNode(&_RollupCore.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupCore *RollupCoreCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupCore.Contract.GetNode(&_RollupCore.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupCore *RollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupCore *RollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupCore *RollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsStakedOnLatestConfirmed(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isStakedOnLatestConfirmed", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStakedOnLatestConfirmed(&_RollupCore.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStakedOnLatestConfirmed(&_RollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsZombie(&_RollupCore.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsZombie(&_RollupCore.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupCore *RollupCoreCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupCore *RollupCoreSession) LastStakeBlock() (uint64, error) {
	return _RollupCore.Contract.LastStakeBlock(&_RollupCore.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) LastStakeBlock() (uint64, error) {
	return _RollupCore.Contract.LastStakeBlock(&_RollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupCore *RollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupCore *RollupCoreSession) LatestConfirmed() (uint64, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) LatestConfirmed() (uint64, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupCore *RollupCoreCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupCore *RollupCoreSession) LatestNodeCreated() (uint64, error) {
	return _RollupCore.Contract.LatestNodeCreated(&_RollupCore.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) LatestNodeCreated() (uint64, error) {
	return _RollupCore.Contract.LatestNodeCreated(&_RollupCore.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupCore *RollupCoreCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupCore *RollupCoreSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupCore.Contract.LatestStakedNode(&_RollupCore.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupCore.Contract.LatestStakedNode(&_RollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupCore.Contract.NodeHasStaker(&_RollupCore.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupCore.Contract.NodeHasStaker(&_RollupCore.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCore *RollupCoreCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCore *RollupCoreSession) ValidatorUtils() (common.Address, error) {
	return _RollupCore.Contract.ValidatorUtils(&_RollupCore.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupCore.Contract.ValidatorUtils(&_RollupCore.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupCore *RollupCoreCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupCore *RollupCoreSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupCore.Contract.ZombieAddress(&_RollupCore.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupCore *RollupCoreCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupCore.Contract.ZombieAddress(&_RollupCore.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupCore *RollupCoreCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupCore *RollupCoreSession) ZombieCount() (*big.Int, error) {
	return _RollupCore.Contract.ZombieCount(&_RollupCore.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) ZombieCount() (*big.Int, error) {
	return _RollupCore.Contract.ZombieCount(&_RollupCore.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupCore *RollupCoreCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupCore *RollupCoreSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupCore.Contract.ZombieLatestStakedNode(&_RollupCore.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupCore.Contract.ZombieLatestStakedNode(&_RollupCore.CallOpts, zombieNum)
}

// RollupCoreNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the RollupCore contract.
type RollupCoreNodeConfirmedIterator struct {
	Event *RollupCoreNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreNodeConfirmed represents a NodeConfirmed event raised by the RollupCore contract.
type RollupCoreNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*RollupCoreNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreNodeConfirmedIterator{contract: _RollupCore.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *RollupCoreNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreNodeConfirmed)
				if err := _RollupCore.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) ParseNodeConfirmed(log types.Log) (*RollupCoreNodeConfirmed, error) {
	event := new(RollupCoreNodeConfirmed)
	if err := _RollupCore.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the RollupCore contract.
type RollupCoreNodeCreatedIterator struct {
	Event *RollupCoreNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreNodeCreated represents a NodeCreated event raised by the RollupCore contract.
type RollupCoreNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          RollupLibAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupCore *RollupCoreFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*RollupCoreNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreNodeCreatedIterator{contract: _RollupCore.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupCore *RollupCoreFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *RollupCoreNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreNodeCreated)
				if err := _RollupCore.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupCore *RollupCoreFilterer) ParseNodeCreated(log types.Log) (*RollupCoreNodeCreated, error) {
	event := new(RollupCoreNodeCreated)
	if err := _RollupCore.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the RollupCore contract.
type RollupCoreNodeRejectedIterator struct {
	Event *RollupCoreNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreNodeRejected represents a NodeRejected event raised by the RollupCore contract.
type RollupCoreNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupCore *RollupCoreFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*RollupCoreNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreNodeRejectedIterator{contract: _RollupCore.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupCore *RollupCoreFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *RollupCoreNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreNodeRejected)
				if err := _RollupCore.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupCore *RollupCoreFilterer) ParseNodeRejected(log types.Log) (*RollupCoreNodeRejected, error) {
	event := new(RollupCoreNodeRejected)
	if err := _RollupCore.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCorePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupCore contract.
type RollupCorePausedIterator struct {
	Event *RollupCorePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCorePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCorePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCorePaused represents a Paused event raised by the RollupCore contract.
type RollupCorePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupCorePausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupCorePausedIterator{contract: _RollupCore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupCorePaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCorePaused)
				if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) ParsePaused(log types.Log) (*RollupCorePaused, error) {
	event := new(RollupCorePaused)
	if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupCore contract.
type RollupCoreRollupChallengeStartedIterator struct {
	Event *RollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupCore contract.
type RollupCoreRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupCore *RollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupChallengeStartedIterator{contract: _RollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupCore *RollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupChallengeStarted)
				if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupCore *RollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupCoreRollupChallengeStarted, error) {
	event := new(RollupCoreRollupChallengeStarted)
	if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupCore contract.
type RollupCoreRollupInitializedIterator struct {
	Event *RollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupInitialized represents a RollupInitialized event raised by the RollupCore contract.
type RollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupInitializedIterator{contract: _RollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupInitialized)
				if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) ParseRollupInitialized(log types.Log) (*RollupCoreRollupInitialized, error) {
	event := new(RollupCoreRollupInitialized)
	if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupCore contract.
type RollupCoreUnpausedIterator struct {
	Event *RollupCoreUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUnpaused represents a Unpaused event raised by the RollupCore contract.
type RollupCoreUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupCoreUnpausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupCoreUnpausedIterator{contract: _RollupCore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupCoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUnpaused)
				if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) ParseUnpaused(log types.Log) (*RollupCoreUnpaused, error) {
	event := new(RollupCoreUnpaused)
	if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupCore contract.
type RollupCoreUserStakeUpdatedIterator struct {
	Event *RollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the RollupCore contract.
type RollupCoreUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserStakeUpdatedIterator{contract: _RollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserStakeUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*RollupCoreUserStakeUpdated, error) {
	event := new(RollupCoreUserStakeUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserWithdrawableFundsUpdatedIterator{contract: _RollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserWithdrawableFundsUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(RollupCoreUserWithdrawableFundsUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorMetaData contains all meta data concerning the RollupCreator contract.
var RollupCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rollupAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inboxAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"RollupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeCreator\",\"outputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManagerTemplate\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"extraChallengeTimeBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"expectedRollupAddr\",\"type\":\"address\"}],\"name\":\"createRollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osp\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupAdminLogic\",\"outputs\":[{\"internalType\":\"contractIRollupAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupUserLogic\",\"outputs\":[{\"internalType\":\"contractIRollupUser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"_bridgeCreator\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"_osp\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeManager\",\"name\":\"_challengeManagerLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupAdmin\",\"name\":\"_rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"_rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorWalletCreator\",\"type\":\"address\"}],\"name\":\"setTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6135888061007e6000396000f3fe60806040523480156200001157600080fd5b5060043610620000c35760003560e01c8063bc45e0ae116200007a578063bc45e0ae1462000152578063c1ed80bb1462000166578063e8a1a09f146200017d578063f26a62c61462000194578063f2fde38b14620001a8578063f860cefa14620001bf57600080fd5b8063014cc92c14620000c8578063715018a614620000f85780638da5cb5b14620001045780639c683d1014620001165780639d4798e3146200012a5780639dba3241146200013e575b600080fd5b600654620000dc906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b62000102620001d3565b005b6000546001600160a01b0316620000dc565b600354620000dc906001600160a01b031681565b600554620000dc906001600160a01b031681565b600454620000dc906001600160a01b031681565b600754620000dc906001600160a01b031681565b620000dc62000177366004620008e9565b62000217565b620001026200018e366004620009d8565b62000603565b600254620000dc906001600160a01b031681565b62000102620001b936600462000a7d565b620006d0565b600154620000dc906001600160a01b031681565b6000546001600160a01b03163314620002095760405162461bcd60e51b8152600401620002009062000aa4565b60405180910390fd5b62000215600062000772565b565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290526040516200025d90620007c2565b604051809103906000f0801580156200027a573d6000803e3d6000fd5b506001600160a01b039081168083526001546101208701516040516301b1b91f60e61b81529190931692636c6e47c092620002bc929091889160040162000ad9565b60a060405180830381600087803b158015620002d757600080fd5b505af1158015620002ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000312919062000b28565b6001600160a01b0390811660a087810191909152918116608087015291821660608601529181166040808601919091529281166020850152835191870151925163f2fde38b60e01b81529281166004840152169063f2fde38b90602401600060405180830381600087803b1580156200038a57600080fd5b505af11580156200039f573d6000803e3d6000fd5b50506003548351604051600094506001600160a01b03909216925090620003c690620007d0565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f08015801562000409573d6000803e3d6000fd5b5060408084015160208501516002549251637c643b2f60e11b81529394506001600160a01b038086169463f8c8765e9462000450948b949093909291169060040162000ba8565b600060405180830381600087803b1580156200046b57600080fd5b505af115801562000480573d6000803e3d6000fd5b505060408051610140810182526020808701516001600160a01b0390811683528784015181169183019190915260608088015182168385015260a08089015183169184019190915260808089015183169084015286821690830152600454811660c0830152600554811660e083015260065481166101008301526007541661012082015290518893509091506200051790620007de565b6200052492919062000ca5565b604051809103906000f08015801562000541573d6000803e3d6000fd5b506001600160a01b0390811660c08401819052908516146200059a5760405162461bcd60e51b81526020600482015260116024820152702ba927a723afa927a6262aa82fa0a2222960791b604482015260640162000200565b8160c001516001600160a01b03167f9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc98360600151846000015185604001518660200151604051620005ef949392919062000ba8565b60405180910390a25060c001519392505050565b6000546001600160a01b03163314620006305760405162461bcd60e51b8152600401620002009062000aa4565b600180546001600160a01b03199081166001600160a01b038a811691909117909255600280548216898416179055600380548216888416179055600480548216878416179055600580548216868416179055600680548216858416179055600780549091169183169190911790556040517fc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b90600090a150505050505050565b6000546001600160a01b03163314620006fd5760405162461bcd60e51b8152600401620002009062000aa4565b6001600160a01b038116620007645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000200565b6200076f8162000772565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107be8062000d9283390190565b610f62806200155083390190565b6110a180620024b283390190565b6001600160a01b03169052565b604051610140810167ffffffffffffffff811182821017156200082c57634e487b7160e01b600052604160045260246000fd5b60405290565b803567ffffffffffffffff811681146200084b57600080fd5b919050565b6001600160a01b03811681146200076f57600080fd5b80356200084b8162000850565b6000608082840312156200088657600080fd5b6040516080810181811067ffffffffffffffff82111715620008b857634e487b7160e01b600052604160045260246000fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b6000808284036101c0811215620008ff57600080fd5b6101a0808212156200091057600080fd5b6200091a620007f9565b9150620009278562000832565b8252620009376020860162000832565b60208301526200094a6040860162000866565b604083015260608501356060830152608085013560808301526200097160a0860162000866565b60a08301526200098460c0860162000866565b60c083015260e085013560e0830152610100620009a381870162000832565b90830152610120620009b88787830162000873565b8184015250819350620009cd81860162000866565b925050509250929050565b600080600080600080600060e0888a031215620009f457600080fd5b873562000a018162000850565b9650602088013562000a138162000850565b9550604088013562000a258162000850565b9450606088013562000a378162000850565b9350608088013562000a498162000850565b925060a088013562000a5b8162000850565b915060c088013562000a6d8162000850565b8091505092959891949750929550565b60006020828403121562000a9057600080fd5b813562000a9d8162000850565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b0384811682528316602082015260c0810162000b206040830184805182526020810151602083015260408101516040830152606081015160608301525050565b949350505050565b600080600080600060a0868803121562000b4157600080fd5b855162000b4e8162000850565b602087015190955062000b618162000850565b604087015190945062000b748162000850565b606087015190935062000b878162000850565b608087015190925062000b9a8162000850565b809150509295509295909350565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b62000be0828251620007ec565b602081015162000bf46020840182620007ec565b50604081015162000c096040840182620007ec565b50606081015162000c1e6060840182620007ec565b50608081015162000c336080840182620007ec565b5060a081015162000c4860a0840182620007ec565b5060c081015162000c5d60c0840182620007ec565b5060e081015162000c7260e0840182620007ec565b506101008082015162000c8882850182620007ec565b50506101208082015162000c9f82850182620007ec565b50505050565b825167ffffffffffffffff1681526102e08101602084015162000cd4602084018267ffffffffffffffff169052565b50604084015162000ce96040840182620007ec565b50606084015160608301526080840151608083015260a084015162000d1260a0840182620007ec565b5060c084015162000d2760c0840182620007ec565b5060e084015160e08301526101008085015162000d4f8285018267ffffffffffffffff169052565b505061012084810151805184830152602081015161014085015260408101516101608501526060810151610180850152505062000a9d6101a083018462000bd356fe608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107408061007e6000396000f3fe60806040526004361061006b5760003560e01c8063204e1c7a14610070578063715018a6146100a65780637eff275e146100bd5780638da5cb5b146100dd5780639623609d146100f257806399a88ec414610105578063f2fde38b14610125578063f3b7dead14610145575b600080fd5b34801561007c57600080fd5b5061009061008b3660046104f6565b610165565b60405161009d919061051a565b60405180910390f35b3480156100b257600080fd5b506100bb6101f6565b005b3480156100c957600080fd5b506100bb6100d836600461052e565b61023a565b3480156100e957600080fd5b506100906102cb565b6100bb61010036600461057d565b6102da565b34801561011157600080fd5b506100bb61012036600461052e565b610370565b34801561013157600080fd5b506100bb6101403660046104f6565b6103cb565b34801561015157600080fd5b506100906101603660046104f6565b61046b565b6000806000836001600160a01b031660405161018b90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101c6576040519150601f19603f3d011682016040523d82523d6000602084013e6101cb565b606091505b5091509150816101da57600080fd5b808060200190518101906101ee9190610653565b949350505050565b336101ff6102cb565b6001600160a01b03161461022e5760405162461bcd60e51b815260040161022590610670565b60405180910390fd5b6102386000610491565b565b336102436102cb565b6001600160a01b0316146102695760405162461bcd60e51b815260040161022590610670565b6040516308f2839760e41b81526001600160a01b03831690638f2839709061029590849060040161051a565b600060405180830381600087803b1580156102af57600080fd5b505af11580156102c3573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031690565b336102e36102cb565b6001600160a01b0316146103095760405162461bcd60e51b815260040161022590610670565b60405163278f794360e11b81526001600160a01b03841690634f1ef28690349061033990869086906004016106a5565b6000604051808303818588803b15801561035257600080fd5b505af1158015610366573d6000803e3d6000fd5b5050505050505050565b336103796102cb565b6001600160a01b03161461039f5760405162461bcd60e51b815260040161022590610670565b604051631b2ce7f360e11b81526001600160a01b03831690633659cfe69061029590849060040161051a565b336103d46102cb565b6001600160a01b0316146103fa5760405162461bcd60e51b815260040161022590610670565b6001600160a01b03811661045f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610225565b61046881610491565b50565b6000806000836001600160a01b031660405161018b906303e1469160e61b815260040190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461046857600080fd5b60006020828403121561050857600080fd5b8135610513816104e1565b9392505050565b6001600160a01b0391909116815260200190565b6000806040838503121561054157600080fd5b823561054c816104e1565b9150602083013561055c816104e1565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561059257600080fd5b833561059d816104e1565b925060208401356105ad816104e1565b9150604084013567ffffffffffffffff808211156105ca57600080fd5b818601915086601f8301126105de57600080fd5b8135818111156105f0576105f0610567565b604051601f8201601f19908116603f0116810190838211818310171561061857610618610567565b8160405282815289602084870101111561063157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561066557600080fd5b8151610513816104e1565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60018060a01b038316815260006020604081840152835180604085015260005b818110156106e1578581018301518582016060015282016106c5565b818111156106f3576000606083870101525b50601f01601f19169290920160600194935050505056fea2646970667358221220a5dee8aa81b3b802119ebd31e1632959bc2fd941aebda6b9fbe1de3ddf25e5ba64736f6c63430008090033608060405260405162000f6238038062000f62833981016040819052620000269162000519565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005f9565b60008051602062000f1b833981519152146200007557620000756200061f565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005f9565b60008051602062000efb83398151915214620000d357620000d36200061f565b620000de8262000124565b50505062000688565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000f3b6027913962000381565b9392505050565b60006200021a60008051602062000efb83398151915260001b6200046760201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000efb83398151915260001b6200046760201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046a60201b6200028c1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000f1b83398151915260001b6200046760201b620002081760201c565b60606001600160a01b0384163b620003eb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b03168560405162000408919062000635565b600060405180830381855af49150503d806000811462000445576040519150601f19603f3d011682016040523d82523d6000602084013e6200044a565b606091505b5090925090506200045d82828662000479565b9695505050505050565b90565b6001600160a01b03163b151590565b606083156200048a575081620001e9565b8251156200049b5782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000653565b80516001600160a01b0381168114620004cf57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000507578181015183820152602001620004ed565b838111156200011d5750506000910152565b6000806000606084860312156200052f57600080fd5b6200053a84620004b7565b92506200054a60208501620004b7565b60408501519092506001600160401b03808211156200056857600080fd5b818601915086601f8301126200057d57600080fd5b815181811115620005925762000592620004d4565b604051601f8201601f19908116603f01168101908382118183101715620005bd57620005bd620004d4565b81604052828152896020848701011115620005d757600080fd5b620005ea836020830160208801620004ea565b80955050505050509250925092565b6000828210156200061a57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000649818460208701620004ea565b9190910192915050565b602081526000825180602084015262000674816040850160208701620004ea565b601f01601f19169190910160400192915050565b61086380620006986000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106ed565b610118565b61005b610093366004610708565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106ed565b61020b565b3480156100f557600080fd5b506100ad610235565b61010661029b565b61011661011161033a565b610344565b565b610120610368565b6001600160a01b0316336001600160a01b03161415610157576101548160405180602001604052806000815250600061039b565b50565b6101546100fe565b610167610368565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061039b915050565b505050565b6101c36100fe565b60006101da610368565b6001600160a01b0316336001600160a01b03161415610200576101fb61033a565b905090565b6102086100fe565b90565b610213610368565b6001600160a01b0316336001600160a01b0316141561015757610154816103c6565b600061023f610368565b6001600160a01b0316336001600160a01b03161415610200576101fb610368565b606061028583836040518060600160405280602781526020016108076027913961041a565b9392505050565b6001600160a01b03163b151590565b6102a3610368565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104f5565b3660008037600080366000845af43d6000803e808015610363573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103a48361051d565b6000825111806103b15750805b156101c3576103c08383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103ef610368565b604080516001600160a01b03928316815291841660208301520160405180910390a16101548161055d565b60606104258461028c565b6104805760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610331565b600080856001600160a01b03168560405161049b91906107b7565b600060405180830381855af49150503d80600081146104d6576040519150601f19603f3d011682016040523d82523d6000602084013e6104db565b606091505b50915091506104eb828286610606565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61038c565b6105268161063f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105c25760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610331565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60608315610615575081610285565b8251156106255782518084602001fd5b8160405162461bcd60e51b815260040161033191906107d3565b6106488161028c565b6106aa5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610331565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105e5565b80356001600160a01b03811681146106e857600080fd5b919050565b6000602082840312156106ff57600080fd5b610285826106d1565b60008060006040848603121561071d57600080fd5b610726846106d1565b9250602084013567ffffffffffffffff8082111561074357600080fd5b818601915086601f83011261075757600080fd5b81358181111561076657600080fd5b87602082850101111561077857600080fd5b6020830194508093505050509250925092565b60005b838110156107a657818101518382015260200161078e565b838111156103c05750506000910152565b600082516107c981846020870161078b565b9190910192915050565b60208152600082518060208401526107f281604085016020870161078b565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fb0d75414bd881ce16381528bf0b9b2c1bea4c3e27069fcb6981b67d1535643064736f6c63430008090033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656460806040523480156200001157600080fd5b50604051620010a1380380620010a1833981016040819052620000349162000896565b60c08101516040516329ce5f2b60e01b9062000057908590859060240162000a89565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925260e08401518583015192516001600160a01b039093166024840152909163189acdbd60e31b9060440160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915260a08601516200011660017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610462000b87565b6000805160206200101a8339815191521462000136576200013662000bad565b6200016360017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd62000b87565b6000805160206200103a8339815191521462000183576200018362000bad565b620001b060017f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546e62000b87565b6000805160206200108183398151915214620001d057620001d062000bad565b620001db8162000204565b620001e9858560006200025f565b620001f7838360006200029c565b5050505050505062000c45565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200022f620002a7565b604080516001600160a01b03928316815291841660208301520160405180910390a16200025c81620002e0565b50565b6200026a8362000395565b600082511180620002785750805b156200029757620002958383620003d760201b620000291760201c565b505b505050565b6200026a8362000406565b6000620002d16000805160206200101a83398151915260001b6200044860201b620000551760201c565b546001600160a01b0316919050565b6001600160a01b0381166200034b5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620003746000805160206200101a83398151915260001b6200044860201b620000551760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620003a0816200044b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620003ff83836040518060600160405280602781526020016200105a60279139620004ee565b9392505050565b6200041181620005d4565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b90565b62000461816200068760201b620000581760201c565b620004c55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000342565b80620003746000805160206200103a83398151915260001b6200044860201b620000551760201c565b60606001600160a01b0384163b620005585760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840162000342565b600080856001600160a01b03168560405162000575919062000bf2565b600060405180830381855af49150503d8060008114620005b2576040519150601f19603f3d011682016040523d82523d6000602084013e620005b7565b606091505b509092509050620005ca82828662000696565b9695505050505050565b620005ea816200068760201b620000581760201c565b6200065e5760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e7472616374000000000000000000606482015260840162000342565b80620003746000805160206200108183398151915260001b6200044860201b620000551760201c565b6001600160a01b03163b151590565b60608315620006a7575081620003ff565b825115620006b85782518084602001fd5b8160405162461bcd60e51b815260040162000342919062000c10565b60405161014081016001600160401b03811182821017156200070657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160401b03811681146200072457600080fd5b919050565b80516001600160a01b03811681146200072457600080fd5b6000608082840312156200075457600080fd5b604051608081016001600160401b03811182821017156200078557634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006101408284031215620007ca57600080fd5b620007d4620006d4565b9050620007e18262000729565b8152620007f16020830162000729565b6020820152620008046040830162000729565b6040820152620008176060830162000729565b60608201526200082a6080830162000729565b60808201526200083d60a0830162000729565b60a08201526200085060c0830162000729565b60c08201526200086360e0830162000729565b60e08201526101006200087881840162000729565b908201526101206200088c83820162000729565b9082015292915050565b6000808284036102e0811215620008ac57600080fd5b6101a080821215620008bd57600080fd5b620008c7620006d4565b9150620008d4856200070c565b8252620008e4602086016200070c565b6020830152620008f76040860162000729565b604083015260608501516060830152608085015160808301526200091e60a0860162000729565b60a08301526200093160c0860162000729565b60c083015260e085015160e0830152610100620009508187016200070c565b90830152610120620009658787830162000741565b81840152508193506200097b86828701620007b6565b925050509250929050565b80516001600160a01b031682526020810151620009ae60208401826001600160a01b03169052565b506040810151620009ca60408401826001600160a01b03169052565b506060810151620009e660608401826001600160a01b03169052565b50608081015162000a0260808401826001600160a01b03169052565b5060a081015162000a1e60a08401826001600160a01b03169052565b5060c081015162000a3a60c08401826001600160a01b03169052565b5060e081015162000a5660e08401826001600160a01b03169052565b50610100818101516001600160a01b038116848301525050610120818101516001600160a01b0381168483015262000295565b82516001600160401b031681526102e08101602084015162000ab660208401826001600160401b03169052565b50604084015162000ad260408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015162000b0260a08401826001600160a01b03169052565b5060c084015162000b1e60c08401826001600160a01b03169052565b5060e084015160e08301526101008085015162000b45828501826001600160401b03169052565b5050610120848101518051848301526020810151610140850152604081015161016085015260608101516101808501525050620003ff6101a083018462000986565b60008282101562000ba857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60005b8381101562000be057818101518382015260200162000bc6565b83811115620002955750506000910152565b6000825162000c0681846020870162000bc3565b9190910192915050565b602081526000825180602084015262000c3181604085016020870162000bc3565b601f01601f19169190910160400192915050565b6103c58062000c556000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b61012e565b565b606061004e838360405180606001604052806027815260200161036960279139610152565b9392505050565b90565b6001600160a01b03163b151590565b600060043610156100ad5760405162461bcd60e51b815260206004820152600b60248201526a4e4f5f46554e435f53494760a81b60448201526064015b60405180910390fd5b6000336100b861022d565b6001600160a01b031614156100d4576100cf610260565b6100dc565b6100dc610288565b90506100e781610058565b6101295760405162461bcd60e51b815260206004820152601360248201527215105491d15517d393d517d0d3d395149050d5606a1b60448201526064016100a4565b919050565b3660008037600080366000845af43d6000803e80801561014d573d6000f35b3d6000fd5b606061015d84610058565b6101b85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100a4565b600080856001600160a01b0316856040516101d39190610319565b600060405180830381855af49150503d806000811461020e576040519150601f19603f3d011682016040523d82523d6000602084013e610213565b606091505b50915091506102238282866102b0565b9695505050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610251565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d610251565b606083156102bf57508161004e565b8251156102cf5782518084602001fd5b8160405162461bcd60e51b81526004016100a49190610335565b60005b838110156103045781810151838201526020016102ec565b83811115610313576000848401525b50505050565b6000825161032b8184602087016102e9565b9190910192915050565b60208152600082518060208401526103548160408501602087016102e9565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122046c8b46bf527c290477904fd1e2d673d6972252597ff0803ae90b8dc73ed600f64736f6c63430008090033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65642b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546da264697066735822122033e68032c85290e8c471f67601bedb4a98da57418e48b05bc43b4813270e500264736f6c63430008090033",
}

// RollupCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCreatorMetaData.ABI instead.
var RollupCreatorABI = RollupCreatorMetaData.ABI

// RollupCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupCreatorMetaData.Bin instead.
var RollupCreatorBin = RollupCreatorMetaData.Bin

// DeployRollupCreator deploys a new Ethereum contract, binding an instance of RollupCreator to it.
func DeployRollupCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupCreator, error) {
	parsed, err := RollupCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// RollupCreator is an auto generated Go binding around an Ethereum contract.
type RollupCreator struct {
	RollupCreatorCaller     // Read-only binding to the contract
	RollupCreatorTransactor // Write-only binding to the contract
	RollupCreatorFilterer   // Log filterer for contract events
}

// RollupCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCreatorSession struct {
	Contract     *RollupCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCreatorCallerSession struct {
	Contract *RollupCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// RollupCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCreatorTransactorSession struct {
	Contract     *RollupCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// RollupCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCreatorRaw struct {
	Contract *RollupCreator // Generic contract binding to access the raw methods on
}

// RollupCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCreatorCallerRaw struct {
	Contract *RollupCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCreatorTransactorRaw struct {
	Contract *RollupCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCreator creates a new instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreator(address common.Address, backend bind.ContractBackend) (*RollupCreator, error) {
	contract, err := bindRollupCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// NewRollupCreatorCaller creates a new read-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorCaller(address common.Address, caller bind.ContractCaller) (*RollupCreatorCaller, error) {
	contract, err := bindRollupCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorCaller{contract: contract}, nil
}

// NewRollupCreatorTransactor creates a new write-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCreatorTransactor, error) {
	contract, err := bindRollupCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTransactor{contract: contract}, nil
}

// NewRollupCreatorFilterer creates a new log filterer instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCreatorFilterer, error) {
	contract, err := bindRollupCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorFilterer{contract: contract}, nil
}

// bindRollupCreator binds a generic wrapper to an already deployed contract.
func bindRollupCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupCreatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.RollupCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transact(opts, method, params...)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) BridgeCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "bridgeCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ChallengeManagerTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "challengeManagerTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Osp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "osp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupAdminLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupAdminLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupUserLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupUserLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCreator *RollupCreatorSession) ValidatorUtils() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorUtils(&_RollupCreator.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorUtils(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// CreateRollup is a paid mutator transaction binding the contract method 0xc1ed80bb.
//
// Solidity: function createRollup((uint64,uint64,address,uint256,bytes32,address,address,uint256,uint64,(uint256,uint256,uint256,uint256)) config, address expectedRollupAddr) returns(address)
func (_RollupCreator *RollupCreatorTransactor) CreateRollup(opts *bind.TransactOpts, config Config, expectedRollupAddr common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "createRollup", config, expectedRollupAddr)
}

// CreateRollup is a paid mutator transaction binding the contract method 0xc1ed80bb.
//
// Solidity: function createRollup((uint64,uint64,address,uint256,bytes32,address,address,uint256,uint64,(uint256,uint256,uint256,uint256)) config, address expectedRollupAddr) returns(address)
func (_RollupCreator *RollupCreatorSession) CreateRollup(config Config, expectedRollupAddr common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, config, expectedRollupAddr)
}

// CreateRollup is a paid mutator transaction binding the contract method 0xc1ed80bb.
//
// Solidity: function createRollup((uint64,uint64,address,uint256,bytes32,address,address,uint256,uint64,(uint256,uint256,uint256,uint256)) config, address expectedRollupAddr) returns(address)
func (_RollupCreator *RollupCreatorTransactorSession) CreateRollup(config Config, expectedRollupAddr common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, config, expectedRollupAddr)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xe8a1a09f.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _validatorUtils, address _validatorWalletCreator) returns()
func (_RollupCreator *RollupCreatorTransactor) SetTemplates(opts *bind.TransactOpts, _bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _validatorUtils common.Address, _validatorWalletCreator common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "setTemplates", _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _validatorUtils, _validatorWalletCreator)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xe8a1a09f.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _validatorUtils, address _validatorWalletCreator) returns()
func (_RollupCreator *RollupCreatorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _validatorUtils common.Address, _validatorWalletCreator common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _validatorUtils, _validatorWalletCreator)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xe8a1a09f.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _validatorUtils, address _validatorWalletCreator) returns()
func (_RollupCreator *RollupCreatorTransactorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _validatorUtils common.Address, _validatorWalletCreator common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _validatorUtils, _validatorWalletCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// RollupCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferredIterator struct {
	Event *RollupCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RollupCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorOwnershipTransferredIterator{contract: _RollupCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RollupCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorOwnershipTransferred)
				if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*RollupCreatorOwnershipTransferred, error) {
	event := new(RollupCreatorOwnershipTransferred)
	if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorRollupCreatedIterator is returned from FilterRollupCreated and is used to iterate over the raw logs and unpacked data for RollupCreated events raised by the RollupCreator contract.
type RollupCreatorRollupCreatedIterator struct {
	Event *RollupCreatorRollupCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorRollupCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorRollupCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorRollupCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorRollupCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorRollupCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorRollupCreated represents a RollupCreated event raised by the RollupCreator contract.
type RollupCreatorRollupCreated struct {
	RollupAddress  common.Address
	InboxAddress   common.Address
	AdminProxy     common.Address
	SequencerInbox common.Address
	Bridge         common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupCreated is a free log retrieval operation binding the contract event 0x9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc9.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address inboxAddress, address adminProxy, address sequencerInbox, address bridge)
func (_RollupCreator *RollupCreatorFilterer) FilterRollupCreated(opts *bind.FilterOpts, rollupAddress []common.Address) (*RollupCreatorRollupCreatedIterator, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "RollupCreated", rollupAddressRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorRollupCreatedIterator{contract: _RollupCreator.contract, event: "RollupCreated", logs: logs, sub: sub}, nil
}

// WatchRollupCreated is a free log subscription operation binding the contract event 0x9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc9.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address inboxAddress, address adminProxy, address sequencerInbox, address bridge)
func (_RollupCreator *RollupCreatorFilterer) WatchRollupCreated(opts *bind.WatchOpts, sink chan<- *RollupCreatorRollupCreated, rollupAddress []common.Address) (event.Subscription, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "RollupCreated", rollupAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorRollupCreated)
				if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupCreated is a log parse operation binding the contract event 0x9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc9.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address inboxAddress, address adminProxy, address sequencerInbox, address bridge)
func (_RollupCreator *RollupCreatorFilterer) ParseRollupCreated(log types.Log) (*RollupCreatorRollupCreated, error) {
	event := new(RollupCreatorRollupCreated)
	if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdatedIterator struct {
	Event *RollupCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*RollupCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTemplatesUpdatedIterator{contract: _RollupCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *RollupCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorTemplatesUpdated)
				if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*RollupCreatorTemplatesUpdated, error) {
	event := new(RollupCreatorTemplatesUpdated)
	if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxMetaData contains all meta data concerning the RollupEventInbox contract.
var RollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b506080516104a461002f600039600060c601526104a46000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063c4d66de814610051578063cb23bcb514610066578063e199be3514610095578063e78cea92146100a8575b600080fd5b61006461005f3660046103a6565b6100bb565b005b600154610079906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100646100a33660046103ca565b61024e565b600054610079906001600160a01b031681565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561014e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b6000546001600160a01b03161561017857604051633bcd329760e21b815260040160405180910390fd5b6001600160a01b03811661019f57604051631ad0f74360e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040805163cb23bcb560e01b8152905163cb23bcb591600480820192602092909190829003018186803b1580156101f357600080fd5b505afa158015610207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022b91906103e3565b600180546001600160a01b0319166001600160a01b039290921691909117905550565b6001546001600160a01b031633146102965760405162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b6044820152606401610145565b6000816040516020016102ab91815260200190565b60408051808303601f19018152908290526000805482516020840120638db5993b60e01b8552600b6004860152602485018390526044850152919350916001600160a01b0390911690638db5993b90606401602060405180830381600087803b15801561031757600080fd5b505af115801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f9190610400565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b836040516103819190610419565b60405180910390a2505050565b6001600160a01b03811681146103a357600080fd5b50565b6000602082840312156103b857600080fd5b81356103c38161038e565b9392505050565b6000602082840312156103dc57600080fd5b5035919050565b6000602082840312156103f557600080fd5b81516103c38161038e565b60006020828403121561041257600080fd5b5051919050565b600060208083528351808285015260005b818110156104465785810183015185820160400152820161042a565b81811115610458576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220ad363633e7993c10ea6389bc0b1716a2948bf34a50e8942867a64bd0fea729f564736f6c63430008090033",
}

// RollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupEventInboxMetaData.ABI instead.
var RollupEventInboxABI = RollupEventInboxMetaData.ABI

// RollupEventInboxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupEventInboxMetaData.Bin instead.
var RollupEventInboxBin = RollupEventInboxMetaData.Bin

// DeployRollupEventInbox deploys a new Ethereum contract, binding an instance of RollupEventInbox to it.
func DeployRollupEventInbox(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupEventInbox, error) {
	parsed, err := RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupEventInboxBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// RollupEventInbox is an auto generated Go binding around an Ethereum contract.
type RollupEventInbox struct {
	RollupEventInboxCaller     // Read-only binding to the contract
	RollupEventInboxTransactor // Write-only binding to the contract
	RollupEventInboxFilterer   // Log filterer for contract events
}

// RollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupEventInboxSession struct {
	Contract     *RollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupEventInboxCallerSession struct {
	Contract *RollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupEventInboxTransactorSession struct {
	Contract     *RollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupEventInboxRaw struct {
	Contract *RollupEventInbox // Generic contract binding to access the raw methods on
}

// RollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupEventInboxCallerRaw struct {
	Contract *RollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// RollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactorRaw struct {
	Contract *RollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupEventInbox creates a new instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInbox(address common.Address, backend bind.ContractBackend) (*RollupEventInbox, error) {
	contract, err := bindRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// NewRollupEventInboxCaller creates a new read-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*RollupEventInboxCaller, error) {
	contract, err := bindRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxCaller{contract: contract}, nil
}

// NewRollupEventInboxTransactor creates a new write-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupEventInboxTransactor, error) {
	contract, err := bindRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxTransactor{contract: contract}, nil
}

// NewRollupEventInboxFilterer creates a new log filterer instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupEventInboxFilterer, error) {
	contract, err := bindRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxFilterer{contract: contract}, nil
}

// bindRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupEventInboxABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.RollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_RollupEventInbox *RollupEventInboxSession) RollupInitialized(chainId *big.Int) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId)
}

// RollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredIterator struct {
	Event *RollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDelivered)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*RollupEventInboxInboxMessageDelivered, error) {
	event := new(RollupEventInboxInboxMessageDelivered)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *RollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*RollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupLibMetaData contains all meta data concerning the RollupLib contract.
var RollupLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b565aedbbcee7535710ea39e3729b3cce95fabfa63f6eaf99e0852dc0323fd7e64736f6c63430008090033",
}

// RollupLibABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupLibMetaData.ABI instead.
var RollupLibABI = RollupLibMetaData.ABI

// RollupLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupLibMetaData.Bin instead.
var RollupLibBin = RollupLibMetaData.Bin

// DeployRollupLib deploys a new Ethereum contract, binding an instance of RollupLib to it.
func DeployRollupLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupLib, error) {
	parsed, err := RollupLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// RollupLib is an auto generated Go binding around an Ethereum contract.
type RollupLib struct {
	RollupLibCaller     // Read-only binding to the contract
	RollupLibTransactor // Write-only binding to the contract
	RollupLibFilterer   // Log filterer for contract events
}

// RollupLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupLibSession struct {
	Contract     *RollupLib        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupLibCallerSession struct {
	Contract *RollupLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// RollupLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupLibTransactorSession struct {
	Contract     *RollupLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// RollupLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupLibRaw struct {
	Contract *RollupLib // Generic contract binding to access the raw methods on
}

// RollupLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupLibCallerRaw struct {
	Contract *RollupLibCaller // Generic read-only contract binding to access the raw methods on
}

// RollupLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupLibTransactorRaw struct {
	Contract *RollupLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupLib creates a new instance of RollupLib, bound to a specific deployed contract.
func NewRollupLib(address common.Address, backend bind.ContractBackend) (*RollupLib, error) {
	contract, err := bindRollupLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// NewRollupLibCaller creates a new read-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibCaller(address common.Address, caller bind.ContractCaller) (*RollupLibCaller, error) {
	contract, err := bindRollupLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibCaller{contract: contract}, nil
}

// NewRollupLibTransactor creates a new write-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupLibTransactor, error) {
	contract, err := bindRollupLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibTransactor{contract: contract}, nil
}

// NewRollupLibFilterer creates a new log filterer instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupLibFilterer, error) {
	contract, err := bindRollupLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupLibFilterer{contract: contract}, nil
}

// bindRollupLib binds a generic wrapper to an already deployed contract.
func bindRollupLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupLibABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.RollupLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transact(opts, method, params...)
}

// RollupProxyMetaData contains all meta data concerning the RollupProxy contract.
var RollupProxyMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"extraChallengeTimeBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInbox\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"contractIRollupAdmin\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// RollupProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupProxyMetaData.ABI instead.
var RollupProxyABI = RollupProxyMetaData.ABI

// RollupProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupProxyMetaData.Bin instead.
var RollupProxyBin = RollupProxyMetaData.Bin

// DeployRollupProxy deploys a new Ethereum contract, binding an instance of RollupProxy to it.
func DeployRollupProxy(auth *bind.TransactOpts, backend bind.ContractBackend, config Config, connectedContracts ContractDependencies) (common.Address, *types.Transaction, *RollupProxy, error) {
	parsed, err := RollupProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupProxyBin), backend, config, connectedContracts)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// RollupProxy is an auto generated Go binding around an Ethereum contract.
type RollupProxy struct {
	RollupProxyCaller     // Read-only binding to the contract
	RollupProxyTransactor // Write-only binding to the contract
	RollupProxyFilterer   // Log filterer for contract events
}

// RollupProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupProxySession struct {
	Contract     *RollupProxy      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupProxyCallerSession struct {
	Contract *RollupProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// RollupProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupProxyTransactorSession struct {
	Contract     *RollupProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// RollupProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupProxyRaw struct {
	Contract *RollupProxy // Generic contract binding to access the raw methods on
}

// RollupProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupProxyCallerRaw struct {
	Contract *RollupProxyCaller // Generic read-only contract binding to access the raw methods on
}

// RollupProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupProxyTransactorRaw struct {
	Contract *RollupProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupProxy creates a new instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxy(address common.Address, backend bind.ContractBackend) (*RollupProxy, error) {
	contract, err := bindRollupProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// NewRollupProxyCaller creates a new read-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyCaller(address common.Address, caller bind.ContractCaller) (*RollupProxyCaller, error) {
	contract, err := bindRollupProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyCaller{contract: contract}, nil
}

// NewRollupProxyTransactor creates a new write-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupProxyTransactor, error) {
	contract, err := bindRollupProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyTransactor{contract: contract}, nil
}

// NewRollupProxyFilterer creates a new log filterer instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupProxyFilterer, error) {
	contract, err := bindRollupProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupProxyFilterer{contract: contract}, nil
}

// bindRollupProxy binds a generic wrapper to an already deployed contract.
func bindRollupProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.RollupProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxySession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// RollupProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupProxy contract.
type RollupProxyAdminChangedIterator struct {
	Event *RollupProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyAdminChanged represents a AdminChanged event raised by the RollupProxy contract.
type RollupProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupProxyAdminChangedIterator, error) {

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupProxyAdminChangedIterator{contract: _RollupProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyAdminChanged)
				if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) ParseAdminChanged(log types.Log) (*RollupProxyAdminChanged, error) {
	event := new(RollupProxyAdminChanged)
	if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupProxy contract.
type RollupProxyBeaconUpgradedIterator struct {
	Event *RollupProxyBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyBeaconUpgraded represents a BeaconUpgraded event raised by the RollupProxy contract.
type RollupProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyBeaconUpgradedIterator{contract: _RollupProxy.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyBeaconUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) ParseBeaconUpgraded(log types.Log) (*RollupProxyBeaconUpgraded, error) {
	event := new(RollupProxyBeaconUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupProxy contract.
type RollupProxyUpgradedIterator struct {
	Event *RollupProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgraded represents a Upgraded event raised by the RollupProxy contract.
type RollupProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedIterator{contract: _RollupProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgraded(log types.Log) (*RollupProxyUpgraded, error) {
	event := new(RollupProxyUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupProxy contract.
type RollupProxyUpgradedSecondaryIterator struct {
	Event *RollupProxyUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgradedSecondary represents a UpgradedSecondary event raised by the RollupProxy contract.
type RollupProxyUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedSecondaryIterator{contract: _RollupProxy.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgradedSecondary)
				if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgradedSecondary(log types.Log) (*RollupProxyUpgradedSecondary, error) {
	event := new(RollupProxyUpgradedSecondary)
	if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicMetaData contains all meta data concerning the RollupUserLogic contract.
var RollupUserLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedNode\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VALIDATOR_AFK_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winningStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"losingStaker\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"confirmNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countStakedZombies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"countZombiesStakedOnChildren\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"stakers\",\"type\":\"address[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"nodeNums\",\"type\":\"uint64[2]\"},{\"internalType\":\"enumMachineStatus[2]\",\"name\":\"machineStatuses\",\"type\":\"uint8[2]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState[2]\",\"name\":\"globalStates\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secondExecutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"proposedBlocks\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"wasmModuleRoots\",\"type\":\"bytes32[2]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakedOnLatestConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"newStakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nodeHasStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectNextNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"removeOldZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNodes\",\"type\":\"uint256\"}],\"name\":\"removeZombie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"requireUnresolved\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireUnresolvedExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"firstUnresolvedNodeNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestCreatedNode\",\"type\":\"uint64\"}],\"name\":\"requiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnExistingNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structRollupLib.ExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structRollupLib.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevNodeInboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stakeOnNewNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c0604052306080524660a05234801561001857600080fd5b5060805160a051615b336200004d600039600061289801526000818161121701528181612907015261298c0152615b336000f3fe60806040526004361061036f5760003560e01c80637427be51116101c8578063c4d66de8116100f8578063e78cea921161009b578063e78cea9214610b51578063e8bd492214610b71578063edfd03ed14610c06578063ee35f32714610c26578063ef40a67014610c46578063f065de3f14610c66578063f33e1fac14610c86578063facd743b14610ca6578063fb0e722b14610cd657600080fd5b8063c4d66de814610a74578063cd205fda14610a94578063ce11e6ab14610ab4578063ced01cfb14610ad4578063d01e660214610ae7578063d735e21d14610b07578063dcd030aa14610b1c578063dff6978714610b3c57600080fd5b806391c657e81161016b57806391c657e81461086d57806392c8134c1461088d5780639a8a0592146108ba578063a23c44b1146108d0578063aa38a6e7146109df578063aa65af48146109ff578063b0ebedc714610a1f578063bc45e0ae14610a3f578063c2c2e68e14610a5f57600080fd5b80637427be511461078b57806376e7e23b146107ab578063771b2f97146107c15780637ba9534a146107e85780637e2d2155146107fd5780638640ce5f1461081d5780638da5cb5b146108425780638ee1a1261461085757600080fd5b806351ed6a30116102a357806363721d6b1161024657806363721d6b1461068d57806365f7f80d146106a257806367425daf146106c057806369fd251c146106d55780636b94c33b146106f55780636d08d0a2146107155780636ddd3744146107355780636f57644e1461075557806371ef232c1461077557600080fd5b806351ed6a30146105ab57806352d1902d146105cb57806354ce8961146105e05780635c617e94146106005780635c975abb146106205780635eb405d51461063857806361373919146106585780636177fd181461066d57600080fd5b80632b2af0ab116103165780632b2af0ab146104965780632e7acfa6146104b65780632f30cabd146104ee5780633e96576e1461052457806345c5b2c71461054457806345e38b64146105575780634774e5761461056d5780634ceccfe5146105805780634d26732d1461059657600080fd5b8063014cc92c14610374578063023a96fe146103b15780630357aa49146103d157806312ab3d3b146103f357806318baaab91461041d5780631aeb55a0146104325780631b1689e9146104525780631e83d30f14610476575b600080fd5b34801561038057600080fd5b50606f54610394906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103bd57600080fd5b50606e54610394906001600160a01b031681565b3480156103dd57600080fd5b506103f16103ec366004614fc1565b610cf6565b005b3480156103ff57600080fd5b50607e5461040d9060ff1681565b60405190151581526020016103a8565b34801561042957600080fd5b506103f1610dc9565b34801561043e57600080fd5b506103f161044d366004615012565b610e43565b34801561045e57600080fd5b50610468607d5481565b6040519081526020016103a8565b34801561048257600080fd5b506103f161049136600461503e565b611003565b3480156104a257600080fd5b506103f16104b136600461503e565b61108d565b3480156104c257600080fd5b506065546104d6906001600160401b031681565b6040516001600160401b0390911681526020016103a8565b3480156104fa57600080fd5b50610468610509366004615057565b6001600160a01b03166000908152607b602052604090205490565b34801561053057600080fd5b506104d661053f366004615057565b611131565b6103f1610552366004615057565b61115f565b34801561056357600080fd5b5061046860735481565b6103f161057b366004615072565b6111c8565b34801561058c57600080fd5b5061046861b2fa81565b3480156105a257600080fd5b506104686111dc565b3480156105b757600080fd5b50607254610394906001600160a01b031681565b3480156105d757600080fd5b5061046861120a565b3480156105ec57600080fd5b506103f16105fb366004615072565b6112cf565b34801561060c57600080fd5b5061046861061b3660046150af565b611532565b34801561062c57600080fd5b5060335460ff1661040d565b34801561064457600080fd5b506103f16106533660046150cc565b611586565b34801561066457600080fd5b506104686118a9565b34801561067957600080fd5b5061040d610688366004615057565b6119a6565b34801561069957600080fd5b50607a54610468565b3480156106ae57600080fd5b506075546001600160401b03166104d6565b3480156106cc57600080fd5b506103f16119ce565b3480156106e157600080fd5b506104d66106f0366004615057565b611a58565b34801561070157600080fd5b506103f1610710366004615057565b611a86565b34801561072157600080fd5b506104686107303660046150af565b611dbe565b34801561074157600080fd5b506103946107503660046150af565b611e41565b34801561076157600080fd5b506103f16107703660046150ff565b611e7a565b34801561078157600080fd5b50610468607c5481565b34801561079757600080fd5b506103f16107a6366004615057565b6124ac565b3480156107b757600080fd5b5061046860675481565b3480156107cd57600080fd5b506065546104d690600160401b90046001600160401b031681565b3480156107f457600080fd5b506104d6612576565b34801561080957600080fd5b506103f16108183660046150cc565b61258c565b34801561082957600080fd5b50607554600160c01b90046001600160401b03166104d6565b34801561084e57600080fd5b506103946126f0565b34801561086357600080fd5b5061046860685481565b34801561087957600080fd5b5061040d610888366004615057565b6126ff565b34801561089957600080fd5b506108ad6108a83660046150af565b612763565b6040516103a8919061519f565b3480156108c657600080fd5b5061046860665481565b3480156108dc57600080fd5b5061098a6108eb366004615057565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0316600090815260796020908152604091829020825160a081018452815481526001909101546001600160401b0380821693830193909352600160401b8104831693820193909352600160801b83049091166060820152600160c01b90910460ff161515608082015290565b6040516103a89190600060a0820190508251825260208301516001600160401b038082166020850152806040860151166040850152806060860151166060850152505060808301511515608083015292915050565b3480156109eb57600080fd5b50606d54610394906001600160a01b031681565b348015610a0b57600080fd5b5061040d610a1a36600461529b565b61281b565b348015610a2b57600080fd5b50610468610a3a3660046152d0565b612852565b348015610a4b57600080fd5b50607054610394906001600160a01b031681565b348015610a6b57600080fd5b506103f1612872565b348015610a8057600080fd5b506103f1610a8f366004615057565b6128fc565b348015610aa057600080fd5b506072546001600160a01b0316151561040d565b348015610ac057600080fd5b50606b54610394906001600160a01b031681565b6103f1610ae2366004615012565b612abc565b348015610af357600080fd5b50610394610b0236600461503e565b612ad3565b348015610b1357600080fd5b506104d6612ae8565b348015610b2857600080fd5b5061040d610b37366004615057565b612afe565b348015610b4857600080fd5b506078546104d6565b348015610b5d57600080fd5b50606a54610394906001600160a01b031681565b348015610b7d57600080fd5b50610bce610b8c366004615057565b607960205260009081526040902080546001909101546001600160401b0380821691600160401b8104821691600160801b82041690600160c01b900460ff1685565b604080519586526001600160401b0394851660208701529284169285019290925290911660608301521515608082015260a0016103a8565b348015610c1257600080fd5b506103f1610c2136600461503e565b612b41565b348015610c3257600080fd5b50606c54610394906001600160a01b031681565b348015610c5257600080fd5b50610468610c61366004615057565b612c2a565b348015610c7257600080fd5b50607154610394906001600160a01b031681565b348015610c9257600080fd5b506104d6610ca136600461503e565b612c45565b348015610cb257600080fd5b5061040d610cc1366004615057565b60746020526000908152604090205460ff1681565b348015610ce257600080fd5b50606954610394906001600160a01b031681565b60335460ff1615610d225760405162461bcd60e51b8152600401610d1990615312565b60405180910390fd5b606e546001600160a01b03163314610d6b5760405162461bcd60e51b815260206004820152600c60248201526b2ba927a723afa9a2a72222a960a11b6044820152606401610d19565b610d758282612c7c565b6001600160401b03168314610dba5760405162461bcd60e51b815260206004820152600b60248201526a1393d517d25397d0d2105360aa1b6044820152606401610d19565b610dc48282612d4a565b505050565b607e5460ff1615610dec5760405162461bcd60e51b8152600401610d199061533c565b610df4612e00565b610e345760405162461bcd60e51b815260206004820152601160248201527056414c494441544f525f4e4f545f41464b60781b6044820152606401610d19565b607e805460ff19166001179055565b3360009081526074602052604090205460ff1680610e635750607e5460ff165b610e7f5760405162461bcd60e51b8152600401610d1990615368565b60335460ff1615610ea25760405162461bcd60e51b8152600401610d1990615312565b610eab33612afe565b610ec75760405162461bcd60e51b8152600401610d199061538f565b610ecf612ae8565b6001600160401b0316826001600160401b031610158015610f095750610ef3612576565b6001600160401b0316826001600160401b031611155b610f4d5760405162461bcd60e51b81526020600482015260156024820152744e4f44455f4e554d5f4f55545f4f465f52414e474560581b6044820152606401610d19565b6000610f5883612f0a565b905081816005015414610f9a5760405162461bcd60e51b815260206004820152600a6024820152694e4f44455f52454f524760b01b6044820152606401610d19565b60038101546001600160401b0316610fb133611131565b6001600160401b031614610ff95760405162461bcd60e51b815260206004820152600f60248201526e2727aa2fa9aa20a5a2a22fa82922ab60891b6044820152606401610d19565b610dc43384612f24565b3360009081526074602052604090205460ff16806110235750607e5460ff165b61103f5760405162461bcd60e51b8152600401610d1990615368565b60335460ff16156110625760405162461bcd60e51b8152600401610d1990615312565b61106b33612f75565b60006110756111dc565b905080821015611083578091505b610dc43383612fe5565b611095612ae8565b6001600160401b03168110156110df5760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d11150d2511151608a1b6044820152606401610d19565b6110e7612576565b6001600160401b031681111561112e5760405162461bcd60e51b815260206004820152600c60248201526b1113d154d39517d1561254d560a21b6044820152606401610d19565b50565b6001600160a01b0316600090815260796020526040902060010154600160401b90046001600160401b031690565b3360009081526074602052604090205460ff168061117f5750607e5460ff165b61119b5760405162461bcd60e51b8152600401610d1990615368565b60335460ff16156111be5760405162461bcd60e51b8152600401610d1990615312565b61112e8134613098565b6111d13461310a565b610dc48383836112cf565b6000806111e7612ae8565b905061120443826111f6612576565b6001600160401b031661322c565b91505090565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112aa5760405162461bcd60e51b815260206004820152603b60248201527f555550534e6f745570677261646561626c653a206d757374206e6f742062652060448201527f63616c6c6564207468726f7567682064656c656761746563616c6c00000000006064820152608401610d19565b507f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d90565b3360009081526074602052604090205460ff16806112ef5750607e5460ff165b61130b5760405162461bcd60e51b8152600401610d1990615368565b60335460ff161561132e5760405162461bcd60e51b8152600401610d1990615312565b61133733612afe565b6113535760405162461bcd60e51b8152600401610d199061538f565b600061135e33611131565b9050600061136b82612763565b6101400151611383906001600160401b0316436153c9565b90506073548110156113c45760405162461bcd60e51b815260206004820152600a60248201526954494d455f44454c544160b01b6044820152606401610d19565b60026113d861014087016101208801615405565b60038111156113e9576113e96153e0565b148061141757508261140b61140636889003880160a08901615521565b613494565b6001600160401b031610155b61144f5760405162461bcd60e51b81526020600482015260096024820152681513d3d7d4d350531360ba1b6044820152606401610d19565b6000611463610160870161014088016150af565b6001600160401b0316116114ab5760405162461bcd60e51b815260206004820152600f60248201526e22a6a82a2cafa0a9a9a2a92a24a7a760891b6044820152606401610d19565b60016114bd60a0870160808801615405565b60038111156114ce576114ce6153e0565b1461150d5760405162461bcd60e51b815260206004820152600f60248201526e4241445f505245565f53544154555360881b6044820152606401610d19565b5061151a848284866134a9565b5061152c33611527612576565b612f24565b50505050565b60008061153e607a5490565b90506000805b8281101561157e5761155985610a1a83612ad3565b1561156c57816115688161553d565b9250505b806115768161553d565b915050611544565b509392505050565b3360009081526074602052604090205460ff16806115a65750607e5460ff165b6115c25760405162461bcd60e51b8152600401610d1990615368565b60335460ff16156115e55760405162461bcd60e51b8152600401610d1990615312565b6115ed6119ce565b60006115f7612ae8565b9050600061160482612f0a565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082015260058201546101608201529091506116b090613a94565b60755460038201546001600160401b039081169116146116d2576116d2615558565b60038101546000906116ec906001600160401b0316612f0a565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e08701529182048316610100860152810482166101208501529190910416610140820152600582015461016082015290915061179890613ae3565b6117a26000612b41565b60006117ad84611532565b600384015490915060009082906117cc906001600160401b0316611dbe565b6117d691906153c9565b6003850154909150600160c01b90046001600160401b031682106118295760405162461bcd60e51b815260206004820152600a6024820152694e4f5f5354414b45525360b01b6044820152606401610d19565b6003840154611849908290600160c01b90046001600160401b031661556e565b60048401546001600160401b0316146118955760405162461bcd60e51b815260206004820152600e60248201526d1393d517d0531317d4d51052d15160921b6044820152606401610d19565b6118a0858888613b33565b50505050505050565b3360009081526074602052604081205460ff16806118c95750607e5460ff165b6118e55760405162461bcd60e51b8152600401610d1990615368565b60335460ff16156119085760405162461bcd60e51b8152600401610d1990615312565b600061191333613c82565b604051909150600090339083908381818185875af1925050503d8060008114611958576040519150601f19603f3d011682016040523d82523d6000602084013e61195d565b606091505b50509050806119a05760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610d19565b50905090565b6001600160a01b0316600090815260796020526040902060010154600160c01b900460ff1690565b60006119d8612ae8565b6001600160401b031690506119f56075546001600160401b031690565b6001600160401b031681118015611a1c5750611a0f612576565b6001600160401b03168111155b61112e5760405162461bcd60e51b815260206004820152600d60248201526c1393d7d553949154d3d3159151609a1b6044820152606401610d19565b6001600160a01b0316600090815260796020526040902060010154600160801b90046001600160401b031690565b3360009081526074602052604090205460ff1680611aa65750607e5460ff165b611ac25760405162461bcd60e51b8152600401610d1990615368565b60335460ff1615611ae55760405162461bcd60e51b8152600401610d1990615312565b611aed6119ce565b6000611b016075546001600160401b031690565b90506000611b0d612ae8565b90506000611b1a82612f0a565b60038101549091506001600160401b0384811691161415611d7c57611b3e84612afe565b611b5a5760405162461bcd60e51b8152600401610d199061538f565b611b74611b6685611131565b6001600160401b031661108d565b611b7e828561281b565b15611bbe5760405162461bcd60e51b815260206004820152601060248201526f14d51052d15117d3d397d5105491d15560821b6044820152606401610d19565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e087015291820483166101008601528104821661012085015291909104166101408201526005820154610160820152611c6790613a94565b611d19611c7384612f0a565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e08701529182048316610100860152810482166101208501529190910416610140820152600590910154610160820152613ae3565b611d236000612b41565b611d2c82611532565b6003820154600160c01b90046001600160401b031614611d7c5760405162461bcd60e51b815260206004820152600b60248201526a4841535f5354414b45525360a81b6044820152606401610d19565b611d84613d03565b6040516001600160401b038316907feaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad464090600090a250505050565b600080611dca607a5490565b90506000805b8281101561157e576000611de382613d4a565b80549091506001600160401b03878116600160a01b9092041614801590611e1b57508054611e1b9087906001600160a01b031661281b565b15611e2e5782611e2a8161553d565b9350505b5080611e398161553d565b915050611dd0565b60006078826001600160401b031681548110611e5f57611e5f615586565b6000918252602090912001546001600160a01b031692915050565b3360009081526074602052604090205460ff1680611e9a5750607e5460ff165b611eb65760405162461bcd60e51b8152600401610d1990615368565b60335460ff1615611ed95760405162461bcd60e51b8152600401610d1990615312565b611ee960408801602089016150af565b6001600160401b0316611eff60208901896150af565b6001600160401b031610611f435760405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afa7a92222a960a91b6044820152606401610d19565b611f4b612576565b6001600160401b0316611f646040890160208a016150af565b6001600160401b03161115611faa5760405162461bcd60e51b815260206004820152600c60248201526b1393d517d41493d413d4d15160a21b6044820152606401610d19565b611fb760208801886150af565b6001600160401b0316611fd26075546001600160401b031690565b6001600160401b03161061201c5760405162461bcd60e51b81526020600482015260116024820152701053149150511657d0d3d3919254935151607a1b6044820152606401610d19565b600061203c88825b60200201602081019061203791906150af565b612f0a565b9050600061204b896001612024565b600380820154908401549192506001600160401b0391821691161461209e5760405162461bcd60e51b81526020600482015260096024820152682224a3232fa82922ab60b91b6044820152606401610d19565b6120bd8a60005b6020020160208101906120b89190615057565b612f75565b6120c88a60016120a5565b6120ef6120d860208b018b6150af565b8b60005b602002016020810190610a1a9190615057565b6121305760405162461bcd60e51b815260206004820152601260248201527114d51052d1548c57d393d517d4d51052d15160721b6044820152606401610d19565b61214b61214360408b0160208c016150af565b8b60016120dc565b61218c5760405162461bcd60e51b815260206004820152601260248201527114d51052d1548c97d393d517d4d51052d15160721b6044820152606401610d19565b60408051808201825261220d916121fd91908b90600290839083908082843760009201829052506040805180820190915292508c9150600290835b828210156121f3576121e460808302850136819003810190615521565b815260200190600101906121c7565b5050505089613d70565b85358560005b6020020135613e1a565b82600101541461224c5760405162461bcd60e51b815260206004820152600a6024820152694348414c5f484153483160b01b6044820152606401610d19565b61225d856020860135856001612203565b81600101541461229c5760405162461bcd60e51b815260206004820152600a60248201526921a420a62fa420a9a41960b11b6044820152606401610d19565b60655460038301546000916001600160401b03600160401b918290048116926122ca928935929104166153c9565b60038501546122e1906001600160401b0316612f0a565b600401546122ff9190600160401b90046001600160401b031661556e565b612309919061556e565b905060208501358110156123445761233c61232760208d018d615057565b61233760408e0160208f01615057565b612d4a565b5050506124a2565b60006123848c8b8b8b89600c61235b8d358a6153c9565b612365919061559c565b600c61237560208f01358b6153c9565b61237f919061559c565b613e58565b905061240761239660208e018e615057565b8d60016020020160208101906123ac9190615057565b6001600160a01b03918216600090815260796020526040808220600190810180546001600160401b038916600160801b0267ffffffffffffffff60801b19918216811790925594909516835291200180549091169091179055565b6001600160401b0381167f6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd87361243f60208f018f615057565b8e60016020020160208101906124559190615057565b8e600060200201602081019061246b91906150af565b604080516001600160a01b0394851681529390921660208401526001600160401b03169082015260600160405180910390a2505050505b5050505050505050565b3360009081526074602052604090205460ff16806124cc5750607e5460ff165b6124e85760405162461bcd60e51b8152600401610d1990615368565b60335460ff161561250b5760405162461bcd60e51b8152600401610d1990615312565b6075546001600160401b031661252082611131565b6001600160401b031611156125645760405162461bcd60e51b815260206004820152600a6024820152691513d3d7d49150d1539560b21b6044820152606401610d19565b61256d81612f75565b61112e81613f17565b607554600160801b90046001600160401b031690565b3360009081526074602052604090205460ff16806125ac5750607e5460ff165b6125c85760405162461bcd60e51b8152600401610d1990615368565b60335460ff16156125eb5760405162461bcd60e51b8152600401610d1990615312565b607a54821061262d5760405162461bcd60e51b815260206004820152600e60248201526d4e4f5f535543485f5a4f4d42494560901b6044820152606401610d19565b600061263883612ad3565b9050600061264584612c45565b905060008061265c6075546001600160401b031690565b6001600160401b031690505b80836001600160401b03161015801561268057508482105b156126bf57600061269084612f0a565b905061269c8486613fc7565b60038101546001600160401b03169350826126b68161553d565b93505050612668565b80836001600160401b031610156126de576126d986614111565b6126e8565b6126e886846141d7565b505050505050565b60006126fa614220565b905090565b6000805b607a5481101561275a57607a818154811061272057612720615586565b6000918252602090912001546001600160a01b03848116911614156127485750600192915050565b806127528161553d565b915050612703565b50600092915050565b61276b614e80565b61277482612f0a565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082015260059091015461016082015292915050565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b60006128688484846001600160401b031661322c565b90505b9392505050565b607e5460ff16156128955760405162461bcd60e51b8152600401610d199061533c565b467f00000000000000000000000000000000000000000000000000000000000000001415610e345760405162461bcd60e51b815260206004820152601460248201527310d210525397d25117d393d517d0d2105391d15160621b6044820152606401610d19565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561298a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610d19565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166129bc614253565b6001600160a01b031614612a275760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610d19565b6001600160a01b03811615612a715760405162461bcd60e51b815260206004820152601060248201526f1393d7d513d2d15397d0531313d5d15160821b6044820152606401610d19565b6072546001600160a01b03161561112e5760405162461bcd60e51b815260206004820152600f60248201526e046414345545f4e4f545f455243323608c1b6044820152606401610d19565b612ac53461310a565b612acf8282610e43565b5050565b6000607a8281548110611e5f57611e5f615586565b607554600160401b90046001600160401b031690565b6001600160a01b038116600090815260796020526040812060010154600160c01b900460ff16801561284c575060755461284c906001600160401b03168361281b565b3360009081526074602052604090205460ff1680612b615750607e5460ff165b612b7d5760405162461bcd60e51b8152600401610d1990615368565b60335460ff1615612ba05760405162461bcd60e51b8152600401610d1990615312565b6000612bab607a5490565b90506000612bc16075546001600160401b031690565b6001600160401b03169050825b8281101561152c575b81612be182612c45565b6001600160401b03161015612c1857612bf981614111565b82612c03816155bb565b935050828110612c135750505050565b612bd7565b80612c228161553d565b915050612bce565b6001600160a01b031660009081526079602052604090205490565b6000607a8281548110612c5a57612c5a615586565b600091825260209091200154600160a01b90046001600160401b031692915050565b6001600160a01b03828116600090815260796020526040808220928416825281206001830154919291600160801b90046001600160401b031680612cec5760405162461bcd60e51b81526020600482015260076024820152661393d7d0d2105360ca1b6044820152606401610d19565b60018201546001600160401b03828116600160801b9092041614612d415760405162461bcd60e51b815260206004820152600c60248201526b1112519197d25397d0d2105360a21b6044820152606401610d19565b95945050505050565b6000612d5582612c2a565b90506000612d6284612c2a565b905080821115612d8357612d768382612fe5565b612d8090836153c9565b91505b6000612d906002846155e8565b9050612d9c858261427b565b612da681846153c9565b9250612dda856001600160a01b03166000908152607960205260409020600101805467ffffffffffffffff60801b19169055565b607154612df0906001600160a01b0316846142e0565b612df98461437c565b5050505050565b600080612e0e612037612576565b6040805161018081018252825481526001830154602082015260028301549181019190915260038201546001600160401b038082166060840152600160401b80830482166080850152600160801b808404831660a0860152600160c01b93849004831660c0860152600486015480841660e0870152918204831661010086015281048216610120850152919091041661014082018190526005909201546101608201529150612ebf57600091505090565b606554610140820151439161b2fa91612ee1916001600160401b0316906155fc565b6001600160401b0316612ef4919061556e565b1015612f0257600191505090565b600091505090565b6001600160401b0316600090815260766020526040902090565b6001600160a01b0382166000908152607960205260409020612f468284614422565b60010180546001600160401b03909216600160401b0267ffffffffffffffff60401b1990921691909117905550565b612f7e816119a6565b612f9a5760405162461bcd60e51b8152600401610d199061538f565b6000612fa582611a58565b6001600160401b03161461112e5760405162461bcd60e51b8152602060048201526007602482015266125397d0d2105360ca1b6044820152606401610d19565b6001600160a01b03821660009081526079602052604081208054808411156130425760405162461bcd60e51b815260206004820152601060248201526f544f4f5f4c4954544c455f5354414b4560801b6044820152606401610d19565b600061304e85836153c9565b858455905061305d86826142e0565b60408051838152602081018790526001600160a01b03881691600080516020615ade833981519152910160405180910390a295945050505050565b3360009081526074602052604090205460ff16806130b85750607e5460ff165b6130d45760405162461bcd60e51b8152600401610d1990615368565b60335460ff16156130f75760405162461bcd60e51b8152600401610d1990615312565b61310082612f75565b612acf828261427b565b3360009081526074602052604090205460ff168061312a5750607e5460ff165b6131465760405162461bcd60e51b8152600401610d1990615368565b60335460ff16156131695760405162461bcd60e51b8152600401610d1990615312565b613172336119a6565b1561318f5760405162461bcd60e51b8152600401610d1990615627565b613198336126ff565b156131d85760405162461bcd60e51b815260206004820152601060248201526f5354414b45525f49535f5a4f4d42494560801b6044820152606401610d19565b6131e06111dc565b8110156132225760405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b6044820152606401610d19565b61112e3382614602565b60008161323a60018561564f565b6001600160401b03161415613252575060675461286b565b600061325d84612f0a565b60030154600160401b90046001600160401b031690508085101561328557505060675461286b565b6000604051806101400160405280600162ffffff1681526020016201e05b62ffffff1681526020016201f7d162ffffff1681526020016201389162ffffff168152602001620329e162ffffff1681526020016201be4362ffffff1681526020016204cb8c62ffffff1681526020016201fbc462ffffff16815260200162036d3262ffffff1681526020016202797362ffffff1681525090506000604051806101400160405280600162ffffff1681526020016201c03062ffffff1681526020016201b69962ffffff16815260200161fde262ffffff168152602001620265c662ffffff16815260200162013b8e62ffffff168152602001620329e162ffffff1681526020016201389162ffffff1681526020016201f7d162ffffff1681526020016201537562ffffff168152509050600083886133c291906153c9565b6065549091506000906001600160401b03166133df83600a61559c565b6133e991906155e8565b905060006133f8600a836155e8565b61340390600261575b565b9050600085613413600a85615767565b600a811061342357613423615586565b60200201516134379062ffffff168361559c565b9050600085613447600a86615767565b600a811061345757613457615586565b602002015161346b9062ffffff16836155e8565b905080613476575060015b80606754613484919061559c565b9c9b505050505050505050505050565b6020810151600090815b602002015192915050565b600060016134bf61014087016101208801615405565b60038111156134d0576134d06153e0565b14806134fe575060026134eb61014087016101208801615405565b60038111156134fc576134fc6153e0565b145b61353d5760405162461bcd60e51b815260206004820152601060248201526f4241445f41465445525f53544154555360801b6044820152606401610d19565b613545614ee4565b61354e85612763565b6060820152606a54604080516221048360e21b815290516001600160a01b03909216916284120c91600480820192602092909190829003018186803b15801561359657600080fd5b505afa1580156135aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ce919061577b565b81526060810151516135e0878661475d565b1461361f5760405162461bcd60e51b815260206004820152600f60248201526e0a0a48aacbea6a882a88abe9082a69608b1b6044820152606401610d19565b600061363661140636899003890160a08a01615521565b9050600061364c611406368a90038a018a615521565b9050806001600160401b0316826001600160401b031610156136a25760405162461bcd60e51b815260206004820152600f60248201526e494e424f585f4241434b574152445360881b6044820152606401610d19565b806001600160401b0316826001600160401b03161415613748576136d36136ce368a90038a018a615521565b6147b7565b6001600160401b03166136f16136ce368b90038b0160a08c01615521565b6001600160401b031610156137485760405162461bcd60e51b815260206004820152601a60248201527f494e424f585f504f535f494e5f4d53475f4241434b57415244530000000000006044820152606401610d19565b600261375c6101408a016101208b01615405565b600381111561376d5761376d6153e0565b14806137965750600061378b6136ce368b90038b0160a08c01615521565b6001600160401b0316115b156137a957816137a581615794565b9250505b82516001600160401b03831611156137f45760405162461bcd60e51b815260206004820152600e60248201526d12539093d617d41054d517d1539160921b6044820152606401610d19565b6001600160401b0382161561389c57606a546001600160a01b03166316bf557961381f60018561564f565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b15801561385e57600080fd5b505afa158015613872573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613896919061577b565b60e08401525b506138b690506138b1368890038801886157fa565b6147c6565b60408201526065546138d1906001600160401b0316436155fc565b6001600160401b0390811660c0830152606082015161012001511615801560a08301526139185761390a81606001516101200151612f0a565b600501546080820152613928565b6060810151610160015160808201525b6139478160a00151826080015183604001518460e00151606854614865565b915082821480613955575082155b6139985760405162461bcd60e51b81526020600482015260146024820152730aa9c8ab0a08a86a88a88be9c9e888abe9082a6960631b6044820152606401610d19565b6139e06139ac8760a001836000015161475d565b6139bd836040015143606854613e1a565b6139d46139cf368b90038b018b6157fa565b6148d2565b888560c00151876148fc565b602082015260006139ef612576565b6139fa9060016155fc565b90506000613a0787612f0a565b9050613a138183614950565b613a2083602001516149c1565b50508181606001516101600151613a35612576565b6001600160401b03167f4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d09684604001518a8660e001516068548860000151604051613a839594939291906158f5565b60405180910390a450949350505050565b80608001516001600160401b031643101561112e5760405162461bcd60e51b815260206004820152600f60248201526e4245464f52455f444541444c494e4560881b6044820152606401610d19565b8060a001516001600160401b031643101561112e5760405162461bcd60e51b815260206004820152601060248201526f10d212531117d513d3d7d49150d1539560821b6044820152606401610d19565b6000613b3e84612f0a565b9050613b4a8383614af8565b816002015414613b8b5760405162461bcd60e51b815260206004820152600c60248201526b434f4e4649524d5f4441544160a01b6044820152606401610d19565b606b54604051630502677360e51b815260048101849052602481018590526001600160a01b039091169063a04cee6090604401600060405180830381600087803b158015613bd857600080fd5b505af1158015613bec573d6000803e3d6000fd5b50506075805467ffffffffffffffff19166001600160401b03881617905550613c1890508460016155fc565b6075805467ffffffffffffffff60401b1916600160401b6001600160401b03938416021790556040805185815260208101859052918616917f22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c91015b60405180910390a250505050565b6001600160a01b0381166000908152607b60205260408120805490829055607c80548291908490613cb49084906153c9565b909155505060408051828152600060208201526001600160a01b038516917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a292915050565b60758054600160401b90046001600160401b0316906008613d2383615794565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050565b6000607a8281548110613d5f57613d5f615586565b906000526020600020019050919050565b60408051600280825260608201835260009283929190602083019080368337019050508551909150613db290613dad8660005b6020020151614b14565b614b88565b81600081518110613dc557613dc5615586565b6020908102919091010152613de68560016020020151613dad866001613da3565b81600181518110613df957613df9615586565b602002602001018181525050612d416000846001600160401b031683614cac565b6040805160208101859052908101839052606081018290526000906080015b6040516020818303038152906040528051906020012090509392505050565b606e546000906001600160a01b03166314eab5e78535898989613e7e60208f018f615057565b8e6001602002016020810190613e949190615057565b8a8a6040518963ffffffff1660e01b8152600401613eb9989796959493929190615957565b602060405180830381600087803b158015613ed357600080fd5b505af1158015613ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f0b9190615a07565b98975050505050505050565b6001600160a01b038116600090815260796020526040812090613f426075546001600160401b031690565b9050613f4e818461281b565b15613f835760018201546001600160401b03828116600160401b9092041614613f7957613f79615558565b613f838184613fc7565b8154613f8f84826142e0565b613f9884614cc3565b60408051828152600060208201526001600160a01b03861691600080516020615ade8339815191529101613c74565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff166140135760405162461bcd60e51b8152600401610d199061538f565b6001600160401b03821660009081526077602090815260408083206001600160a01b03851684529091528120805460ff1916905561405083612f0a565b600381018054919250600160c01b9091046001600160401b031690601861407683615a24565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505060006001600160401b0316836001600160401b03161115610dc45760038101546140cd906001600160401b0316612f0a565b60040180546001600160401b03169060006140e783615a24565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050505050565b607a8054614121906001906153c9565b8154811061413157614131615586565b90600052602060002001607a828154811061414e5761414e615586565b600091825260209091208254910180546001600160a01b039092166001600160a01b031983168117825592546001600160e01b0319909216909217600160a01b918290046001600160401b0316909102179055607a8054806141b2576141b2615a47565b600082815260209020810160001990810180546001600160e01b031916905501905550565b80607a83815481106141eb576141eb615586565b9060005260206000200160000160146101000a8154816001600160401b0302191690836001600160401b031602179055505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d614244565b6001600160a01b0382166000908152607960205260408120805490916142a1848361556e565b80845560408051848152602081018390529192506001600160a01b03871691600080516020615ade833981519152910160405180910390a25050505050565b6001600160a01b0382166000908152607b602052604081205490614304838361556e565b6001600160a01b0385166000908152607b60205260408120829055607c8054929350859290919061433690849061556e565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae29101613c74565b6001600160a01b03808216600081815260796020908152604080832081518083019092529381526001808501546001600160401b03600160401b9091048116938301938452607a8054928301815590945290517ff0440771a29e57e18c66727944770b82cc77924aef333c927ce6bdd2cdb3ae0390910180549251909316600160a01b026001600160e01b031990921694169390931792909217909155612acf82614cc3565b6001600160401b03821660009081526077602090815260408083206001600160a01b038516845290915290205460ff161561446f5760405162461bcd60e51b8152600401610d1990615627565b6001600160401b03821660009081526077602090815260408083206001600160a01b03851684529091528120805460ff191660011790556144af83612f0a565b6003810154909150600160401b90046001600160401b03166144fd5760405162461bcd60e51b81526020600482015260076024820152664e4f5f4e4f444560c81b6044820152606401610d19565b6003810154600160c01b90046001600160401b031661451d8160016155fc565b6003830180546001600160c01b0316600160c01b6001600160401b039384160217905584161561152c576003820154600090614561906001600160401b0316612f0a565b6004810180549192506001600160401b0390911690600061458183615794565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050816001600160401b031660001415612df957606554612df9906145d2906001600160401b0316436155fc565b60038301805467ffffffffffffffff60801b1916600160801b6001600160401b0390931692909202919091179055565b6078805460018082019092557f8dc6fb69531d98d70dc0420e638d2dfd04e09e1ec783ede9aac77da9c5a0dac4810180546001600160a01b0319166001600160a01b0386169081179091556040805160a0810182528581526001600160401b038085166020808401918252607580548416858701908152600060608701818152608088018c81528a835260798652898320985189559551978c0180549351915196519888166001600160801b031990941693909317600160401b918816919091021768ffffffffffffffffff60801b1916600160801b9587169590950260ff60c01b191694909417600160c01b9615158702179055805484168352607782528583208784528252858320805460ff191690991790985587546001600160c01b031643909316909302919091179095558151948552840185905291929091600080516020615ade833981519152910160405180910390a2505050565b600061477661477136859003850185615521565b614b14565b8261478760a0860160808701615405565b60405160200161479993929190615a5d565b60405160208183030381529060405280519060200120905092915050565b6020810151600090600161349e565b60006147d0614f35565b825160200151819060038111156147e9576147e96153e0565b908160038111156147fc576147fc6153e0565b90525060208381015181015190820190600381111561481d5761481d6153e0565b90816003811115614830576148306153e0565b90525061483b614f53565b83515181526020808501515190820152604084015161485d9083908390613d70565b949350505050565b60008086614874576000614877565b60015b6040516001600160f81b031960f883901b1660208201526021810188905260418101879052606181018690526081810185905290915060a1016040516020818303038152906040528051906020012091505095945050505050565b600061284c6148e8836020015160000151614e69565b6020840151516148f790614e74565b614af8565b614904614e80565b61490c614e80565b96875250602086019490945260408501929092526001600160401b0390811660608501529081166080840181905260a0840152431661014083015261016082015290565b6004820154600160401b90046001600160401b03166149915760048201805467ffffffffffffffff60401b1916600160401b436001600160401b0316021790555b600490910180546001600160401b03909216600160801b0267ffffffffffffffff60801b19909216919091179055565b60758054600160801b90046001600160401b03169060106149e183615794565b825461010092830a6001600160401b03818102199092169282160291909117909255607554600160801b908190048316600090815260766020908152604091829020875181559087015160018201559086015160028201556060860151600382018054608089015160a08a015160c08b01519489166001600160801b031993841617600160401b928a168302176001600160801b03908116918a1688026001600160c01b0390811692909217600160c01b968b1687021790945560e08b0151600487018054998d01516101208e01516101408f0151938d169b9096169a909a17998b169093029890981790931691881690950290911617939094169093029190911790556101609092015160059092019190915550565b6040805160208101849052908101829052600090606001614799565b8051805160209182015192820151805190830151604080516c23b637b130b61039ba30ba329d60991b81870152602d810194909452604d8401959095526001600160c01b031960c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b60006001836003811115614b9e57614b9e6153e0565b1415614be4576040516b213637b1b59039ba30ba329d60a11b6020820152602c8101839052604c015b60405160208183030381529060405280519060200120905061284c565b6002836003811115614bf857614bf86153e0565b1415614c2e5760405174213637b1b59039ba30ba32961032b93937b932b21d60591b602082015260358101839052605501614bc7565b6003836003811115614c4257614c426153e0565b1415614c715760405174213637b1b59039ba30ba3296103a37b7903330b91d60591b6020820152603501614bc7565b60405162461bcd60e51b815260206004820152601060248201526f4241445f424c4f434b5f53544154555360801b6044820152606401610d19565b6000838383604051602001613e3993929190615a9b565b6001600160a01b03811660009081526079602052604090206001810154600160c01b900460ff16614d065760405162461bcd60e51b8152600401610d199061538f565b600180820154607880546001600160401b03909216929091614d2891906153c9565b81548110614d3857614d38615586565b600091825260209091200154607880546001600160a01b03909216916001600160401b038416908110614d6d57614d6d615586565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080607960006078846001600160401b031681548110614dbc57614dbc615586565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600101805467ffffffffffffffff19166001600160401b03929092169190911790556078805480614e1457614e14615a47565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152607990935250506040812090815560010180546001600160c81b0319169055565b80516000908161349e565b8051600090600161349e565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b60405180610100016040528060008152602001614eff614e80565b815260006020820152604001614f13614e80565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806002905b614f6a614f80565b815260200190600190039081614f625790505090565b6040518060400160405280614f93614f35565b8152602001614fa0614f35565b905290565b80356001600160a01b0381168114614fbc57600080fd5b919050565b600080600060608486031215614fd657600080fd5b83359250614fe660208501614fa5565b9150614ff460408501614fa5565b90509250925092565b6001600160401b038116811461112e57600080fd5b6000806040838503121561502557600080fd5b823561503081614ffd565b946020939093013593505050565b60006020828403121561505057600080fd5b5035919050565b60006020828403121561506957600080fd5b61286b82614fa5565b60008060008385036101a081121561508957600080fd5b6101608082121561509957600080fd5b9496948701359550505061018085013592915050565b6000602082840312156150c157600080fd5b813561286b81614ffd565b600080604083850312156150df57600080fd5b50508035926020909101359150565b806040810183101561284c57600080fd5b600080600080600080600080610280898b03121561511c57600080fd5b6151268a8a6150ee565b97506151358a60408b016150ee565b96506151448a60808b016150ee565b95506101c089018a81111561515857600080fd5b60c08a0195503561516881614ffd565b93506101e089013592506151808a6102008b016150ee565b91506151908a6102408b016150ee565b90509295985092959890939650565b60006101808201905082518252602083015160208301526040830151604083015260608301516151da60608401826001600160401b03169052565b5060808301516151f560808401826001600160401b03169052565b5060a083015161521060a08401826001600160401b03169052565b5060c083015161522b60c08401826001600160401b03169052565b5060e083015161524660e08401826001600160401b03169052565b50610100838101516001600160401b038116848301525050610120838101516001600160401b038116848301525050610140838101516001600160401b03811684830152505061016092830151919092015290565b600080604083850312156152ae57600080fd5b82356152b981614ffd565b91506152c760208401614fa5565b90509250929050565b6000806000606084860312156152e557600080fd5b8335925060208401356152f781614ffd565b9150604084013561530781614ffd565b809150509250925092565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526012908201527115d2125511531254d517d11254d05093115160721b604082015260600190565b6020808252600d908201526c2727aa2fab20a624a220aa27a960991b604082015260600190565b6020808252600a90820152691393d517d4d51052d15160b21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156153db576153db6153b3565b500390565b634e487b7160e01b600052602160045260246000fd5b803560048110614fbc57600080fd5b60006020828403121561541757600080fd5b61286b826153f6565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561545857615458615420565b60405290565b60006080828403121561547057600080fd5b615478615436565b905082601f83011261548957600080fd5b615491615436565b8060408401858111156154a357600080fd5b845b818110156154bd5780358452602093840193016154a5565b5081845285605f8601126154d057600080fd5b6154d8615436565b925082915060808501868111156154ee57600080fd5b8082101561551357813561550181614ffd565b845260209384019391909101906154ee565b505060208301525092915050565b60006080828403121561553357600080fd5b61286b838361545e565b6000600019821415615551576155516153b3565b5060010190565b634e487b7160e01b600052600160045260246000fd5b60008219821115615581576155816153b3565b500190565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156155b6576155b66153b3565b500290565b6000816155ca576155ca6153b3565b506000190190565b634e487b7160e01b600052601260045260246000fd5b6000826155f7576155f76155d2565b500490565b60006001600160401b0380831681851680830382111561561e5761561e6153b3565b01949350505050565b6020808252600e908201526d1053149150511657d4d51052d15160921b604082015260600190565b60006001600160401b038381169083168181101561566f5761566f6153b3565b039392505050565b600181815b808511156156b2578160001904821115615698576156986153b3565b808516156156a557918102915b93841c939080029061567c565b509250929050565b6000826156c95750600161284c565b816156d65750600061284c565b81600181146156ec57600281146156f657615712565b600191505061284c565b60ff841115615707576157076153b3565b50506001821b61284c565b5060208310610133831016604e8410600b8410161715615735575081810a61284c565b61573f8383615677565b8060001904821115615753576157536153b3565b029392505050565b600061286b83836156ba565b600082615776576157766155d2565b500690565b60006020828403121561578d57600080fd5b5051919050565b60006001600160401b03808316818114156157b1576157b16153b3565b6001019392505050565b600060a082840312156157cd57600080fd5b6157d5615436565b90506157e1838361545e565b81526157ef608083016153f6565b602082015292915050565b6000610160828403121561580d57600080fd5b604051606081018181106001600160401b038211171561582f5761582f615420565b60405261583c84846157bb565b815261584b8460a085016157bb565b602082015261014083013561585f81614ffd565b60408201529392505050565b604081833760006040838101828152908301915b6002811015612df957823561589381614ffd565b6001600160401b031682526020928301929091019060010161587f565b600481106158ce57634e487b7160e01b600052602160045260246000fd5b9052565b6158dc828261586b565b6158e8608082016153f6565b610dc460808401826158b0565b8581526101e0810161590a60208301876158d2565b61591a60c0830160a088016158d2565b61014086013561592981614ffd565b6001600160401b03166101608301526101808201949094526101a08101929092526101c09091015292915050565b888152610200810160208083018a60005b6002811015615993576159838361597e846153f6565b6158b0565b9183019190830190600101615968565b50505050606082018860005b60028110156159c5576159b2838361586b565b608092830192919091019060010161599f565b5050506001600160401b03969096166101608201526001600160a01b03948516610180820152929093166101a08301526101c08201526101e001529392505050565b600060208284031215615a1957600080fd5b815161286b81614ffd565b60006001600160401b03821680615a3d57615a3d6153b3565b6000190192915050565b634e487b7160e01b600052603160045260246000fd5b838152826020820152600060048310615a8657634e487b7160e01b600052602160045260246000fd5b5060f89190911b604082015260410192915050565b83815260006020848184015260408301845182860160005b82811015615acf57815184529284019290840190600101615ab3565b50919897505050505050505056feebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6a2646970667358221220e6fdf14bd76d9255a2f963fd9b7acf88c35c62f366d0b3ca3730632941b544e864736f6c63430008090033",
}

// RollupUserLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupUserLogicMetaData.ABI instead.
var RollupUserLogicABI = RollupUserLogicMetaData.ABI

// RollupUserLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupUserLogicMetaData.Bin instead.
var RollupUserLogicBin = RollupUserLogicMetaData.Bin

// DeployRollupUserLogic deploys a new Ethereum contract, binding an instance of RollupUserLogic to it.
func DeployRollupUserLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupUserLogic, error) {
	parsed, err := RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupUserLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// RollupUserLogic is an auto generated Go binding around an Ethereum contract.
type RollupUserLogic struct {
	RollupUserLogicCaller     // Read-only binding to the contract
	RollupUserLogicTransactor // Write-only binding to the contract
	RollupUserLogicFilterer   // Log filterer for contract events
}

// RollupUserLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupUserLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupUserLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupUserLogicSession struct {
	Contract     *RollupUserLogic  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupUserLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupUserLogicCallerSession struct {
	Contract *RollupUserLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// RollupUserLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupUserLogicTransactorSession struct {
	Contract     *RollupUserLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// RollupUserLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupUserLogicRaw struct {
	Contract *RollupUserLogic // Generic contract binding to access the raw methods on
}

// RollupUserLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupUserLogicCallerRaw struct {
	Contract *RollupUserLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupUserLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactorRaw struct {
	Contract *RollupUserLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupUserLogic creates a new instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogic(address common.Address, backend bind.ContractBackend) (*RollupUserLogic, error) {
	contract, err := bindRollupUserLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// NewRollupUserLogicCaller creates a new read-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupUserLogicCaller, error) {
	contract, err := bindRollupUserLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicCaller{contract: contract}, nil
}

// NewRollupUserLogicTransactor creates a new write-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupUserLogicTransactor, error) {
	contract, err := bindRollupUserLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicTransactor{contract: contract}, nil
}

// NewRollupUserLogicFilterer creates a new log filterer instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupUserLogicFilterer, error) {
	contract, err := bindRollupUserLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicFilterer{contract: contract}, nil
}

// bindRollupUserLogic binds a generic wrapper to an already deployed contract.
func bindRollupUserLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupUserLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.RollupUserLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transact(opts, method, params...)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) VALIDATORAFKBLOCKS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "VALIDATOR_AFK_BLOCKS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_RollupUserLogic.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_RollupUserLogic.CallOpts)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupUserLogic *RollupUserLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked     *big.Int
		Index            uint64
		LatestStakedNode uint64
		CurrentChallenge uint64
		IsStaked         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Index = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.LatestStakedNode = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.CurrentChallenge = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupUserLogic *RollupUserLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) CountStakedZombies(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "countStakedZombies", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.CountStakedZombies(&_RollupUserLogic.CallOpts, nodeNum)
}

// CountStakedZombies is a free data retrieval call binding the contract method 0x5c617e94.
//
// Solidity: function countStakedZombies(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) CountStakedZombies(nodeNum uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.CountStakedZombies(&_RollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) CountZombiesStakedOnChildren(opts *bind.CallOpts, nodeNum uint64) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "countZombiesStakedOnChildren", nodeNum)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.CountZombiesStakedOnChildren(&_RollupUserLogic.CallOpts, nodeNum)
}

// CountZombiesStakedOnChildren is a free data retrieval call binding the contract method 0x6d08d0a2.
//
// Solidity: function countZombiesStakedOnChildren(uint64 nodeNum) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) CountZombiesStakedOnChildren(nodeNum uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.CountZombiesStakedOnChildren(&_RollupUserLogic.CallOpts, nodeNum)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) CurrentChallenge(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "currentChallenge", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupUserLogic.Contract.CurrentChallenge(&_RollupUserLogic.CallOpts, staker)
}

// CurrentChallenge is a free data retrieval call binding the contract method 0x69fd251c.
//
// Solidity: function currentChallenge(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) CurrentChallenge(staker common.Address) (uint64, error) {
	return _RollupUserLogic.Contract.CurrentChallenge(&_RollupUserLogic.CallOpts, staker)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) CurrentRequiredStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "currentRequiredStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) CurrentRequiredStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.CurrentRequiredStake(&_RollupUserLogic.CallOpts)
}

// CurrentRequiredStake is a free data retrieval call binding the contract method 0x4d26732d.
//
// Solidity: function currentRequiredStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) CurrentRequiredStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.CurrentRequiredStake(&_RollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ExtraChallengeTimeBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "extraChallengeTimeBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_RollupUserLogic.CallOpts)
}

// ExtraChallengeTimeBlocks is a free data retrieval call binding the contract method 0x771b2f97.
//
// Solidity: function extraChallengeTimeBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ExtraChallengeTimeBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ExtraChallengeTimeBlocks(&_RollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) FirstUnresolvedNode(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "firstUnresolvedNode")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupUserLogic.Contract.FirstUnresolvedNode(&_RollupUserLogic.CallOpts)
}

// FirstUnresolvedNode is a free data retrieval call binding the contract method 0xd735e21d.
//
// Solidity: function firstUnresolvedNode() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) FirstUnresolvedNode() (uint64, error) {
	return _RollupUserLogic.Contract.FirstUnresolvedNode(&_RollupUserLogic.CallOpts)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupUserLogic *RollupUserLogicCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupUserLogic *RollupUserLogicSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupUserLogic.Contract.GetNode(&_RollupUserLogic.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupUserLogic.Contract.GetNode(&_RollupUserLogic.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupUserLogic *RollupUserLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupUserLogic *RollupUserLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) Initialize(opts *bind.CallOpts, _stakeToken common.Address) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "initialize", _stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsERC20Enabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isERC20Enabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsERC20Enabled() (bool, error) {
	return _RollupUserLogic.Contract.IsERC20Enabled(&_RollupUserLogic.CallOpts)
}

// IsERC20Enabled is a free data retrieval call binding the contract method 0xcd205fda.
//
// Solidity: function isERC20Enabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsERC20Enabled() (bool, error) {
	return _RollupUserLogic.Contract.IsERC20Enabled(&_RollupUserLogic.CallOpts)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsStakedOnLatestConfirmed(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isStakedOnLatestConfirmed", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_RollupUserLogic.CallOpts, staker)
}

// IsStakedOnLatestConfirmed is a free data retrieval call binding the contract method 0xdcd030aa.
//
// Solidity: function isStakedOnLatestConfirmed(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsStakedOnLatestConfirmed(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStakedOnLatestConfirmed(&_RollupUserLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, arg0)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsZombie(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isZombie", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsZombie(&_RollupUserLogic.CallOpts, staker)
}

// IsZombie is a free data retrieval call binding the contract method 0x91c657e8.
//
// Solidity: function isZombie(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsZombie(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsZombie(&_RollupUserLogic.CallOpts, staker)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) LastStakeBlock(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "lastStakeBlock")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) LastStakeBlock() (uint64, error) {
	return _RollupUserLogic.Contract.LastStakeBlock(&_RollupUserLogic.CallOpts)
}

// LastStakeBlock is a free data retrieval call binding the contract method 0x8640ce5f.
//
// Solidity: function lastStakeBlock() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) LastStakeBlock() (uint64, error) {
	return _RollupUserLogic.Contract.LastStakeBlock(&_RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) LatestConfirmed() (uint64, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestConfirmed() (uint64, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) LatestNodeCreated(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestNodeCreated")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) LatestNodeCreated() (uint64, error) {
	return _RollupUserLogic.Contract.LatestNodeCreated(&_RollupUserLogic.CallOpts)
}

// LatestNodeCreated is a free data retrieval call binding the contract method 0x7ba9534a.
//
// Solidity: function latestNodeCreated() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestNodeCreated() (uint64, error) {
	return _RollupUserLogic.Contract.LatestNodeCreated(&_RollupUserLogic.CallOpts)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) LatestStakedNode(opts *bind.CallOpts, staker common.Address) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestStakedNode", staker)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupUserLogic.Contract.LatestStakedNode(&_RollupUserLogic.CallOpts, staker)
}

// LatestStakedNode is a free data retrieval call binding the contract method 0x3e96576e.
//
// Solidity: function latestStakedNode(address staker) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestStakedNode(staker common.Address) (uint64, error) {
	return _RollupUserLogic.Contract.LatestStakedNode(&_RollupUserLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) NodeHasStaker(opts *bind.CallOpts, nodeNum uint64, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "nodeHasStaker", nodeNum, staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.NodeHasStaker(&_RollupUserLogic.CallOpts, nodeNum, staker)
}

// NodeHasStaker is a free data retrieval call binding the contract method 0xaa65af48.
//
// Solidity: function nodeHasStaker(uint64 nodeNum, address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) NodeHasStaker(nodeNum uint64, staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.NodeHasStaker(&_RollupUserLogic.CallOpts, nodeNum, staker)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) RequireUnresolved(opts *bind.CallOpts, nodeNum *big.Int) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "requireUnresolved", nodeNum)

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_RollupUserLogic *RollupUserLogicSession) RequireUnresolved(nodeNum *big.Int) error {
	return _RollupUserLogic.Contract.RequireUnresolved(&_RollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolved is a free data retrieval call binding the contract method 0x2b2af0ab.
//
// Solidity: function requireUnresolved(uint256 nodeNum) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) RequireUnresolved(nodeNum *big.Int) error {
	return _RollupUserLogic.Contract.RequireUnresolved(&_RollupUserLogic.CallOpts, nodeNum)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_RollupUserLogic *RollupUserLogicCaller) RequireUnresolvedExists(opts *bind.CallOpts) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "requireUnresolvedExists")

	if err != nil {
		return err
	}

	return err

}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_RollupUserLogic *RollupUserLogicSession) RequireUnresolvedExists() error {
	return _RollupUserLogic.Contract.RequireUnresolvedExists(&_RollupUserLogic.CallOpts)
}

// RequireUnresolvedExists is a free data retrieval call binding the contract method 0x67425daf.
//
// Solidity: function requireUnresolvedExists() view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) RequireUnresolvedExists() error {
	return _RollupUserLogic.Contract.RequireUnresolvedExists(&_RollupUserLogic.CallOpts)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) RequiredStake(opts *bind.CallOpts, blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "requiredStake", blockNumber, firstUnresolvedNodeNum, latestCreatedNode)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.RequiredStake(&_RollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RequiredStake is a free data retrieval call binding the contract method 0xb0ebedc7.
//
// Solidity: function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) RequiredStake(blockNumber *big.Int, firstUnresolvedNodeNum uint64, latestCreatedNode uint64) (*big.Int, error) {
	return _RollupUserLogic.Contract.RequiredStake(&_RollupUserLogic.CallOpts, blockNumber, firstUnresolvedNodeNum, latestCreatedNode)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorUtils() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorUtils(&_RollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorUtils(&_RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ZombieAddress(opts *bind.CallOpts, zombieNum *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "zombieAddress", zombieNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupUserLogic.Contract.ZombieAddress(&_RollupUserLogic.CallOpts, zombieNum)
}

// ZombieAddress is a free data retrieval call binding the contract method 0xd01e6602.
//
// Solidity: function zombieAddress(uint256 zombieNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ZombieAddress(zombieNum *big.Int) (common.Address, error) {
	return _RollupUserLogic.Contract.ZombieAddress(&_RollupUserLogic.CallOpts, zombieNum)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) ZombieCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "zombieCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) ZombieCount() (*big.Int, error) {
	return _RollupUserLogic.Contract.ZombieCount(&_RollupUserLogic.CallOpts)
}

// ZombieCount is a free data retrieval call binding the contract method 0x63721d6b.
//
// Solidity: function zombieCount() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) ZombieCount() (*big.Int, error) {
	return _RollupUserLogic.Contract.ZombieCount(&_RollupUserLogic.CallOpts)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ZombieLatestStakedNode(opts *bind.CallOpts, zombieNum *big.Int) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "zombieLatestStakedNode", zombieNum)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupUserLogic.Contract.ZombieLatestStakedNode(&_RollupUserLogic.CallOpts, zombieNum)
}

// ZombieLatestStakedNode is a free data retrieval call binding the contract method 0xf33e1fac.
//
// Solidity: function zombieLatestStakedNode(uint256 zombieNum) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ZombieLatestStakedNode(zombieNum *big.Int) (uint64, error) {
	return _RollupUserLogic.Contract.ZombieLatestStakedNode(&_RollupUserLogic.CallOpts, zombieNum)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "addToDeposit", stakerAddress)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_RollupUserLogic *RollupUserLogicSession) AddToDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0x45c5b2c7.
//
// Solidity: function addToDeposit(address stakerAddress) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) AddToDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) CompleteChallenge(opts *bind.TransactOpts, challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "completeChallenge", challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_RollupUserLogic *RollupUserLogicSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.CompleteChallenge(&_RollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// CompleteChallenge is a paid mutator transaction binding the contract method 0x0357aa49.
//
// Solidity: function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) CompleteChallenge(challengeIndex *big.Int, winningStaker common.Address, losingStaker common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.CompleteChallenge(&_RollupUserLogic.TransactOpts, challengeIndex, winningStaker, losingStaker)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ConfirmNextNode(opts *bind.TransactOpts, blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "confirmNextNode", blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupUserLogic *RollupUserLogicSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmNextNode(&_RollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// ConfirmNextNode is a paid mutator transaction binding the contract method 0x5eb405d5.
//
// Solidity: function confirmNextNode(bytes32 blockHash, bytes32 sendRoot) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ConfirmNextNode(blockHash [32]byte, sendRoot [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmNextNode(&_RollupUserLogic.TransactOpts, blockHash, sendRoot)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) CreateChallenge(opts *bind.TransactOpts, stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "createChallenge", stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_RollupUserLogic *RollupUserLogicSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.CreateChallenge(&_RollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x6f57644e.
//
// Solidity: function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, (bytes32[2],uint64[2])[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) CreateChallenge(stakers [2]common.Address, nodeNums [2]uint64, machineStatuses [2]uint8, globalStates [2]GlobalState, numBlocks uint64, secondExecutionHash [32]byte, proposedBlocks [2]*big.Int, wasmModuleRoots [2][32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.CreateChallenge(&_RollupUserLogic.TransactOpts, stakers, nodeNums, machineStatuses, globalStates, numBlocks, secondExecutionHash, proposedBlocks, wasmModuleRoots)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStakeOnExistingNode", nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnExistingNode(&_RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// NewStakeOnExistingNode is a paid mutator transaction binding the contract method 0xced01cfb.
//
// Solidity: function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnExistingNode(&_RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStakeOnNewNode(opts *bind.TransactOpts, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewNode(&_RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// NewStakeOnNewNode is a paid mutator transaction binding the contract method 0x4774e576.
//
// Solidity: function newStakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewNode(&_RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RejectNextNode(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "rejectNextNode", stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RejectNextNode(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// RejectNextNode is a paid mutator transaction binding the contract method 0x6b94c33b.
//
// Solidity: function rejectNextNode(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RejectNextNode(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RejectNextNode(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveOldZombies(opts *bind.TransactOpts, startIndex *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeOldZombies", startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveOldZombies(&_RollupUserLogic.TransactOpts, startIndex)
}

// RemoveOldZombies is a paid mutator transaction binding the contract method 0xedfd03ed.
//
// Solidity: function removeOldZombies(uint256 startIndex) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveOldZombies(startIndex *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveOldZombies(&_RollupUserLogic.TransactOpts, startIndex)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveZombie(opts *bind.TransactOpts, zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeZombie", zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveZombie(&_RollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// RemoveZombie is a paid mutator transaction binding the contract method 0x7e2d2155.
//
// Solidity: function removeZombie(uint256 zombieNum, uint256 maxNodes) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveZombie(zombieNum *big.Int, maxNodes *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveZombie(&_RollupUserLogic.TransactOpts, zombieNum, maxNodes)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReturnOldDeposit(opts *bind.TransactOpts, stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "returnOldDeposit", stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x7427be51.
//
// Solidity: function returnOldDeposit(address stakerAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReturnOldDeposit(stakerAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts, stakerAddress)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) StakeOnExistingNode(opts *bind.TransactOpts, nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "stakeOnExistingNode", nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnExistingNode(&_RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnExistingNode is a paid mutator transaction binding the contract method 0x1aeb55a0.
//
// Solidity: function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) StakeOnExistingNode(nodeNum uint64, nodeHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnExistingNode(&_RollupUserLogic.TransactOpts, nodeNum, nodeHash)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) StakeOnNewNode(opts *bind.TransactOpts, assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "stakeOnNewNode", assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_RollupUserLogic *RollupUserLogicSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewNode(&_RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// StakeOnNewNode is a paid mutator transaction binding the contract method 0x54ce8961.
//
// Solidity: function stakeOnNewNode((((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) StakeOnNewNode(assertion RollupLibAssertion, expectedNodeHash [32]byte, prevNodeInboxMaxCount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewNode(&_RollupUserLogic.TransactOpts, assertion, expectedNodeHash, prevNodeInboxMaxCount)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// RollupUserLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupUserLogic contract.
type RollupUserLogicAdminChangedIterator struct {
	Event *RollupUserLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAdminChanged represents a AdminChanged event raised by the RollupUserLogic contract.
type RollupUserLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupUserLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAdminChangedIterator{contract: _RollupUserLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAdminChanged)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAdminChanged(log types.Log) (*RollupUserLogicAdminChanged, error) {
	event := new(RollupUserLogicAdminChanged)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgradedIterator struct {
	Event *RollupUserLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupUserLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicBeaconUpgradedIterator{contract: _RollupUserLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicBeaconUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupUserLogicBeaconUpgraded, error) {
	event := new(RollupUserLogicBeaconUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicNodeConfirmedIterator is returned from FilterNodeConfirmed and is used to iterate over the raw logs and unpacked data for NodeConfirmed events raised by the RollupUserLogic contract.
type RollupUserLogicNodeConfirmedIterator struct {
	Event *RollupUserLogicNodeConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicNodeConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicNodeConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicNodeConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicNodeConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicNodeConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicNodeConfirmed represents a NodeConfirmed event raised by the RollupUserLogic contract.
type RollupUserLogicNodeConfirmed struct {
	NodeNum   uint64
	BlockHash [32]byte
	SendRoot  [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNodeConfirmed is a free log retrieval operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterNodeConfirmed(opts *bind.FilterOpts, nodeNum []uint64) (*RollupUserLogicNodeConfirmedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicNodeConfirmedIterator{contract: _RollupUserLogic.contract, event: "NodeConfirmed", logs: logs, sub: sub}, nil
}

// WatchNodeConfirmed is a free log subscription operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchNodeConfirmed(opts *bind.WatchOpts, sink chan<- *RollupUserLogicNodeConfirmed, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "NodeConfirmed", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicNodeConfirmed)
				if err := _RollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeConfirmed is a log parse operation binding the contract event 0x22ef0479a7ff660660d1c2fe35f1b632cf31675c2d9378db8cec95b00d8ffa3c.
//
// Solidity: event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseNodeConfirmed(log types.Log) (*RollupUserLogicNodeConfirmed, error) {
	event := new(RollupUserLogicNodeConfirmed)
	if err := _RollupUserLogic.contract.UnpackLog(event, "NodeConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the RollupUserLogic contract.
type RollupUserLogicNodeCreatedIterator struct {
	Event *RollupUserLogicNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicNodeCreated represents a NodeCreated event raised by the RollupUserLogic contract.
type RollupUserLogicNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          RollupLibAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*RollupUserLogicNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicNodeCreatedIterator{contract: _RollupUserLogic.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicNodeCreated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseNodeCreated(log types.Log) (*RollupUserLogicNodeCreated, error) {
	event := new(RollupUserLogicNodeCreated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicNodeRejectedIterator is returned from FilterNodeRejected and is used to iterate over the raw logs and unpacked data for NodeRejected events raised by the RollupUserLogic contract.
type RollupUserLogicNodeRejectedIterator struct {
	Event *RollupUserLogicNodeRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicNodeRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicNodeRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicNodeRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicNodeRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicNodeRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicNodeRejected represents a NodeRejected event raised by the RollupUserLogic contract.
type RollupUserLogicNodeRejected struct {
	NodeNum uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeRejected is a free log retrieval operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterNodeRejected(opts *bind.FilterOpts, nodeNum []uint64) (*RollupUserLogicNodeRejectedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicNodeRejectedIterator{contract: _RollupUserLogic.contract, event: "NodeRejected", logs: logs, sub: sub}, nil
}

// WatchNodeRejected is a free log subscription operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchNodeRejected(opts *bind.WatchOpts, sink chan<- *RollupUserLogicNodeRejected, nodeNum []uint64) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "NodeRejected", nodeNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicNodeRejected)
				if err := _RollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRejected is a log parse operation binding the contract event 0xeaffa3d968707ec919a2fc9f31d5ab2b86c905881ff561725d5a82fc95ad4640.
//
// Solidity: event NodeRejected(uint64 indexed nodeNum)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseNodeRejected(log types.Log) (*RollupUserLogicNodeRejected, error) {
	event := new(RollupUserLogicNodeRejected)
	if err := _RollupUserLogic.contract.UnpackLog(event, "NodeRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupUserLogic contract.
type RollupUserLogicPausedIterator struct {
	Event *RollupUserLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicPaused represents a Paused event raised by the RollupUserLogic contract.
type RollupUserLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupUserLogicPausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicPausedIterator{contract: _RollupUserLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicPaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParsePaused(log types.Log) (*RollupUserLogicPaused, error) {
	event := new(RollupUserLogicPaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStartedIterator struct {
	Event *RollupUserLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStarted struct {
	ChallengeIndex uint64
	Asserter       common.Address
	Challenger     common.Address
	ChallengedNode uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupUserLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupChallengeStartedIterator{contract: _RollupUserLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupChallengeStarted)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupUserLogicRollupChallengeStarted, error) {
	event := new(RollupUserLogicRollupChallengeStarted)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitializedIterator struct {
	Event *RollupUserLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupInitialized represents a RollupInitialized event raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupUserLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupInitializedIterator{contract: _RollupUserLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupInitialized)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupUserLogicRollupInitialized, error) {
	event := new(RollupUserLogicRollupInitialized)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupUserLogic contract.
type RollupUserLogicUnpausedIterator struct {
	Event *RollupUserLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUnpaused represents a Unpaused event raised by the RollupUserLogic contract.
type RollupUserLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupUserLogicUnpausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUnpausedIterator{contract: _RollupUserLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUnpaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUnpaused(log types.Log) (*RollupUserLogicUnpaused, error) {
	event := new(RollupUserLogicUnpaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedIterator struct {
	Event *RollupUserLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgraded represents a Upgraded event raised by the RollupUserLogic contract.
type RollupUserLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedIterator{contract: _RollupUserLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgraded(log types.Log) (*RollupUserLogicUpgraded, error) {
	event := new(RollupUserLogicUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondaryIterator struct {
	Event *RollupUserLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedSecondaryIterator{contract: _RollupUserLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgradedSecondary)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupUserLogicUpgradedSecondary, error) {
	event := new(RollupUserLogicUpgradedSecondary)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdatedIterator struct {
	Event *RollupUserLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupUserLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserStakeUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserStakeUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupUserLogicUserStakeUpdated, error) {
	event := new(RollupUserLogicUserStakeUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupUserLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupUserLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserWithdrawableFundsUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupUserLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupUserLogicUserWithdrawableFundsUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorUtilsMetaData contains all meta data concerning the ValidatorUtils contract.
var ValidatorUtilsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"areUnresolvedNodesLinear\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupUserAbs\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"checkDecidableNextNode\",\"outputs\":[{\"internalType\":\"enumValidatorUtils.ConfirmType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"node1\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"node2\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxDepth\",\"type\":\"uint256\"}],\"name\":\"findNodeConflict\",\"outputs\":[{\"components\":[{\"internalType\":\"enumValidatorUtils.NodeConflictType\",\"name\":\"ty\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"node1\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"node2\",\"type\":\"uint64\"}],\"internalType\":\"structValidatorUtils.NodeConflict\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxDepth\",\"type\":\"uint256\"}],\"name\":\"findStakerConflict\",\"outputs\":[{\"components\":[{\"internalType\":\"enumValidatorUtils.NodeConflictType\",\"name\":\"ty\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"node1\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"node2\",\"type\":\"uint64\"}],\"internalType\":\"structValidatorUtils.NodeConflict\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"hasMore\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStaked\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"refundableStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupUserAbs\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"requireConfirmable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"}],\"name\":\"requireRejectable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakedNodes\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIRollupCore\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"timedOutChallenges\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"},{\"internalType\":\"bool\",\"name\":\"hasMore\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506125bf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80637464ae06116100715780637464ae06146101415780637988ad371461016157806382f50e2d14610181578063aea2f06e14610194578063c308eaaf146101b7578063f36e18cc146101d757600080fd5b806301d9717d146100ae5780630a46c1b5146100d85780631fc43bb6146100f85780633400b5fa1461010d578063712293401461012e575b600080fd5b6100c16100bc366004611efd565b6101f8565b6040516100cf929190611f36565b60405180910390f35b6100eb6100e6366004612043565b6103ec565b6040516100cf919061207d565b61010b610106366004612043565b6104b1565b005b61012061011b3660046120ac565b610973565b6040516100cf92919061213b565b61010b61013c366004612043565b610c83565b61015461014f366004612043565b610fe9565b6040516100cf9190612198565b61017461016f3660046121ab565b611340565b6040516100cf91906121fc565b61017461018f366004612240565b611477565b6101a76101a2366004612043565b611884565b60405190151581526020016100cf565b6101ca6101c5366004611efd565b611a6a565b6040516100cf9190612281565b6101ea6101e53660046120ac565b611c79565b6040516100cf929190612294565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101829052604051631f4b2bb760e11b81526000906001600160a01b03861690633e96576e906102879087906004016122a7565b60206040518083038186803b15801561029f57600080fd5b505afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d791906122c6565b90506001600160401b03811661035b57846001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032057600080fd5b505afa158015610334573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035891906122c6565b90505b6040516324b204d360e21b81526001600160401b03821660048201526000906001600160a01b038716906392c8134c906024016101806040518083038186803b1580156103a757600080fd5b505afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190612330565b9196919550909350505050565b604051630fe21ddb60e11b81526000903090631fc43bb6906104129085906004016122a7565b60006040518083038186803b15801561042a57600080fd5b505afa92505050801561043b575060015b6104445761044c565b506001919050565b6040516301c48a4d60e61b8152309063712293409061046f9085906004016122a7565b60006040518083038186803b15801561048757600080fd5b505afa925050508015610498575060015b6104a457506000919050565b506002919050565b919050565b806001600160a01b03166367425daf6040518163ffffffff1660e01b815260040160006040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506000816001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057591906122c6565b6001600160401b03169050600081116105c25760405162461bcd60e51b815260206004820152600a6024820152694e4f5f5354414b45525360b01b60448201526064015b60405180910390fd5b6000826001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063591906122c6565b6040516324b204d360e21b81526001600160401b03821660048201529091506000906001600160a01b038516906392c8134c906024016101806040518083038186803b15801561068457600080fd5b505afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc9190612330565b90506106c781611e68565b836001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561070057600080fd5b505afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073891906122c6565b6001600160401b031681606001516001600160401b03161461075c5761075c612402565b60608101516040516324b204d360e21b81526001600160401b0390911660048201526000906001600160a01b038616906392c8134c906024016101806040518083038186803b1580156107ae57600080fd5b505afa1580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e69190612330565b90506107f181611e98565b6040516317185fa560e21b81526001600160401b03841660048201526000906001600160a01b03871690635c617e949060240160206040518083038186803b15801561083c57600080fd5b505afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190612418565b6060840151604051633684685160e11b81526001600160401b0390911660048201526001600160a01b03881690636d08d0a29060240160206040518083038186803b1580156108c257600080fd5b505afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190612418565b6109049190612447565b9050808360c001516001600160401b031661091f919061245e565b8260e001516001600160401b03161461096b5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d0531317d4d51052d15160921b60448201526064016105b9565b505050505050565b60606000806000610985878787611c79565b91509150600082516001600160401b038111156109a4576109a46122e3565b6040519080825280602002602001820160405280156109cd578160200160208202803683370190505b509050600080896001600160a01b031663023a96fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0c57600080fd5b505afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190612476565b905060005b8551811015610c73576000868281518110610a6657610a66612493565b6020026020010151905060008c6001600160a01b03166369fd251c836040518263ffffffff1660e01b8152600401610a9e91906122a7565b60206040518083038186803b158015610ab657600080fd5b505afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee91906122c6565b90506001600160401b03811615801590610b835750604051639ede42b960e01b81526001600160401b03821660048201526001600160a01b03851690639ede42b99060240160206040518083038186803b158015610b4b57600080fd5b505afa158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8391906124a9565b8015610c1a57506040516323a9ef2360e01b81526001600160401b03821660048201526001600160a01b0380841691908616906323a9ef239060240160206040518083038186803b158015610bd757600080fd5b505afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190612476565b6001600160a01b0316145b15610c5e57808686610c2b816124cb565b975081518110610c3d57610c3d612493565b60200260200101906001600160401b031690816001600160401b0316815250505b50508080610c6b906124cb565b915050610a49565b5050815297909650945050505050565b806001600160a01b03166367425daf6040518163ffffffff1660e01b815260040160006040518083038186803b158015610cbc57600080fd5b505afa158015610cd0573d6000803e3d6000fd5b505050506000816001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0f57600080fd5b505afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4791906122c6565b6040516324b204d360e21b81526001600160401b03821660048201529091506000906001600160a01b038416906392c8134c906024016101806040518083038186803b158015610d9657600080fd5b505afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190612330565b9050826001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4191906122c6565b6001600160401b031681606001516001600160401b03161415610fe45780608001516001600160401b0316431015610e8b5760405162461bcd60e51b81526004016105b9906124e6565b60608101516040516324b204d360e21b81526001600160401b039091166004820152610f1b906001600160a01b038516906392c8134c906024016101806040518083038186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f169190612330565b611e98565b6040516317185fa560e21b81526001600160401b03831660048201526001600160a01b03841690635c617e949060240160206040518083038186803b158015610f6357600080fd5b505afa158015610f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9b9190612418565b8160c001516001600160401b031614610fe45760405162461bcd60e51b815260206004820152600b60248201526a4841535f5354414b45525360a81b60448201526064016105b9565b505050565b60606000826001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b15801561102657600080fd5b505afa15801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e91906122c6565b6001600160401b031690506000816001600160401b03811115611083576110836122e3565b6040519080825280602002602001820160405280156110ac578160200160208202803683370190505b5090506000846001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ea57600080fd5b505afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112291906122c6565b6001600160401b031690506000805b84816001600160401b0316101561133557604051631b774dd160e21b81526001600160401b03821660048201526000906001600160a01b03891690636ddd37449060240160206040518083038186803b15801561118d57600080fd5b505afa1580156111a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c59190612476565b90506000886001600160a01b0316633e96576e836040518263ffffffff1660e01b81526004016111f591906122a7565b60206040518083038186803b15801561120d57600080fd5b505afa158015611221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124591906122c6565b6001600160401b031690508481111580156112e25750604051631a7f494760e21b81526001600160a01b038a16906369fd251c906112879085906004016122a7565b60206040518083038186803b15801561129f57600080fd5b505afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d791906122c6565b6001600160401b0316155b1561132057818685815181106112fa576112fa612493565b6001600160a01b03909216602092830291909101909101528361131c816124cb565b9450505b5050808061132d9061250f565b915050611131565b508252509392505050565b6040805160608101825260008082526020820181905291810191909152604051631f4b2bb760e11b81526000906001600160a01b03871690633e96576e9061138c9088906004016122a7565b60206040518083038186803b1580156113a457600080fd5b505afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc91906122c6565b90506000866001600160a01b0316633e96576e866040518263ffffffff1660e01b815260040161140c91906122a7565b60206040518083038186803b15801561142457600080fd5b505afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c91906122c6565b905061146a87838387611477565b925050505b949350505050565b60408051606081018252600080825260208201819052918101919091526000856001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114cf57600080fd5b505afa1580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150791906122c6565b6040516324b204d360e21b81526001600160401b03871660048201529091506000906001600160a01b038816906392c8134c906024016101806040518083038186803b15801561155657600080fd5b505afa15801561156a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158e9190612330565b606001516040516324b204d360e21b81526001600160401b03871660048201529091506000906001600160a01b038916906392c8134c906024016101806040518083038186803b1580156115e157600080fd5b505afa1580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190612330565b60600151905060005b8581101561185857866001600160401b0316886001600160401b0316141561167f5760408051606081019091528060005b8152602001896001600160401b03168152602001886001600160401b031681525094505050505061146f565b816001600160401b0316836001600160401b031614156116ac576040805160608101909152806001611653565b836001600160401b0316836001600160401b03161080156116de5750836001600160401b0316826001600160401b0316105b1561170e5760408051606081019091528060028152600060208201819052604090910152945061146f9350505050565b816001600160401b0316836001600160401b031610156117b9576040516324b204d360e21b81526001600160401b038316600482015291965086916001600160a01b038a16906392c8134c906024016101806040518083038186803b15801561177657600080fd5b505afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae9190612330565b606001519150611846565b6040516324b204d360e21b81526001600160401b038416600482015292975087926001600160a01b038a16906392c8134c906024016101806040518083038186803b15801561180757600080fd5b505afa15801561181b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183f9190612330565b6060015192505b80611850816124cb565b915050611622565b506040805160608101909152806003815260006020820181905260409091015298975050505050505050565b600080826001600160a01b0316637ba9534a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118c057600080fd5b505afa1580156118d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f891906122c6565b6001600160401b031690506000836001600160a01b031663d735e21d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197691906122c6565b90505b81816001600160401b031611611a60576000816001600160401b0316118015611a3f57506119a8600182612536565b6040516324b204d360e21b81526001600160401b03838116600483015291909116906001600160a01b038616906392c8134c906024016101806040518083038186803b1580156119f757600080fd5b505afa158015611a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2f9190612330565b606001516001600160401b031614155b15611a4e575060009392505050565b80611a588161250f565b915050611979565b5060019392505050565b60408051620186a08082526230d420820190925260609160009190602082016230d40080368337019050509050600080856001600160a01b03166365f7f80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ad357600080fd5b505afa158015611ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0b91906122c6565b90505b856001600160a01b0316637ba9534a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4757600080fd5b505afa158015611b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7f91906122c6565b6001600160401b0316816001600160401b031611611c6f5760405163154cb5e960e31b81526001600160401b03821660048201526001600160a01b03868116602483015287169063aa65af489060440160206040518083038186803b158015611be757600080fd5b505afa158015611bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1f91906124a9565b15611c5d5780838381518110611c3757611c37612493565b6001600160401b039092166020928302919091019091015281611c59816124cb565b9250505b80611c678161250f565b915050611b0e565b5081529392505050565b6060600080856001600160a01b031663dff697876040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb757600080fd5b505afa158015611ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cef91906122c6565b6001600160401b0316905080611d05858761255e565b6001600160401b031611611d2d57611d1d848661255e565b6001600160401b03169050600191505b6000816001600160401b03811115611d4757611d476122e3565b604051908082528060200260200182016040528015611d70578160200160208202803683370190505b50905060005b82816001600160401b03161015611e5c576001600160a01b038816636ddd3744611da0838a61255e565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b158015611ddf57600080fd5b505afa158015611df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e179190612476565b82826001600160401b031681518110611e3257611e32612493565b6001600160a01b039092166020928302919091019091015280611e548161250f565b915050611d76565b50925050935093915050565b80608001516001600160401b0316431015611e955760405162461bcd60e51b81526004016105b9906124e6565b50565b8060a001516001600160401b0316431015611e955760405162461bcd60e51b815260206004820152601060248201526f10d212531117d513d3d7d49150d1539560821b60448201526064016105b9565b6001600160a01b0381168114611e9557600080fd5b60008060408385031215611f1057600080fd5b8235611f1b81611ee8565b91506020830135611f2b81611ee8565b809150509250929050565b60006101a0820190506001600160401b03841682528251602083015260208301516040830152604083015160608301526060830151611f8060808401826001600160401b03169052565b5060808301516001600160401b03811660a08401525060a08301516001600160401b03811660c08401525060c08301516001600160401b03811660e08401525060e0830151610100611fdc818501836001600160401b03169052565b8401519050610120611ff8848201836001600160401b03169052565b8401519050610140612014848201836001600160401b03169052565b8401519050610160612030848201836001600160401b03169052565b8085015161018085015250509392505050565b60006020828403121561205557600080fd5b813561206081611ee8565b9392505050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061209157612091612067565b91905290565b6001600160401b0381168114611e9557600080fd5b6000806000606084860312156120c157600080fd5b83356120cc81611ee8565b925060208401356120dc81612097565b915060408401356120ec81612097565b809150509250925092565b600081518084526020808501945080840160005b838110156121305781516001600160401b03168752958201959082019060010161210b565b509495945050505050565b60408152600061214e60408301856120f7565b905082151560208301529392505050565b600081518084526020808501945080840160005b838110156121305781516001600160a01b031687529582019590820190600101612173565b602081526000612060602083018461215f565b600080600080608085870312156121c157600080fd5b84356121cc81611ee8565b935060208501356121dc81611ee8565b925060408501356121ec81611ee8565b9396929550929360600135925050565b815160608201906004811061221357612213612067565b8083525060208301516001600160401b038082166020850152806040860151166040850152505092915050565b6000806000806080858703121561225657600080fd5b843561226181611ee8565b9350602085013561227181612097565b925060408501356121ec81612097565b60208152600061206060208301846120f7565b60408152600061214e604083018561215f565b6001600160a01b0391909116815260200190565b80516104ac81612097565b6000602082840312156122d857600080fd5b815161206081612097565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b038111828210171561232a57634e487b7160e01b600052604160045260246000fd5b60405290565b6000610180828403121561234357600080fd5b61234b6122f9565b82518152602083015160208201526040830151604082015261236f606084016122bb565b6060820152612380608084016122bb565b608082015261239160a084016122bb565b60a08201526123a260c084016122bb565b60c08201526123b360e084016122bb565b60e08201526101006123c68185016122bb565b908201526101206123d88482016122bb565b908201526101406123ea8482016122bb565b90820152610160928301519281019290925250919050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561242a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561245957612459612431565b500390565b6000821982111561247157612471612431565b500190565b60006020828403121561248857600080fd5b815161206081611ee8565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156124bb57600080fd5b8151801515811461206057600080fd5b60006000198214156124df576124df612431565b5060010190565b6020808252600f908201526e4245464f52455f444541444c494e4560881b604082015260600190565b60006001600160401b038083168181141561252c5761252c612431565b6001019392505050565b60006001600160401b038381169083168181101561255657612556612431565b039392505050565b60006001600160401b0380831681851680830382111561258057612580612431565b0194935050505056fea264697066735822122052625b6c04966e565ff851f4448336a0e3e6562259ec5a43e15d74068be5c3a764736f6c63430008090033",
}

// ValidatorUtilsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorUtilsMetaData.ABI instead.
var ValidatorUtilsABI = ValidatorUtilsMetaData.ABI

// ValidatorUtilsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorUtilsMetaData.Bin instead.
var ValidatorUtilsBin = ValidatorUtilsMetaData.Bin

// DeployValidatorUtils deploys a new Ethereum contract, binding an instance of ValidatorUtils to it.
func DeployValidatorUtils(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorUtils, error) {
	parsed, err := ValidatorUtilsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorUtilsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorUtils{ValidatorUtilsCaller: ValidatorUtilsCaller{contract: contract}, ValidatorUtilsTransactor: ValidatorUtilsTransactor{contract: contract}, ValidatorUtilsFilterer: ValidatorUtilsFilterer{contract: contract}}, nil
}

// ValidatorUtils is an auto generated Go binding around an Ethereum contract.
type ValidatorUtils struct {
	ValidatorUtilsCaller     // Read-only binding to the contract
	ValidatorUtilsTransactor // Write-only binding to the contract
	ValidatorUtilsFilterer   // Log filterer for contract events
}

// ValidatorUtilsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorUtilsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorUtilsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorUtilsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorUtilsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorUtilsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorUtilsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorUtilsSession struct {
	Contract     *ValidatorUtils   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorUtilsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorUtilsCallerSession struct {
	Contract *ValidatorUtilsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// ValidatorUtilsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorUtilsTransactorSession struct {
	Contract     *ValidatorUtilsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ValidatorUtilsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorUtilsRaw struct {
	Contract *ValidatorUtils // Generic contract binding to access the raw methods on
}

// ValidatorUtilsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorUtilsCallerRaw struct {
	Contract *ValidatorUtilsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorUtilsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorUtilsTransactorRaw struct {
	Contract *ValidatorUtilsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorUtils creates a new instance of ValidatorUtils, bound to a specific deployed contract.
func NewValidatorUtils(address common.Address, backend bind.ContractBackend) (*ValidatorUtils, error) {
	contract, err := bindValidatorUtils(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorUtils{ValidatorUtilsCaller: ValidatorUtilsCaller{contract: contract}, ValidatorUtilsTransactor: ValidatorUtilsTransactor{contract: contract}, ValidatorUtilsFilterer: ValidatorUtilsFilterer{contract: contract}}, nil
}

// NewValidatorUtilsCaller creates a new read-only instance of ValidatorUtils, bound to a specific deployed contract.
func NewValidatorUtilsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorUtilsCaller, error) {
	contract, err := bindValidatorUtils(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorUtilsCaller{contract: contract}, nil
}

// NewValidatorUtilsTransactor creates a new write-only instance of ValidatorUtils, bound to a specific deployed contract.
func NewValidatorUtilsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorUtilsTransactor, error) {
	contract, err := bindValidatorUtils(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorUtilsTransactor{contract: contract}, nil
}

// NewValidatorUtilsFilterer creates a new log filterer instance of ValidatorUtils, bound to a specific deployed contract.
func NewValidatorUtilsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorUtilsFilterer, error) {
	contract, err := bindValidatorUtils(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorUtilsFilterer{contract: contract}, nil
}

// bindValidatorUtils binds a generic wrapper to an already deployed contract.
func bindValidatorUtils(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorUtilsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorUtils *ValidatorUtilsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorUtils.Contract.ValidatorUtilsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorUtils *ValidatorUtilsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorUtils.Contract.ValidatorUtilsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorUtils *ValidatorUtilsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorUtils.Contract.ValidatorUtilsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorUtils *ValidatorUtilsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorUtils.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorUtils *ValidatorUtilsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorUtils.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorUtils *ValidatorUtilsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorUtils.Contract.contract.Transact(opts, method, params...)
}

// AreUnresolvedNodesLinear is a free data retrieval call binding the contract method 0xaea2f06e.
//
// Solidity: function areUnresolvedNodesLinear(address rollup) view returns(bool)
func (_ValidatorUtils *ValidatorUtilsCaller) AreUnresolvedNodesLinear(opts *bind.CallOpts, rollup common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "areUnresolvedNodesLinear", rollup)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AreUnresolvedNodesLinear is a free data retrieval call binding the contract method 0xaea2f06e.
//
// Solidity: function areUnresolvedNodesLinear(address rollup) view returns(bool)
func (_ValidatorUtils *ValidatorUtilsSession) AreUnresolvedNodesLinear(rollup common.Address) (bool, error) {
	return _ValidatorUtils.Contract.AreUnresolvedNodesLinear(&_ValidatorUtils.CallOpts, rollup)
}

// AreUnresolvedNodesLinear is a free data retrieval call binding the contract method 0xaea2f06e.
//
// Solidity: function areUnresolvedNodesLinear(address rollup) view returns(bool)
func (_ValidatorUtils *ValidatorUtilsCallerSession) AreUnresolvedNodesLinear(rollup common.Address) (bool, error) {
	return _ValidatorUtils.Contract.AreUnresolvedNodesLinear(&_ValidatorUtils.CallOpts, rollup)
}

// CheckDecidableNextNode is a free data retrieval call binding the contract method 0x0a46c1b5.
//
// Solidity: function checkDecidableNextNode(address rollup) view returns(uint8)
func (_ValidatorUtils *ValidatorUtilsCaller) CheckDecidableNextNode(opts *bind.CallOpts, rollup common.Address) (uint8, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "checkDecidableNextNode", rollup)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckDecidableNextNode is a free data retrieval call binding the contract method 0x0a46c1b5.
//
// Solidity: function checkDecidableNextNode(address rollup) view returns(uint8)
func (_ValidatorUtils *ValidatorUtilsSession) CheckDecidableNextNode(rollup common.Address) (uint8, error) {
	return _ValidatorUtils.Contract.CheckDecidableNextNode(&_ValidatorUtils.CallOpts, rollup)
}

// CheckDecidableNextNode is a free data retrieval call binding the contract method 0x0a46c1b5.
//
// Solidity: function checkDecidableNextNode(address rollup) view returns(uint8)
func (_ValidatorUtils *ValidatorUtilsCallerSession) CheckDecidableNextNode(rollup common.Address) (uint8, error) {
	return _ValidatorUtils.Contract.CheckDecidableNextNode(&_ValidatorUtils.CallOpts, rollup)
}

// FindNodeConflict is a free data retrieval call binding the contract method 0x82f50e2d.
//
// Solidity: function findNodeConflict(address rollup, uint64 node1, uint64 node2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsCaller) FindNodeConflict(opts *bind.CallOpts, rollup common.Address, node1 uint64, node2 uint64, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "findNodeConflict", rollup, node1, node2, maxDepth)

	if err != nil {
		return *new(ValidatorUtilsNodeConflict), err
	}

	out0 := *abi.ConvertType(out[0], new(ValidatorUtilsNodeConflict)).(*ValidatorUtilsNodeConflict)

	return out0, err

}

// FindNodeConflict is a free data retrieval call binding the contract method 0x82f50e2d.
//
// Solidity: function findNodeConflict(address rollup, uint64 node1, uint64 node2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsSession) FindNodeConflict(rollup common.Address, node1 uint64, node2 uint64, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	return _ValidatorUtils.Contract.FindNodeConflict(&_ValidatorUtils.CallOpts, rollup, node1, node2, maxDepth)
}

// FindNodeConflict is a free data retrieval call binding the contract method 0x82f50e2d.
//
// Solidity: function findNodeConflict(address rollup, uint64 node1, uint64 node2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsCallerSession) FindNodeConflict(rollup common.Address, node1 uint64, node2 uint64, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	return _ValidatorUtils.Contract.FindNodeConflict(&_ValidatorUtils.CallOpts, rollup, node1, node2, maxDepth)
}

// FindStakerConflict is a free data retrieval call binding the contract method 0x7988ad37.
//
// Solidity: function findStakerConflict(address rollup, address staker1, address staker2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsCaller) FindStakerConflict(opts *bind.CallOpts, rollup common.Address, staker1 common.Address, staker2 common.Address, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "findStakerConflict", rollup, staker1, staker2, maxDepth)

	if err != nil {
		return *new(ValidatorUtilsNodeConflict), err
	}

	out0 := *abi.ConvertType(out[0], new(ValidatorUtilsNodeConflict)).(*ValidatorUtilsNodeConflict)

	return out0, err

}

// FindStakerConflict is a free data retrieval call binding the contract method 0x7988ad37.
//
// Solidity: function findStakerConflict(address rollup, address staker1, address staker2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsSession) FindStakerConflict(rollup common.Address, staker1 common.Address, staker2 common.Address, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	return _ValidatorUtils.Contract.FindStakerConflict(&_ValidatorUtils.CallOpts, rollup, staker1, staker2, maxDepth)
}

// FindStakerConflict is a free data retrieval call binding the contract method 0x7988ad37.
//
// Solidity: function findStakerConflict(address rollup, address staker1, address staker2, uint256 maxDepth) view returns((uint8,uint64,uint64))
func (_ValidatorUtils *ValidatorUtilsCallerSession) FindStakerConflict(rollup common.Address, staker1 common.Address, staker2 common.Address, maxDepth *big.Int) (ValidatorUtilsNodeConflict, error) {
	return _ValidatorUtils.Contract.FindStakerConflict(&_ValidatorUtils.CallOpts, rollup, staker1, staker2, maxDepth)
}

// GetStakers is a free data retrieval call binding the contract method 0xf36e18cc.
//
// Solidity: function getStakers(address rollup, uint64 startIndex, uint64 max) view returns(address[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsCaller) GetStakers(opts *bind.CallOpts, rollup common.Address, startIndex uint64, max uint64) ([]common.Address, bool, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "getStakers", rollup, startIndex, max)

	if err != nil {
		return *new([]common.Address), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// GetStakers is a free data retrieval call binding the contract method 0xf36e18cc.
//
// Solidity: function getStakers(address rollup, uint64 startIndex, uint64 max) view returns(address[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsSession) GetStakers(rollup common.Address, startIndex uint64, max uint64) ([]common.Address, bool, error) {
	return _ValidatorUtils.Contract.GetStakers(&_ValidatorUtils.CallOpts, rollup, startIndex, max)
}

// GetStakers is a free data retrieval call binding the contract method 0xf36e18cc.
//
// Solidity: function getStakers(address rollup, uint64 startIndex, uint64 max) view returns(address[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsCallerSession) GetStakers(rollup common.Address, startIndex uint64, max uint64) ([]common.Address, bool, error) {
	return _ValidatorUtils.Contract.GetStakers(&_ValidatorUtils.CallOpts, rollup, startIndex, max)
}

// LatestStaked is a free data retrieval call binding the contract method 0x01d9717d.
//
// Solidity: function latestStaked(address rollup, address staker) view returns(uint64, (bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ValidatorUtils *ValidatorUtilsCaller) LatestStaked(opts *bind.CallOpts, rollup common.Address, staker common.Address) (uint64, Node, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "latestStaked", rollup, staker)

	if err != nil {
		return *new(uint64), *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)
	out1 := *abi.ConvertType(out[1], new(Node)).(*Node)

	return out0, out1, err

}

// LatestStaked is a free data retrieval call binding the contract method 0x01d9717d.
//
// Solidity: function latestStaked(address rollup, address staker) view returns(uint64, (bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ValidatorUtils *ValidatorUtilsSession) LatestStaked(rollup common.Address, staker common.Address) (uint64, Node, error) {
	return _ValidatorUtils.Contract.LatestStaked(&_ValidatorUtils.CallOpts, rollup, staker)
}

// LatestStaked is a free data retrieval call binding the contract method 0x01d9717d.
//
// Solidity: function latestStaked(address rollup, address staker) view returns(uint64, (bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_ValidatorUtils *ValidatorUtilsCallerSession) LatestStaked(rollup common.Address, staker common.Address) (uint64, Node, error) {
	return _ValidatorUtils.Contract.LatestStaked(&_ValidatorUtils.CallOpts, rollup, staker)
}

// RefundableStakers is a free data retrieval call binding the contract method 0x7464ae06.
//
// Solidity: function refundableStakers(address rollup) view returns(address[])
func (_ValidatorUtils *ValidatorUtilsCaller) RefundableStakers(opts *bind.CallOpts, rollup common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "refundableStakers", rollup)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// RefundableStakers is a free data retrieval call binding the contract method 0x7464ae06.
//
// Solidity: function refundableStakers(address rollup) view returns(address[])
func (_ValidatorUtils *ValidatorUtilsSession) RefundableStakers(rollup common.Address) ([]common.Address, error) {
	return _ValidatorUtils.Contract.RefundableStakers(&_ValidatorUtils.CallOpts, rollup)
}

// RefundableStakers is a free data retrieval call binding the contract method 0x7464ae06.
//
// Solidity: function refundableStakers(address rollup) view returns(address[])
func (_ValidatorUtils *ValidatorUtilsCallerSession) RefundableStakers(rollup common.Address) ([]common.Address, error) {
	return _ValidatorUtils.Contract.RefundableStakers(&_ValidatorUtils.CallOpts, rollup)
}

// RequireConfirmable is a free data retrieval call binding the contract method 0x1fc43bb6.
//
// Solidity: function requireConfirmable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsCaller) RequireConfirmable(opts *bind.CallOpts, rollup common.Address) error {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "requireConfirmable", rollup)

	if err != nil {
		return err
	}

	return err

}

// RequireConfirmable is a free data retrieval call binding the contract method 0x1fc43bb6.
//
// Solidity: function requireConfirmable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsSession) RequireConfirmable(rollup common.Address) error {
	return _ValidatorUtils.Contract.RequireConfirmable(&_ValidatorUtils.CallOpts, rollup)
}

// RequireConfirmable is a free data retrieval call binding the contract method 0x1fc43bb6.
//
// Solidity: function requireConfirmable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsCallerSession) RequireConfirmable(rollup common.Address) error {
	return _ValidatorUtils.Contract.RequireConfirmable(&_ValidatorUtils.CallOpts, rollup)
}

// RequireRejectable is a free data retrieval call binding the contract method 0x71229340.
//
// Solidity: function requireRejectable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsCaller) RequireRejectable(opts *bind.CallOpts, rollup common.Address) error {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "requireRejectable", rollup)

	if err != nil {
		return err
	}

	return err

}

// RequireRejectable is a free data retrieval call binding the contract method 0x71229340.
//
// Solidity: function requireRejectable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsSession) RequireRejectable(rollup common.Address) error {
	return _ValidatorUtils.Contract.RequireRejectable(&_ValidatorUtils.CallOpts, rollup)
}

// RequireRejectable is a free data retrieval call binding the contract method 0x71229340.
//
// Solidity: function requireRejectable(address rollup) view returns()
func (_ValidatorUtils *ValidatorUtilsCallerSession) RequireRejectable(rollup common.Address) error {
	return _ValidatorUtils.Contract.RequireRejectable(&_ValidatorUtils.CallOpts, rollup)
}

// StakedNodes is a free data retrieval call binding the contract method 0xc308eaaf.
//
// Solidity: function stakedNodes(address rollup, address staker) view returns(uint64[])
func (_ValidatorUtils *ValidatorUtilsCaller) StakedNodes(opts *bind.CallOpts, rollup common.Address, staker common.Address) ([]uint64, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "stakedNodes", rollup, staker)

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

// StakedNodes is a free data retrieval call binding the contract method 0xc308eaaf.
//
// Solidity: function stakedNodes(address rollup, address staker) view returns(uint64[])
func (_ValidatorUtils *ValidatorUtilsSession) StakedNodes(rollup common.Address, staker common.Address) ([]uint64, error) {
	return _ValidatorUtils.Contract.StakedNodes(&_ValidatorUtils.CallOpts, rollup, staker)
}

// StakedNodes is a free data retrieval call binding the contract method 0xc308eaaf.
//
// Solidity: function stakedNodes(address rollup, address staker) view returns(uint64[])
func (_ValidatorUtils *ValidatorUtilsCallerSession) StakedNodes(rollup common.Address, staker common.Address) ([]uint64, error) {
	return _ValidatorUtils.Contract.StakedNodes(&_ValidatorUtils.CallOpts, rollup, staker)
}

// TimedOutChallenges is a free data retrieval call binding the contract method 0x3400b5fa.
//
// Solidity: function timedOutChallenges(address rollup, uint64 startIndex, uint64 max) view returns(uint64[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsCaller) TimedOutChallenges(opts *bind.CallOpts, rollup common.Address, startIndex uint64, max uint64) ([]uint64, bool, error) {
	var out []interface{}
	err := _ValidatorUtils.contract.Call(opts, &out, "timedOutChallenges", rollup, startIndex, max)

	if err != nil {
		return *new([]uint64), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// TimedOutChallenges is a free data retrieval call binding the contract method 0x3400b5fa.
//
// Solidity: function timedOutChallenges(address rollup, uint64 startIndex, uint64 max) view returns(uint64[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsSession) TimedOutChallenges(rollup common.Address, startIndex uint64, max uint64) ([]uint64, bool, error) {
	return _ValidatorUtils.Contract.TimedOutChallenges(&_ValidatorUtils.CallOpts, rollup, startIndex, max)
}

// TimedOutChallenges is a free data retrieval call binding the contract method 0x3400b5fa.
//
// Solidity: function timedOutChallenges(address rollup, uint64 startIndex, uint64 max) view returns(uint64[], bool hasMore)
func (_ValidatorUtils *ValidatorUtilsCallerSession) TimedOutChallenges(rollup common.Address, startIndex uint64, max uint64) ([]uint64, bool, error) {
	return _ValidatorUtils.Contract.TimedOutChallenges(&_ValidatorUtils.CallOpts, rollup, startIndex, max)
}

// ValidatorWalletMetaData contains all meta data concerning the ValidatorWallet contract.
var ValidatorWalletMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"BadArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"NotExecutorOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"OnlyOwnerDestination\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"WithdrawEthFail\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AllowedExecutorDestinationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExecutor\",\"type\":\"bool\"}],\"name\":\"ExecutorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedExecutorDestinations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransactionWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactionsWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isSet\",\"type\":\"bool[]\"}],\"name\":\"setAllowedExecutorDestinations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newExecutors\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isExecutor\",\"type\":\"bool[]\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIChallengeManager\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"challenges\",\"type\":\"uint64[]\"}],\"name\":\"timeoutChallenges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"contractIChallengeManager\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"challenges\",\"type\":\"uint64[]\"}],\"name\":\"timeoutChallengesWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"validateExecuteTransaction\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b50608051611ad0610030600039600061090a0152611ad06000f3fe6080604052600436106100d75760003560e01c80639ac2a0111161007a5780639ac2a011146101e75780639be7bbd214610217578063a158657c14610237578063af1b9a0714610257578063c179f1d914610277578063ce1d571f1461028a578063d327821a1461029d578063f2fde38b146102bd57600080fd5b8063097da1f8146100e35780630a2435f8146100f8578063193c8edd146101185780633a7c721a1461015d578063715018a61461017d57806372f458661461019257806377a24f36146101a55780638da5cb5b146101c557600080fd5b366100de57005b600080fd5b6100f66100f136600461138a565b6102dd565b005b34801561010457600080fd5b506100f661011336600461143d565b6104f2565b34801561012457600080fd5b506101486101333660046114a8565b60666020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561016957600080fd5b506100f661017836600461143d565b610697565b34801561018957600080fd5b506100f6610808565b6100f66101a03660046114cc565b610843565b3480156101b157600080fd5b506100f66101c0366004611565565b61085b565b3480156101d157600080fd5b506101da610b00565b60405161015491906115bd565b3480156101f357600080fd5b506101486102023660046114a8565b60656020526000908152604090205460ff1681565b34801561022357600080fd5b506100f66102323660046114a8565b610b0f565b34801561024357600080fd5b506100f66102523660046115d1565b610b8b565b34801561026357600080fd5b506100f6610272366004611601565b610c35565b6100f6610285366004611655565b610c42565b6100f6610298366004611701565b610f85565b3480156102a957600080fd5b506100f66102b8366004611565565b610f99565b3480156102c957600080fd5b506100f66102d83660046114a8565b6111e8565b3360009081526065602052604090205460ff1615801561030d575033610301610b00565b6001600160a01b031614155b1561033757335b60405163f26aea8b60e01b815260040161032e91906115bd565b60405180910390fd5b8460005a9050841561036a576001600160a01b0384163b61036a5760405162461bcd60e51b815260040161032e9061175d565b61037384610b0f565b6000846001600160a01b0316848888604051610390929190611786565b60006040518083038185875af1925050503d80600081146103cd576040519150601f19603f3d011682016040523d82523d6000602084013e6103d2565b606091505b50509050806103e8576040513d806000833e8082fd5b506001600160a01b038216156104e957366000602061040883601f6117ac565b61041291906117c4565b90506102006104226002836118cc565b61042c91906117c4565b6104378260066118db565b61044191906117ac565b61044b90846117ac565b925033321461045957600091505b836001600160a01b031663e3db8a49335a61047490876118fa565b856040518463ffffffff1660e01b815260040161049393929190611911565b602060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190611940565b5050505b50505050505050565b336104fb610b00565b6001600160a01b0316146105215760405162461bcd60e51b815260040161032e9061195d565b82811461054b5760405163088253c360e11b8152600481018490526024810182905260440161032e565b60005b6001600160401b038116841115610690578282826001600160401b031681811061057a5761057a611992565b905060200201602081019061058f91906119a8565b606560008787856001600160401b03168181106105ae576105ae611992565b90506020020160208101906105c391906114a8565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905584846001600160401b03831681811061060657610606611992565b905060200201602081019061061b91906114a8565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea28484846001600160401b031681811061066057610660611992565b905060200201602081019061067591906119a8565b604051901515815260200160405180910390a260010161054e565b5050505050565b336106a0610b00565b6001600160a01b0316146106c65760405162461bcd60e51b815260040161032e9061195d565b8281146106f05760405163088253c360e11b8152600481018490526024810182905260440161032e565b60005b838110156106905782828281811061070d5761070d611992565b905060200201602081019061072291906119a8565b6066600087878581811061073857610738611992565b905060200201602081019061074d91906114a8565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905584848281811061078757610787611992565b905060200201602081019061079c91906114a8565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a48484848181106107d8576107d8611992565b90506020020160208101906107ed91906119a8565b604051901515815260200160405180910390a26001016106f3565b33610811610b00565b6001600160a01b0316146108375760405162461bcd60e51b815260040161032e9061195d565b6108416000611281565b565b6108536000878787878787610c42565b505050505050565b600054610100900460ff166108765760005460ff161561087a565b303b155b6108dd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161032e565b600054610100900460ff161580156108ff576000805461ffff19166101011790555b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561098d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161032e565b6109956112d3565b61099e846111e8565b6001600160a01b038516600081815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a260005b6001600160401b038116831115610ae7576001606660008686856001600160401b0316818110610a2d57610a2d611992565b9050602002016020810190610a4291906114a8565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905583836001600160401b038316818110610a8557610a85611992565b9050602002016020810190610a9a91906114a8565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610ad7911515815260200190565b60405180910390a26001016109fb565b508015610690576000805461ff00191690555050505050565b6033546001600160a01b031690565b6001600160a01b03811660009081526066602052604090205460ff16158015610b48575033610b3c610b00565b6001600160a01b031614155b15610b8857610b55610b00565b6040516320fe37c560e11b81526001600160a01b039182166004820152336024820152908216604482015260640161032e565b50565b33610b94610b00565b6001600160a01b031614610bba5760405162461bcd60e51b815260040161032e9061195d565b6000816001600160a01b03168360405160006040518083038185875af1925050503d8060008114610c07576040519150601f19603f3d011682016040523d82523d6000602084013e610c0c565b606091505b5050905080610c305781604051630fdb769360e31b815260040161032e91906115bd565b505050565b610c306000848484610f99565b3360009081526065602052604090205460ff16158015610c72575033610c66610b00565b6001600160a01b031614155b15610c7d5733610314565b8660005a905086858114610cae5760405163088253c360e11b8152600481018290526024810187905260440161032e565b808414610cd85760405163088253c360e11b8152600481018290526024810185905260440161032e565b60005b81811015610e785760008a8a83818110610cf757610cf7611992565b9050602002810190610d0991906119c5565b90501115610d6657610d4a888883818110610d2657610d26611992565b9050602002016020810190610d3b91906114a8565b6001600160a01b03163b151590565b610d665760405162461bcd60e51b815260040161032e9061175d565b610d90888883818110610d7b57610d7b611992565b905060200201602081019061023291906114a8565b6000888883818110610da457610da4611992565b9050602002016020810190610db991906114a8565b6001600160a01b0316878784818110610dd457610dd4611992565b905060200201358c8c85818110610ded57610ded611992565b9050602002810190610dff91906119c5565b604051610e0d929190611786565b60006040518083038185875af1925050503d8060008114610e4a576040519150601f19603f3d011682016040523d82523d6000602084013e610e4f565b606091505b5050905080610e65576040513d806000833e8082fd5b5080610e7081611a0b565b915050610cdb565b50506001600160a01b03821615610f7a573660006020610e9983601f6117ac565b610ea391906117c4565b9050610200610eb36002836118cc565b610ebd91906117c4565b610ec88260066118db565b610ed291906117ac565b610edc90846117ac565b9250333214610eea57600091505b836001600160a01b031663e3db8a49335a610f0590876118fa565b856040518463ffffffff1660e01b8152600401610f2493929190611911565b602060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190611940565b5050505b505050505050505050565b610f936000858585856102dd565b50505050565b3360009081526065602052604090205460ff16158015610fc9575033610fbd610b00565b6001600160a01b031614155b15610fd45733610314565b8360005a90508260005b818110156110ea57866001600160a01b0316631b45c86a87878481811061100757611007611992565b905060200201602081019061101c9190611a26565b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401600060405180830381600087803b15801561105d57600080fd5b505af192505050801561106e575060015b6110d8573d80801561109c576040519150601f19603f3d011682016040523d82523d6000602084013e6110a1565b606091505b5080516110d65760405162461bcd60e51b815260206004820152600360248201526247415360e81b604482015260640161032e565b505b806110e281611a0b565b915050610fde565b50506001600160a01b0382161561085357366000602061110b83601f6117ac565b61111591906117c4565b90506102006111256002836118cc565b61112f91906117c4565b61113a8260066118db565b61114491906117ac565b61114e90846117ac565b925033321461115c57600091505b836001600160a01b031663e3db8a49335a61117790876118fa565b856040518463ffffffff1660e01b815260040161119693929190611911565b602060405180830381600087803b1580156111b057600080fd5b505af11580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a9190611940565b336111f1610b00565b6001600160a01b0316146112175760405162461bcd60e51b815260040161032e9061195d565b6001600160a01b03811661127c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032e565b610b88815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166112fa5760405162461bcd60e51b815260040161032e90611a4f565b610841600054610100900460ff166113245760405162461bcd60e51b815260040161032e90611a4f565b61084133611281565b6001600160a01b0381168114610b8857600080fd5b60008083601f84011261135457600080fd5b5081356001600160401b0381111561136b57600080fd5b60208301915083602082850101111561138357600080fd5b9250929050565b6000806000806000608086880312156113a257600080fd5b85356113ad8161132d565b945060208601356001600160401b038111156113c857600080fd5b6113d488828901611342565b90955093505060408601356113e88161132d565b949793965091946060013592915050565b60008083601f84011261140b57600080fd5b5081356001600160401b0381111561142257600080fd5b6020830191508360208260051b850101111561138357600080fd5b6000806000806040858703121561145357600080fd5b84356001600160401b038082111561146a57600080fd5b611476888389016113f9565b9096509450602087013591508082111561148f57600080fd5b5061149c878288016113f9565b95989497509550505050565b6000602082840312156114ba57600080fd5b81356114c58161132d565b9392505050565b600080600080600080606087890312156114e557600080fd5b86356001600160401b03808211156114fc57600080fd5b6115088a838b016113f9565b9098509650602089013591508082111561152157600080fd5b61152d8a838b016113f9565b9096509450604089013591508082111561154657600080fd5b5061155389828a016113f9565b979a9699509497509295939492505050565b6000806000806060858703121561157b57600080fd5b84356115868161132d565b935060208501356115968161132d565b925060408501356001600160401b038111156115b157600080fd5b61149c878288016113f9565b6001600160a01b0391909116815260200190565b600080604083850312156115e457600080fd5b8235915060208301356115f68161132d565b809150509250929050565b60008060006040848603121561161657600080fd5b83356116218161132d565b925060208401356001600160401b0381111561163c57600080fd5b611648868287016113f9565b9497909650939450505050565b60008060008060008060006080888a03121561167057600080fd5b873561167b8161132d565b965060208801356001600160401b038082111561169757600080fd5b6116a38b838c016113f9565b909850965060408a01359150808211156116bc57600080fd5b6116c88b838c016113f9565b909650945060608a01359150808211156116e157600080fd5b506116ee8a828b016113f9565b989b979a50959850939692959293505050565b6000806000806060858703121561171757600080fd5b84356001600160401b0381111561172d57600080fd5b61173987828801611342565b909550935050602085013561174d8161132d565b9396929550929360400135925050565b6020808252600f908201526e2727afa1a7a222afa0aa2fa0a2222960891b604082015260600190565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156117bf576117bf611796565b500190565b6000826117e157634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561182157816000190482111561180757611807611796565b8085161561181457918102915b93841c93908002906117eb565b509250929050565b600082611838575060016118c6565b81611845575060006118c6565b816001811461185b576002811461186557611881565b60019150506118c6565b60ff84111561187657611876611796565b50506001821b6118c6565b5060208310610133831016604e8410600b84101617156118a4575081810a6118c6565b6118ae83836117e6565b80600019048211156118c2576118c2611796565b0290505b92915050565b60006114c560ff841683611829565b60008160001904831182151516156118f5576118f5611796565b500290565b60008282101561190c5761190c611796565b500390565b6001600160a01b039390931683526020830191909152604082015260600190565b8015158114610b8857600080fd5b60006020828403121561195257600080fd5b81516114c581611932565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119ba57600080fd5b81356114c581611932565b6000808335601e198436030181126119dc57600080fd5b8301803591506001600160401b038211156119f657600080fd5b60200191503681900382131561138357600080fd5b6000600019821415611a1f57611a1f611796565b5060010190565b600060208284031215611a3857600080fd5b81356001600160401b03811681146114c557600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220d872e383159213c300139c855f81c0fe777c77be115bd05e58c0a0327fd9871864736f6c63430008090033",
}

// ValidatorWalletABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletMetaData.ABI instead.
var ValidatorWalletABI = ValidatorWalletMetaData.ABI

// ValidatorWalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletMetaData.Bin instead.
var ValidatorWalletBin = ValidatorWalletMetaData.Bin

// DeployValidatorWallet deploys a new Ethereum contract, binding an instance of ValidatorWallet to it.
func DeployValidatorWallet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWallet, error) {
	parsed, err := ValidatorWalletMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// ValidatorWallet is an auto generated Go binding around an Ethereum contract.
type ValidatorWallet struct {
	ValidatorWalletCaller     // Read-only binding to the contract
	ValidatorWalletTransactor // Write-only binding to the contract
	ValidatorWalletFilterer   // Log filterer for contract events
}

// ValidatorWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletSession struct {
	Contract     *ValidatorWallet  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCallerSession struct {
	Contract *ValidatorWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ValidatorWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletTransactorSession struct {
	Contract     *ValidatorWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidatorWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletRaw struct {
	Contract *ValidatorWallet // Generic contract binding to access the raw methods on
}

// ValidatorWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCallerRaw struct {
	Contract *ValidatorWalletCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactorRaw struct {
	Contract *ValidatorWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWallet creates a new instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWallet(address common.Address, backend bind.ContractBackend) (*ValidatorWallet, error) {
	contract, err := bindValidatorWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// NewValidatorWalletCaller creates a new read-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCaller, error) {
	contract, err := bindValidatorWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCaller{contract: contract}, nil
}

// NewValidatorWalletTransactor creates a new write-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletTransactor, error) {
	contract, err := bindValidatorWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletTransactor{contract: contract}, nil
}

// NewValidatorWalletFilterer creates a new log filterer instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletFilterer, error) {
	contract, err := bindValidatorWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletFilterer{contract: contract}, nil
}

// bindValidatorWallet binds a generic wrapper to an already deployed contract.
func bindValidatorWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorWalletABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.ValidatorWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transact(opts, method, params...)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) AllowedExecutorDestinations(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "allowedExecutorDestinations", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) Executors(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "executors", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCallerSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCaller) ValidateExecuteTransaction(opts *bind.CallOpts, destination common.Address) error {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "validateExecuteTransaction", destination)

	if err != nil {
		return err
	}

	return err

}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCallerSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransaction(opts *bind.TransactOpts, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransaction", data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactions(opts *bind.TransactOpts, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactions", data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionsWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionsWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Initialize(opts *bind.TransactOpts, _executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "initialize", _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetAllowedExecutorDestinations(opts *bind.TransactOpts, destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setAllowedExecutorDestinations", destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetExecutor(opts *bind.TransactOpts, newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setExecutor", newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TimeoutChallenges(opts *bind.TransactOpts, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "timeoutChallenges", manager, challenges)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletSession) TimeoutChallenges(manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallenges(&_ValidatorWallet.TransactOpts, manager, challenges)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TimeoutChallenges(manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallenges(&_ValidatorWallet.TransactOpts, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TimeoutChallengesWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "timeoutChallengesWithGasRefunder", gasRefunder, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletSession) TimeoutChallengesWithGasRefunder(gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallengesWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TimeoutChallengesWithGasRefunder(gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallengesWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, manager, challenges)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) WithdrawEth(opts *bind.TransactOpts, amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "withdrawEth", amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// ValidatorWalletAllowedExecutorDestinationsUpdatedIterator is returned from FilterAllowedExecutorDestinationsUpdated and is used to iterate over the raw logs and unpacked data for AllowedExecutorDestinationsUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdatedIterator struct {
	Event *ValidatorWalletAllowedExecutorDestinationsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletAllowedExecutorDestinationsUpdated represents a AllowedExecutorDestinationsUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdated struct {
	Destination common.Address
	IsSet       bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAllowedExecutorDestinationsUpdated is a free log retrieval operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterAllowedExecutorDestinationsUpdated(opts *bind.FilterOpts, destination []common.Address) (*ValidatorWalletAllowedExecutorDestinationsUpdatedIterator, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletAllowedExecutorDestinationsUpdatedIterator{contract: _ValidatorWallet.contract, event: "AllowedExecutorDestinationsUpdated", logs: logs, sub: sub}, nil
}

// WatchAllowedExecutorDestinationsUpdated is a free log subscription operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchAllowedExecutorDestinationsUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletAllowedExecutorDestinationsUpdated, destination []common.Address) (event.Subscription, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowedExecutorDestinationsUpdated is a log parse operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseAllowedExecutorDestinationsUpdated(log types.Log) (*ValidatorWalletAllowedExecutorDestinationsUpdated, error) {
	event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletExecutorUpdatedIterator is returned from FilterExecutorUpdated and is used to iterate over the raw logs and unpacked data for ExecutorUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdatedIterator struct {
	Event *ValidatorWalletExecutorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletExecutorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletExecutorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletExecutorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletExecutorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletExecutorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletExecutorUpdated represents a ExecutorUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdated struct {
	Executor   common.Address
	IsExecutor bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecutorUpdated is a free log retrieval operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterExecutorUpdated(opts *bind.FilterOpts, executor []common.Address) (*ValidatorWalletExecutorUpdatedIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletExecutorUpdatedIterator{contract: _ValidatorWallet.contract, event: "ExecutorUpdated", logs: logs, sub: sub}, nil
}

// WatchExecutorUpdated is a free log subscription operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchExecutorUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletExecutorUpdated, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletExecutorUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutorUpdated is a log parse operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseExecutorUpdated(log types.Log) (*ValidatorWalletExecutorUpdated, error) {
	event := new(ValidatorWalletExecutorUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferredIterator struct {
	Event *ValidatorWalletOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletOwnershipTransferredIterator{contract: _ValidatorWallet.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletOwnershipTransferred)
				if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletOwnershipTransferred, error) {
	event := new(ValidatorWalletOwnershipTransferred)
	if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorMetaData contains all meta data concerning the ValidatorWalletCreator contract.
var ValidatorWalletCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"setTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ValidatorWalletCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletCreatorMetaData.ABI instead.
var ValidatorWalletCreatorABI = ValidatorWalletCreatorMetaData.ABI

// ValidatorWalletCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletCreatorMetaData.Bin instead.
var ValidatorWalletCreatorBin = ValidatorWalletCreatorMetaData.Bin

// DeployValidatorWalletCreator deploys a new Ethereum contract, binding an instance of ValidatorWalletCreator to it.
func DeployValidatorWalletCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWalletCreator, error) {
	parsed, err := ValidatorWalletCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// ValidatorWalletCreator is an auto generated Go binding around an Ethereum contract.
type ValidatorWalletCreator struct {
	ValidatorWalletCreatorCaller     // Read-only binding to the contract
	ValidatorWalletCreatorTransactor // Write-only binding to the contract
	ValidatorWalletCreatorFilterer   // Log filterer for contract events
}

// ValidatorWalletCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletCreatorSession struct {
	Contract     *ValidatorWalletCreator // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCreatorCallerSession struct {
	Contract *ValidatorWalletCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ValidatorWalletCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletCreatorTransactorSession struct {
	Contract     *ValidatorWalletCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletCreatorRaw struct {
	Contract *ValidatorWalletCreator // Generic contract binding to access the raw methods on
}

// ValidatorWalletCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCallerRaw struct {
	Contract *ValidatorWalletCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactorRaw struct {
	Contract *ValidatorWalletCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWalletCreator creates a new instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreator(address common.Address, backend bind.ContractBackend) (*ValidatorWalletCreator, error) {
	contract, err := bindValidatorWalletCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// NewValidatorWalletCreatorCaller creates a new read-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCreatorCaller, error) {
	contract, err := bindValidatorWalletCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorCaller{contract: contract}, nil
}

// NewValidatorWalletCreatorTransactor creates a new write-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletCreatorTransactor, error) {
	contract, err := bindValidatorWalletCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTransactor{contract: contract}, nil
}

// NewValidatorWalletCreatorFilterer creates a new log filterer instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletCreatorFilterer, error) {
	contract, err := bindValidatorWalletCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorFilterer{contract: contract}, nil
}

// bindValidatorWalletCreator binds a generic wrapper to an already deployed contract.
func bindValidatorWalletCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorWalletCreatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Template(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "template")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) CreateWallet(opts *bind.TransactOpts, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "createWallet", initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) SetTemplate(opts *bind.TransactOpts, _template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "setTemplate", _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// ValidatorWalletCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferredIterator struct {
	Event *ValidatorWalletCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorOwnershipTransferredIterator{contract: _ValidatorWalletCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorOwnershipTransferred)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletCreatorOwnershipTransferred, error) {
	event := new(ValidatorWalletCreatorOwnershipTransferred)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorTemplateUpdatedIterator is returned from FilterTemplateUpdated and is used to iterate over the raw logs and unpacked data for TemplateUpdated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdatedIterator struct {
	Event *ValidatorWalletCreatorTemplateUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorTemplateUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorTemplateUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorTemplateUpdated represents a TemplateUpdated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplateUpdated is a free log retrieval operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterTemplateUpdated(opts *bind.FilterOpts) (*ValidatorWalletCreatorTemplateUpdatedIterator, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTemplateUpdatedIterator{contract: _ValidatorWalletCreator.contract, event: "TemplateUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplateUpdated is a free log subscription operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchTemplateUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorTemplateUpdated) (event.Subscription, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorTemplateUpdated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplateUpdated is a log parse operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseTemplateUpdated(log types.Log) (*ValidatorWalletCreatorTemplateUpdated, error) {
	event := new(ValidatorWalletCreatorTemplateUpdated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorWalletCreatedIterator is returned from FilterWalletCreated and is used to iterate over the raw logs and unpacked data for WalletCreated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreatedIterator struct {
	Event *ValidatorWalletCreatorWalletCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorWalletCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorWalletCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorWalletCreated represents a WalletCreated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreated struct {
	WalletAddress   common.Address
	ExecutorAddress common.Address
	OwnerAddress    common.Address
	AdminProxy      common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWalletCreated is a free log retrieval operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterWalletCreated(opts *bind.FilterOpts, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (*ValidatorWalletCreatorWalletCreatedIterator, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorWalletCreatedIterator{contract: _ValidatorWalletCreator.contract, event: "WalletCreated", logs: logs, sub: sub}, nil
}

// WatchWalletCreated is a free log subscription operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchWalletCreated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorWalletCreated, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (event.Subscription, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorWalletCreated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWalletCreated is a log parse operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseWalletCreated(log types.Log) (*ValidatorWalletCreatorWalletCreated, error) {
	event := new(ValidatorWalletCreatorWalletCreated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
